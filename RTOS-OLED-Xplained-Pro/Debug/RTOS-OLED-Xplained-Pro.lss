
RTOS-OLED-Xplained-Pro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008080  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00408080  00408080  00018080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009b8  20400000  00408088  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000290  204009b8  00408a40  000209b8  2**2
                  ALLOC
  4 .stack        00002000  20400c48  00408cd0  000209b8  2**0
                  ALLOC
  5 .heap         00000200  20402c48  0040acd0  000209b8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209b8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209e6  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001f42f  00000000  00000000  00020a3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00004104  00000000  00000000  0003fe6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000922c  00000000  00000000  00043f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000f40  00000000  00000000  0004d19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000010f0  00000000  00000000  0004e0de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00020f64  00000000  00000000  0004f1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001132e  00000000  00000000  00070132  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00096031  00000000  00000000  00081460  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031cc  00000000  00000000  00117494  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	48 2c 40 20 71 0b 40 00 6f 0b 40 00 6f 0b 40 00     H,@ q.@.o.@.o.@.
  400010:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 00 00 00 00     o.@.o.@.o.@.....
	...
  40002c:	49 0f 40 00 6f 0b 40 00 00 00 00 00 e9 0f 40 00     I.@.o.@.......@.
  40003c:	51 10 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     Q.@.o.@.o.@.o.@.
  40004c:	61 2d 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     a-@.o.@.o.@.o.@.
  40005c:	6f 0b 40 00 6f 0b 40 00 00 00 00 00 4d 08 40 00     o.@.o.@.....M.@.
  40006c:	61 08 40 00 75 08 40 00 6f 0b 40 00 6f 0b 40 00     a.@.u.@.o.@.o.@.
  40007c:	6f 0b 40 00 89 08 40 00 9d 08 40 00 6f 0b 40 00     o.@...@...@.o.@.
  40008c:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     o.@.o.@.o.@.o.@.
  40009c:	6f 0b 40 00 51 2f 40 00 6f 0b 40 00 6f 0b 40 00     o.@.Q/@.o.@.o.@.
  4000ac:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     o.@.o.@.o.@.o.@.
  4000bc:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     o.@.o.@.o.@.o.@.
  4000cc:	6f 0b 40 00 00 00 00 00 6f 0b 40 00 00 00 00 00     o.@.....o.@.....
  4000dc:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     o.@.o.@.o.@.o.@.
  4000ec:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     o.@.o.@.o.@.o.@.
  4000fc:	6f 0b 40 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     o.@.o.@.o.@.o.@.
  40010c:	6f 0b 40 00 6f 0b 40 00 00 00 00 00 00 00 00 00     o.@.o.@.........
  40011c:	00 00 00 00 6f 0b 40 00 6f 0b 40 00 6f 0b 40 00     ....o.@.o.@.o.@.
  40012c:	6f 0b 40 00 6f 0b 40 00 00 00 00 00 6f 0b 40 00     o.@.o.@.....o.@.
  40013c:	6f 0b 40 00                                         o.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204009b8 	.word	0x204009b8
  40015c:	00000000 	.word	0x00000000
  400160:	00408088 	.word	0x00408088

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408088 	.word	0x00408088
  4001a0:	204009bc 	.word	0x204009bc
  4001a4:	00408088 	.word	0x00408088
  4001a8:	00000000 	.word	0x00000000

004001ac <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4001ac:	4b03      	ldr	r3, [pc, #12]	; (4001bc <rtt_init+0x10>)
  4001ae:	681b      	ldr	r3, [r3, #0]
  4001b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4001b4:	4319      	orrs	r1, r3
  4001b6:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4001b8:	2000      	movs	r0, #0
  4001ba:	4770      	bx	lr
  4001bc:	204009d4 	.word	0x204009d4

004001c0 <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4001c0:	b941      	cbnz	r1, 4001d4 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4001c2:	4a09      	ldr	r2, [pc, #36]	; (4001e8 <rtt_sel_source+0x28>)
  4001c4:	6813      	ldr	r3, [r2, #0]
  4001c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4001ca:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001cc:	6802      	ldr	r2, [r0, #0]
  4001ce:	4313      	orrs	r3, r2
  4001d0:	6003      	str	r3, [r0, #0]
  4001d2:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  4001d4:	4a04      	ldr	r2, [pc, #16]	; (4001e8 <rtt_sel_source+0x28>)
  4001d6:	6813      	ldr	r3, [r2, #0]
  4001d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4001dc:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4001de:	6802      	ldr	r2, [r0, #0]
  4001e0:	4313      	orrs	r3, r2
  4001e2:	6003      	str	r3, [r0, #0]
  4001e4:	4770      	bx	lr
  4001e6:	bf00      	nop
  4001e8:	204009d4 	.word	0x204009d4

004001ec <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  4001ec:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  4001ee:	4b03      	ldr	r3, [pc, #12]	; (4001fc <rtt_enable_interrupt+0x10>)
  4001f0:	681b      	ldr	r3, [r3, #0]
  4001f2:	4319      	orrs	r1, r3
  4001f4:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  4001f6:	6001      	str	r1, [r0, #0]
  4001f8:	4770      	bx	lr
  4001fa:	bf00      	nop
  4001fc:	204009d4 	.word	0x204009d4

00400200 <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  400200:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  400202:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400206:	4b02      	ldr	r3, [pc, #8]	; (400210 <rtt_disable_interrupt+0x10>)
  400208:	681b      	ldr	r3, [r3, #0]
  40020a:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  40020c:	6001      	str	r1, [r0, #0]
  40020e:	4770      	bx	lr
  400210:	204009d4 	.word	0x204009d4

00400214 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400214:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400216:	6883      	ldr	r3, [r0, #8]
  400218:	429a      	cmp	r2, r3
  40021a:	d003      	beq.n	400224 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  40021c:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40021e:	6883      	ldr	r3, [r0, #8]
  400220:	4293      	cmp	r3, r2
  400222:	d1fb      	bne.n	40021c <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400224:	4618      	mov	r0, r3
  400226:	4770      	bx	lr

00400228 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400228:	68c0      	ldr	r0, [r0, #12]
}
  40022a:	4770      	bx	lr

0040022c <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  40022c:	b570      	push	{r4, r5, r6, lr}
  40022e:	4606      	mov	r6, r0
  400230:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  400232:	6804      	ldr	r4, [r0, #0]
  400234:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400238:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40023c:	4809      	ldr	r0, [pc, #36]	; (400264 <rtt_write_alarm_time+0x38>)
  40023e:	4b0a      	ldr	r3, [pc, #40]	; (400268 <rtt_write_alarm_time+0x3c>)
  400240:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  400242:	b92d      	cbnz	r5, 400250 <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400244:	f04f 33ff 	mov.w	r3, #4294967295
  400248:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  40024a:	b924      	cbnz	r4, 400256 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  40024c:	2000      	movs	r0, #0
  40024e:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  400250:	3d01      	subs	r5, #1
  400252:	6075      	str	r5, [r6, #4]
  400254:	e7f9      	b.n	40024a <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400256:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  40025a:	4802      	ldr	r0, [pc, #8]	; (400264 <rtt_write_alarm_time+0x38>)
  40025c:	4b03      	ldr	r3, [pc, #12]	; (40026c <rtt_write_alarm_time+0x40>)
  40025e:	4798      	blx	r3
  400260:	e7f4      	b.n	40024c <rtt_write_alarm_time+0x20>
  400262:	bf00      	nop
  400264:	400e1830 	.word	0x400e1830
  400268:	00400201 	.word	0x00400201
  40026c:	004001ed 	.word	0x004001ed

00400270 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  400270:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400272:	0189      	lsls	r1, r1, #6
  400274:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  400276:	2402      	movs	r4, #2
  400278:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  40027a:	f04f 31ff 	mov.w	r1, #4294967295
  40027e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  400280:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  400282:	605a      	str	r2, [r3, #4]
}
  400284:	f85d 4b04 	ldr.w	r4, [sp], #4
  400288:	4770      	bx	lr

0040028a <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  40028a:	0189      	lsls	r1, r1, #6
  40028c:	2305      	movs	r3, #5
  40028e:	5043      	str	r3, [r0, r1]
  400290:	4770      	bx	lr

00400292 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
  400292:	0189      	lsls	r1, r1, #6
  400294:	2302      	movs	r3, #2
  400296:	5043      	str	r3, [r0, r1]
  400298:	4770      	bx	lr

0040029a <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  40029a:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40029e:	61ca      	str	r2, [r1, #28]
  4002a0:	4770      	bx	lr

004002a2 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002a2:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  4002a6:	624a      	str	r2, [r1, #36]	; 0x24
  4002a8:	4770      	bx	lr

004002aa <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4002aa:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  4002ae:	6a08      	ldr	r0, [r1, #32]
}
  4002b0:	4770      	bx	lr

004002b2 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  4002b2:	b4f0      	push	{r4, r5, r6, r7}
  4002b4:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4002b6:	2402      	movs	r4, #2
  4002b8:	9401      	str	r4, [sp, #4]
  4002ba:	2408      	movs	r4, #8
  4002bc:	9402      	str	r4, [sp, #8]
  4002be:	2420      	movs	r4, #32
  4002c0:	9403      	str	r4, [sp, #12]
  4002c2:	2480      	movs	r4, #128	; 0x80
  4002c4:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  4002c6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4002c8:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  4002ca:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  4002cc:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  4002d0:	d814      	bhi.n	4002fc <tc_find_mck_divisor+0x4a>
  4002d2:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  4002d4:	42a0      	cmp	r0, r4
  4002d6:	d217      	bcs.n	400308 <tc_find_mck_divisor+0x56>
  4002d8:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  4002da:	af01      	add	r7, sp, #4
  4002dc:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  4002e0:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  4002e4:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  4002e6:	4284      	cmp	r4, r0
  4002e8:	d30a      	bcc.n	400300 <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  4002ea:	4286      	cmp	r6, r0
  4002ec:	d90d      	bls.n	40030a <tc_find_mck_divisor+0x58>
			ul_index++) {
  4002ee:	3501      	adds	r5, #1
	for (ul_index = 0;
  4002f0:	2d05      	cmp	r5, #5
  4002f2:	d1f3      	bne.n	4002dc <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  4002f4:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  4002f6:	b006      	add	sp, #24
  4002f8:	bcf0      	pop	{r4, r5, r6, r7}
  4002fa:	4770      	bx	lr
			return 0;
  4002fc:	2000      	movs	r0, #0
  4002fe:	e7fa      	b.n	4002f6 <tc_find_mck_divisor+0x44>
  400300:	2000      	movs	r0, #0
  400302:	e7f8      	b.n	4002f6 <tc_find_mck_divisor+0x44>
	return 1;
  400304:	2001      	movs	r0, #1
  400306:	e7f6      	b.n	4002f6 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400308:	2500      	movs	r5, #0
	if (p_uldiv) {
  40030a:	b12a      	cbz	r2, 400318 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40030c:	a906      	add	r1, sp, #24
  40030e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400312:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400316:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400318:	2b00      	cmp	r3, #0
  40031a:	d0f3      	beq.n	400304 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40031c:	601d      	str	r5, [r3, #0]
	return 1;
  40031e:	2001      	movs	r0, #1
  400320:	e7e9      	b.n	4002f6 <tc_find_mck_divisor+0x44>
	...

00400324 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400324:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400326:	4810      	ldr	r0, [pc, #64]	; (400368 <sysclk_init+0x44>)
  400328:	4b10      	ldr	r3, [pc, #64]	; (40036c <sysclk_init+0x48>)
  40032a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  40032c:	213e      	movs	r1, #62	; 0x3e
  40032e:	2000      	movs	r0, #0
  400330:	4b0f      	ldr	r3, [pc, #60]	; (400370 <sysclk_init+0x4c>)
  400332:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400334:	4c0f      	ldr	r4, [pc, #60]	; (400374 <sysclk_init+0x50>)
  400336:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400338:	2800      	cmp	r0, #0
  40033a:	d0fc      	beq.n	400336 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  40033c:	4b0e      	ldr	r3, [pc, #56]	; (400378 <sysclk_init+0x54>)
  40033e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400340:	4a0e      	ldr	r2, [pc, #56]	; (40037c <sysclk_init+0x58>)
  400342:	4b0f      	ldr	r3, [pc, #60]	; (400380 <sysclk_init+0x5c>)
  400344:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400346:	4c0f      	ldr	r4, [pc, #60]	; (400384 <sysclk_init+0x60>)
  400348:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  40034a:	2800      	cmp	r0, #0
  40034c:	d0fc      	beq.n	400348 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  40034e:	2002      	movs	r0, #2
  400350:	4b0d      	ldr	r3, [pc, #52]	; (400388 <sysclk_init+0x64>)
  400352:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400354:	2000      	movs	r0, #0
  400356:	4b0d      	ldr	r3, [pc, #52]	; (40038c <sysclk_init+0x68>)
  400358:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40035a:	4b0d      	ldr	r3, [pc, #52]	; (400390 <sysclk_init+0x6c>)
  40035c:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  40035e:	4802      	ldr	r0, [pc, #8]	; (400368 <sysclk_init+0x44>)
  400360:	4b02      	ldr	r3, [pc, #8]	; (40036c <sysclk_init+0x48>)
  400362:	4798      	blx	r3
  400364:	bd10      	pop	{r4, pc}
  400366:	bf00      	nop
  400368:	11e1a300 	.word	0x11e1a300
  40036c:	00400d45 	.word	0x00400d45
  400370:	0040094d 	.word	0x0040094d
  400374:	004009a1 	.word	0x004009a1
  400378:	004009b1 	.word	0x004009b1
  40037c:	20183f01 	.word	0x20183f01
  400380:	400e0600 	.word	0x400e0600
  400384:	004009c1 	.word	0x004009c1
  400388:	004008b1 	.word	0x004008b1
  40038c:	004008e9 	.word	0x004008e9
  400390:	00400c39 	.word	0x00400c39

00400394 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400398:	b980      	cbnz	r0, 4003bc <_read+0x28>
  40039a:	460c      	mov	r4, r1
  40039c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40039e:	2a00      	cmp	r2, #0
  4003a0:	dd0f      	ble.n	4003c2 <_read+0x2e>
  4003a2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  4003a4:	4e08      	ldr	r6, [pc, #32]	; (4003c8 <_read+0x34>)
  4003a6:	4d09      	ldr	r5, [pc, #36]	; (4003cc <_read+0x38>)
  4003a8:	6830      	ldr	r0, [r6, #0]
  4003aa:	4621      	mov	r1, r4
  4003ac:	682b      	ldr	r3, [r5, #0]
  4003ae:	4798      	blx	r3
		ptr++;
  4003b0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  4003b2:	42bc      	cmp	r4, r7
  4003b4:	d1f8      	bne.n	4003a8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  4003b6:	4640      	mov	r0, r8
  4003b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4003bc:	f04f 38ff 	mov.w	r8, #4294967295
  4003c0:	e7f9      	b.n	4003b6 <_read+0x22>
	for (; len > 0; --len) {
  4003c2:	4680      	mov	r8, r0
  4003c4:	e7f7      	b.n	4003b6 <_read+0x22>
  4003c6:	bf00      	nop
  4003c8:	20400bd0 	.word	0x20400bd0
  4003cc:	20400bc8 	.word	0x20400bc8

004003d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4003d0:	3801      	subs	r0, #1
  4003d2:	2802      	cmp	r0, #2
  4003d4:	d815      	bhi.n	400402 <_write+0x32>
{
  4003d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003da:	460e      	mov	r6, r1
  4003dc:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4003de:	b19a      	cbz	r2, 400408 <_write+0x38>
  4003e0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4003e2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 40041c <_write+0x4c>
  4003e6:	4f0c      	ldr	r7, [pc, #48]	; (400418 <_write+0x48>)
  4003e8:	f8d8 0000 	ldr.w	r0, [r8]
  4003ec:	f815 1b01 	ldrb.w	r1, [r5], #1
  4003f0:	683b      	ldr	r3, [r7, #0]
  4003f2:	4798      	blx	r3
  4003f4:	2800      	cmp	r0, #0
  4003f6:	db0a      	blt.n	40040e <_write+0x3e>
  4003f8:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4003fa:	3c01      	subs	r4, #1
  4003fc:	d1f4      	bne.n	4003e8 <_write+0x18>
  4003fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400402:	f04f 30ff 	mov.w	r0, #4294967295
  400406:	4770      	bx	lr
	for (; len != 0; --len) {
  400408:	4610      	mov	r0, r2
  40040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  40040e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  400412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400416:	bf00      	nop
  400418:	20400bcc 	.word	0x20400bcc
  40041c:	20400bd0 	.word	0x20400bd0

00400420 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400422:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400426:	4b5c      	ldr	r3, [pc, #368]	; (400598 <board_init+0x178>)
  400428:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  40042a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40042e:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400432:	4b5a      	ldr	r3, [pc, #360]	; (40059c <board_init+0x17c>)
  400434:	2200      	movs	r2, #0
  400436:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  40043a:	695a      	ldr	r2, [r3, #20]
  40043c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  400440:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400442:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400446:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  40044a:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40044e:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400452:	f007 0007 	and.w	r0, r7, #7
  400456:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400458:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40045c:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  400460:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400464:	f3bf 8f4f 	dsb	sy
  400468:	f04f 34ff 	mov.w	r4, #4294967295
  40046c:	fa04 fc00 	lsl.w	ip, r4, r0
  400470:	fa06 f000 	lsl.w	r0, r6, r0
  400474:	fa04 f40e 	lsl.w	r4, r4, lr
  400478:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40047c:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40047e:	463a      	mov	r2, r7
  400480:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400482:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400486:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  40048a:	3a01      	subs	r2, #1
  40048c:	4423      	add	r3, r4
  40048e:	f1b2 3fff 	cmp.w	r2, #4294967295
  400492:	d1f6      	bne.n	400482 <board_init+0x62>
        } while(sets--);
  400494:	3e01      	subs	r6, #1
  400496:	4460      	add	r0, ip
  400498:	f1b6 3fff 	cmp.w	r6, #4294967295
  40049c:	d1ef      	bne.n	40047e <board_init+0x5e>
  40049e:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  4004a2:	4b3e      	ldr	r3, [pc, #248]	; (40059c <board_init+0x17c>)
  4004a4:	695a      	ldr	r2, [r3, #20]
  4004a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  4004aa:	615a      	str	r2, [r3, #20]
  4004ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004b0:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4004b4:	4a3a      	ldr	r2, [pc, #232]	; (4005a0 <board_init+0x180>)
  4004b6:	493b      	ldr	r1, [pc, #236]	; (4005a4 <board_init+0x184>)
  4004b8:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  4004ba:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  4004be:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  4004c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004c4:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4004c8:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4004cc:	f022 0201 	bic.w	r2, r2, #1
  4004d0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4004d4:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4004d8:	f022 0201 	bic.w	r2, r2, #1
  4004dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4004e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4004e4:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4004e8:	200a      	movs	r0, #10
  4004ea:	4c2f      	ldr	r4, [pc, #188]	; (4005a8 <board_init+0x188>)
  4004ec:	47a0      	blx	r4
  4004ee:	200b      	movs	r0, #11
  4004f0:	47a0      	blx	r4
  4004f2:	200c      	movs	r0, #12
  4004f4:	47a0      	blx	r4
  4004f6:	2010      	movs	r0, #16
  4004f8:	47a0      	blx	r4
  4004fa:	2011      	movs	r0, #17
  4004fc:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4004fe:	4b2b      	ldr	r3, [pc, #172]	; (4005ac <board_init+0x18c>)
  400500:	f44f 7280 	mov.w	r2, #256	; 0x100
  400504:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40050a:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  40050c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  400510:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400514:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400516:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  40051a:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  40051c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400520:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  400522:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  400524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400528:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40052a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  40052e:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400530:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400532:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  400536:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400538:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40053c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400540:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400544:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400548:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40054a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  40054e:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400550:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400556:	6f19      	ldr	r1, [r3, #112]	; 0x70
  400558:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  40055c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40055e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400560:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  400564:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400566:	605a      	str	r2, [r3, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400568:	4a11      	ldr	r2, [pc, #68]	; (4005b0 <board_init+0x190>)
  40056a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40056e:	f043 0310 	orr.w	r3, r3, #16
  400572:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400576:	4b0f      	ldr	r3, [pc, #60]	; (4005b4 <board_init+0x194>)
  400578:	2210      	movs	r2, #16
  40057a:	661a      	str	r2, [r3, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40057c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400580:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400582:	625a      	str	r2, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400588:	6f19      	ldr	r1, [r3, #112]	; 0x70
  40058a:	4311      	orrs	r1, r2
  40058c:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  40058e:	6f59      	ldr	r1, [r3, #116]	; 0x74
  400590:	4311      	orrs	r1, r2
  400592:	6759      	str	r1, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400594:	605a      	str	r2, [r3, #4]
  400596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400598:	400e1850 	.word	0x400e1850
  40059c:	e000ed00 	.word	0xe000ed00
  4005a0:	400e0c00 	.word	0x400e0c00
  4005a4:	5a00080c 	.word	0x5a00080c
  4005a8:	004009d1 	.word	0x004009d1
  4005ac:	400e1200 	.word	0x400e1200
  4005b0:	40088000 	.word	0x40088000
  4005b4:	400e1000 	.word	0x400e1000

004005b8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  4005b8:	6301      	str	r1, [r0, #48]	; 0x30
  4005ba:	4770      	bx	lr

004005bc <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  4005bc:	6341      	str	r1, [r0, #52]	; 0x34
  4005be:	4770      	bx	lr

004005c0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  4005c0:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  4005c2:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4005c6:	d03a      	beq.n	40063e <pio_set_peripheral+0x7e>
  4005c8:	d813      	bhi.n	4005f2 <pio_set_peripheral+0x32>
  4005ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4005ce:	d025      	beq.n	40061c <pio_set_peripheral+0x5c>
  4005d0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4005d4:	d10a      	bne.n	4005ec <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  4005d6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  4005d8:	4313      	orrs	r3, r2
  4005da:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  4005dc:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4005de:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4005e0:	400b      	ands	r3, r1
  4005e2:	ea23 0302 	bic.w	r3, r3, r2
  4005e6:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  4005e8:	6042      	str	r2, [r0, #4]
  4005ea:	4770      	bx	lr
	switch (ul_type) {
  4005ec:	2900      	cmp	r1, #0
  4005ee:	d1fb      	bne.n	4005e8 <pio_set_peripheral+0x28>
  4005f0:	4770      	bx	lr
  4005f2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4005f6:	d021      	beq.n	40063c <pio_set_peripheral+0x7c>
  4005f8:	d809      	bhi.n	40060e <pio_set_peripheral+0x4e>
  4005fa:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4005fe:	d1f3      	bne.n	4005e8 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400600:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400602:	4313      	orrs	r3, r2
  400604:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400606:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  400608:	4313      	orrs	r3, r2
  40060a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40060c:	e7ec      	b.n	4005e8 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40060e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400612:	d013      	beq.n	40063c <pio_set_peripheral+0x7c>
  400614:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400618:	d010      	beq.n	40063c <pio_set_peripheral+0x7c>
  40061a:	e7e5      	b.n	4005e8 <pio_set_peripheral+0x28>
{
  40061c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40061e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400620:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400622:	43d3      	mvns	r3, r2
  400624:	4021      	ands	r1, r4
  400626:	461c      	mov	r4, r3
  400628:	4019      	ands	r1, r3
  40062a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40062c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40062e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400630:	400b      	ands	r3, r1
  400632:	4023      	ands	r3, r4
  400634:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  400636:	6042      	str	r2, [r0, #4]
}
  400638:	f85d 4b04 	ldr.w	r4, [sp], #4
  40063c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40063e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400640:	6f01      	ldr	r1, [r0, #112]	; 0x70
  400642:	400b      	ands	r3, r1
  400644:	ea23 0302 	bic.w	r3, r3, r2
  400648:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40064a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40064c:	4313      	orrs	r3, r2
  40064e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400650:	e7ca      	b.n	4005e8 <pio_set_peripheral+0x28>

00400652 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400652:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400654:	f012 0f01 	tst.w	r2, #1
  400658:	d10d      	bne.n	400676 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  40065a:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  40065c:	f012 0f0a 	tst.w	r2, #10
  400660:	d00b      	beq.n	40067a <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400662:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  400664:	f012 0f02 	tst.w	r2, #2
  400668:	d109      	bne.n	40067e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  40066a:	f012 0f08 	tst.w	r2, #8
  40066e:	d008      	beq.n	400682 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400670:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  400674:	e005      	b.n	400682 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  400676:	6641      	str	r1, [r0, #100]	; 0x64
  400678:	e7f0      	b.n	40065c <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  40067a:	6241      	str	r1, [r0, #36]	; 0x24
  40067c:	e7f2      	b.n	400664 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  40067e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400682:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  400684:	6001      	str	r1, [r0, #0]
  400686:	4770      	bx	lr

00400688 <pio_set_output>:
{
  400688:	b410      	push	{r4}
  40068a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  40068c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40068e:	b94c      	cbnz	r4, 4006a4 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400690:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400692:	b14b      	cbz	r3, 4006a8 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  400694:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  400696:	b94a      	cbnz	r2, 4006ac <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  400698:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40069a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40069c:	6001      	str	r1, [r0, #0]
}
  40069e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006a2:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4006a4:	6641      	str	r1, [r0, #100]	; 0x64
  4006a6:	e7f4      	b.n	400692 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4006a8:	6541      	str	r1, [r0, #84]	; 0x54
  4006aa:	e7f4      	b.n	400696 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4006ac:	6301      	str	r1, [r0, #48]	; 0x30
  4006ae:	e7f4      	b.n	40069a <pio_set_output+0x12>

004006b0 <pio_configure>:
{
  4006b0:	b570      	push	{r4, r5, r6, lr}
  4006b2:	b082      	sub	sp, #8
  4006b4:	4605      	mov	r5, r0
  4006b6:	4616      	mov	r6, r2
  4006b8:	461c      	mov	r4, r3
	switch (ul_type) {
  4006ba:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4006be:	d014      	beq.n	4006ea <pio_configure+0x3a>
  4006c0:	d90a      	bls.n	4006d8 <pio_configure+0x28>
  4006c2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4006c6:	d024      	beq.n	400712 <pio_configure+0x62>
  4006c8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4006cc:	d021      	beq.n	400712 <pio_configure+0x62>
  4006ce:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4006d2:	d017      	beq.n	400704 <pio_configure+0x54>
		return 0;
  4006d4:	2000      	movs	r0, #0
  4006d6:	e01a      	b.n	40070e <pio_configure+0x5e>
	switch (ul_type) {
  4006d8:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  4006dc:	d005      	beq.n	4006ea <pio_configure+0x3a>
  4006de:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  4006e2:	d002      	beq.n	4006ea <pio_configure+0x3a>
  4006e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  4006e8:	d1f4      	bne.n	4006d4 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  4006ea:	4632      	mov	r2, r6
  4006ec:	4628      	mov	r0, r5
  4006ee:	4b11      	ldr	r3, [pc, #68]	; (400734 <pio_configure+0x84>)
  4006f0:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4006f2:	f014 0f01 	tst.w	r4, #1
  4006f6:	d102      	bne.n	4006fe <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  4006f8:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  4006fa:	2001      	movs	r0, #1
  4006fc:	e007      	b.n	40070e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  4006fe:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400700:	2001      	movs	r0, #1
  400702:	e004      	b.n	40070e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400704:	461a      	mov	r2, r3
  400706:	4631      	mov	r1, r6
  400708:	4b0b      	ldr	r3, [pc, #44]	; (400738 <pio_configure+0x88>)
  40070a:	4798      	blx	r3
	return 1;
  40070c:	2001      	movs	r0, #1
}
  40070e:	b002      	add	sp, #8
  400710:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400712:	f004 0301 	and.w	r3, r4, #1
  400716:	9300      	str	r3, [sp, #0]
  400718:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40071c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400720:	bf14      	ite	ne
  400722:	2200      	movne	r2, #0
  400724:	2201      	moveq	r2, #1
  400726:	4631      	mov	r1, r6
  400728:	4628      	mov	r0, r5
  40072a:	4c04      	ldr	r4, [pc, #16]	; (40073c <pio_configure+0x8c>)
  40072c:	47a0      	blx	r4
	return 1;
  40072e:	2001      	movs	r0, #1
		break;
  400730:	e7ed      	b.n	40070e <pio_configure+0x5e>
  400732:	bf00      	nop
  400734:	004005c1 	.word	0x004005c1
  400738:	00400653 	.word	0x00400653
  40073c:	00400689 	.word	0x00400689

00400740 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  400740:	6b83      	ldr	r3, [r0, #56]	; 0x38
  400742:	420b      	tst	r3, r1
}
  400744:	bf14      	ite	ne
  400746:	2001      	movne	r0, #1
  400748:	2000      	moveq	r0, #0
  40074a:	4770      	bx	lr

0040074c <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  40074c:	f012 0f10 	tst.w	r2, #16
  400750:	d012      	beq.n	400778 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  400752:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  400756:	f012 0f20 	tst.w	r2, #32
  40075a:	d007      	beq.n	40076c <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  40075c:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  400760:	f012 0f40 	tst.w	r2, #64	; 0x40
  400764:	d005      	beq.n	400772 <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  400766:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  40076a:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  40076c:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  400770:	e7f6      	b.n	400760 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  400772:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  400776:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  400778:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  40077c:	4770      	bx	lr

0040077e <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  40077e:	6401      	str	r1, [r0, #64]	; 0x40
  400780:	4770      	bx	lr

00400782 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  400782:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  400784:	4770      	bx	lr

00400786 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  400786:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  400788:	4770      	bx	lr
	...

0040078c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  40078c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400790:	4604      	mov	r4, r0
  400792:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  400794:	4b0e      	ldr	r3, [pc, #56]	; (4007d0 <pio_handler_process+0x44>)
  400796:	4798      	blx	r3
  400798:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  40079a:	4620      	mov	r0, r4
  40079c:	4b0d      	ldr	r3, [pc, #52]	; (4007d4 <pio_handler_process+0x48>)
  40079e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4007a0:	4005      	ands	r5, r0
  4007a2:	d013      	beq.n	4007cc <pio_handler_process+0x40>
  4007a4:	4c0c      	ldr	r4, [pc, #48]	; (4007d8 <pio_handler_process+0x4c>)
  4007a6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4007aa:	e003      	b.n	4007b4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4007ac:	42b4      	cmp	r4, r6
  4007ae:	d00d      	beq.n	4007cc <pio_handler_process+0x40>
  4007b0:	3410      	adds	r4, #16
		while (status != 0) {
  4007b2:	b15d      	cbz	r5, 4007cc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4007b4:	6820      	ldr	r0, [r4, #0]
  4007b6:	4540      	cmp	r0, r8
  4007b8:	d1f8      	bne.n	4007ac <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4007ba:	6861      	ldr	r1, [r4, #4]
  4007bc:	4229      	tst	r1, r5
  4007be:	d0f5      	beq.n	4007ac <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4007c0:	68e3      	ldr	r3, [r4, #12]
  4007c2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4007c4:	6863      	ldr	r3, [r4, #4]
  4007c6:	ea25 0503 	bic.w	r5, r5, r3
  4007ca:	e7ef      	b.n	4007ac <pio_handler_process+0x20>
  4007cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007d0:	00400783 	.word	0x00400783
  4007d4:	00400787 	.word	0x00400787
  4007d8:	204009d8 	.word	0x204009d8

004007dc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  4007dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  4007de:	4c18      	ldr	r4, [pc, #96]	; (400840 <pio_handler_set+0x64>)
  4007e0:	6826      	ldr	r6, [r4, #0]
  4007e2:	2e06      	cmp	r6, #6
  4007e4:	d82a      	bhi.n	40083c <pio_handler_set+0x60>
  4007e6:	f04f 0c00 	mov.w	ip, #0
  4007ea:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4007ec:	4f15      	ldr	r7, [pc, #84]	; (400844 <pio_handler_set+0x68>)
  4007ee:	e004      	b.n	4007fa <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  4007f0:	3401      	adds	r4, #1
  4007f2:	b2e4      	uxtb	r4, r4
  4007f4:	46a4      	mov	ip, r4
  4007f6:	42a6      	cmp	r6, r4
  4007f8:	d309      	bcc.n	40080e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  4007fa:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  4007fc:	0125      	lsls	r5, r4, #4
  4007fe:	597d      	ldr	r5, [r7, r5]
  400800:	428d      	cmp	r5, r1
  400802:	d1f5      	bne.n	4007f0 <pio_handler_set+0x14>
  400804:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400808:	686d      	ldr	r5, [r5, #4]
  40080a:	4295      	cmp	r5, r2
  40080c:	d1f0      	bne.n	4007f0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40080e:	4d0d      	ldr	r5, [pc, #52]	; (400844 <pio_handler_set+0x68>)
  400810:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  400814:	eb05 040e 	add.w	r4, r5, lr
  400818:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  40081c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  40081e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400820:	9906      	ldr	r1, [sp, #24]
  400822:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  400824:	3601      	adds	r6, #1
  400826:	4566      	cmp	r6, ip
  400828:	d005      	beq.n	400836 <pio_handler_set+0x5a>
  40082a:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  40082c:	461a      	mov	r2, r3
  40082e:	4b06      	ldr	r3, [pc, #24]	; (400848 <pio_handler_set+0x6c>)
  400830:	4798      	blx	r3

	return 0;
  400832:	2000      	movs	r0, #0
  400834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  400836:	4902      	ldr	r1, [pc, #8]	; (400840 <pio_handler_set+0x64>)
  400838:	600e      	str	r6, [r1, #0]
  40083a:	e7f6      	b.n	40082a <pio_handler_set+0x4e>
		return 1;
  40083c:	2001      	movs	r0, #1
}
  40083e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400840:	20400a48 	.word	0x20400a48
  400844:	204009d8 	.word	0x204009d8
  400848:	0040074d 	.word	0x0040074d

0040084c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40084c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40084e:	210a      	movs	r1, #10
  400850:	4801      	ldr	r0, [pc, #4]	; (400858 <PIOA_Handler+0xc>)
  400852:	4b02      	ldr	r3, [pc, #8]	; (40085c <PIOA_Handler+0x10>)
  400854:	4798      	blx	r3
  400856:	bd08      	pop	{r3, pc}
  400858:	400e0e00 	.word	0x400e0e00
  40085c:	0040078d 	.word	0x0040078d

00400860 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  400860:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  400862:	210b      	movs	r1, #11
  400864:	4801      	ldr	r0, [pc, #4]	; (40086c <PIOB_Handler+0xc>)
  400866:	4b02      	ldr	r3, [pc, #8]	; (400870 <PIOB_Handler+0x10>)
  400868:	4798      	blx	r3
  40086a:	bd08      	pop	{r3, pc}
  40086c:	400e1000 	.word	0x400e1000
  400870:	0040078d 	.word	0x0040078d

00400874 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  400874:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  400876:	210c      	movs	r1, #12
  400878:	4801      	ldr	r0, [pc, #4]	; (400880 <PIOC_Handler+0xc>)
  40087a:	4b02      	ldr	r3, [pc, #8]	; (400884 <PIOC_Handler+0x10>)
  40087c:	4798      	blx	r3
  40087e:	bd08      	pop	{r3, pc}
  400880:	400e1200 	.word	0x400e1200
  400884:	0040078d 	.word	0x0040078d

00400888 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  400888:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40088a:	2110      	movs	r1, #16
  40088c:	4801      	ldr	r0, [pc, #4]	; (400894 <PIOD_Handler+0xc>)
  40088e:	4b02      	ldr	r3, [pc, #8]	; (400898 <PIOD_Handler+0x10>)
  400890:	4798      	blx	r3
  400892:	bd08      	pop	{r3, pc}
  400894:	400e1400 	.word	0x400e1400
  400898:	0040078d 	.word	0x0040078d

0040089c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40089c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40089e:	2111      	movs	r1, #17
  4008a0:	4801      	ldr	r0, [pc, #4]	; (4008a8 <PIOE_Handler+0xc>)
  4008a2:	4b02      	ldr	r3, [pc, #8]	; (4008ac <PIOE_Handler+0x10>)
  4008a4:	4798      	blx	r3
  4008a6:	bd08      	pop	{r3, pc}
  4008a8:	400e1600 	.word	0x400e1600
  4008ac:	0040078d 	.word	0x0040078d

004008b0 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4008b0:	2803      	cmp	r0, #3
  4008b2:	d011      	beq.n	4008d8 <pmc_mck_set_division+0x28>
  4008b4:	2804      	cmp	r0, #4
  4008b6:	d012      	beq.n	4008de <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4008b8:	2802      	cmp	r0, #2
  4008ba:	bf0c      	ite	eq
  4008bc:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4008c0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4008c2:	4a08      	ldr	r2, [pc, #32]	; (4008e4 <pmc_mck_set_division+0x34>)
  4008c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4008c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4008ca:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4008cc:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4008ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008d0:	f013 0f08 	tst.w	r3, #8
  4008d4:	d0fb      	beq.n	4008ce <pmc_mck_set_division+0x1e>
}
  4008d6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4008d8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4008dc:	e7f1      	b.n	4008c2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4008de:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4008e2:	e7ee      	b.n	4008c2 <pmc_mck_set_division+0x12>
  4008e4:	400e0600 	.word	0x400e0600

004008e8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4008e8:	4a17      	ldr	r2, [pc, #92]	; (400948 <pmc_switch_mck_to_pllack+0x60>)
  4008ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4008ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4008f0:	4318      	orrs	r0, r3
  4008f2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4008f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008f6:	f013 0f08 	tst.w	r3, #8
  4008fa:	d10a      	bne.n	400912 <pmc_switch_mck_to_pllack+0x2a>
  4008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400900:	4911      	ldr	r1, [pc, #68]	; (400948 <pmc_switch_mck_to_pllack+0x60>)
  400902:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400904:	f012 0f08 	tst.w	r2, #8
  400908:	d103      	bne.n	400912 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40090a:	3b01      	subs	r3, #1
  40090c:	d1f9      	bne.n	400902 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  40090e:	2001      	movs	r0, #1
  400910:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  400912:	4a0d      	ldr	r2, [pc, #52]	; (400948 <pmc_switch_mck_to_pllack+0x60>)
  400914:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400916:	f023 0303 	bic.w	r3, r3, #3
  40091a:	f043 0302 	orr.w	r3, r3, #2
  40091e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400920:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400922:	f013 0f08 	tst.w	r3, #8
  400926:	d10a      	bne.n	40093e <pmc_switch_mck_to_pllack+0x56>
  400928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40092c:	4906      	ldr	r1, [pc, #24]	; (400948 <pmc_switch_mck_to_pllack+0x60>)
  40092e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400930:	f012 0f08 	tst.w	r2, #8
  400934:	d105      	bne.n	400942 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400936:	3b01      	subs	r3, #1
  400938:	d1f9      	bne.n	40092e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40093a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40093c:	4770      	bx	lr
	return 0;
  40093e:	2000      	movs	r0, #0
  400940:	4770      	bx	lr
  400942:	2000      	movs	r0, #0
  400944:	4770      	bx	lr
  400946:	bf00      	nop
  400948:	400e0600 	.word	0x400e0600

0040094c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40094c:	b9a0      	cbnz	r0, 400978 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40094e:	480e      	ldr	r0, [pc, #56]	; (400988 <pmc_switch_mainck_to_xtal+0x3c>)
  400950:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  400952:	0209      	lsls	r1, r1, #8
  400954:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  400956:	4a0d      	ldr	r2, [pc, #52]	; (40098c <pmc_switch_mainck_to_xtal+0x40>)
  400958:	401a      	ands	r2, r3
  40095a:	4b0d      	ldr	r3, [pc, #52]	; (400990 <pmc_switch_mainck_to_xtal+0x44>)
  40095c:	4313      	orrs	r3, r2
  40095e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400960:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  400962:	4602      	mov	r2, r0
  400964:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400966:	f013 0f01 	tst.w	r3, #1
  40096a:	d0fb      	beq.n	400964 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40096c:	4a06      	ldr	r2, [pc, #24]	; (400988 <pmc_switch_mainck_to_xtal+0x3c>)
  40096e:	6a11      	ldr	r1, [r2, #32]
  400970:	4b08      	ldr	r3, [pc, #32]	; (400994 <pmc_switch_mainck_to_xtal+0x48>)
  400972:	430b      	orrs	r3, r1
  400974:	6213      	str	r3, [r2, #32]
  400976:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400978:	4903      	ldr	r1, [pc, #12]	; (400988 <pmc_switch_mainck_to_xtal+0x3c>)
  40097a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40097c:	4a06      	ldr	r2, [pc, #24]	; (400998 <pmc_switch_mainck_to_xtal+0x4c>)
  40097e:	401a      	ands	r2, r3
  400980:	4b06      	ldr	r3, [pc, #24]	; (40099c <pmc_switch_mainck_to_xtal+0x50>)
  400982:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  400984:	620b      	str	r3, [r1, #32]
  400986:	4770      	bx	lr
  400988:	400e0600 	.word	0x400e0600
  40098c:	ffc8fffc 	.word	0xffc8fffc
  400990:	00370001 	.word	0x00370001
  400994:	01370000 	.word	0x01370000
  400998:	fec8fffc 	.word	0xfec8fffc
  40099c:	01370002 	.word	0x01370002

004009a0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4009a0:	4b02      	ldr	r3, [pc, #8]	; (4009ac <pmc_osc_is_ready_mainck+0xc>)
  4009a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4009a4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4009a8:	4770      	bx	lr
  4009aa:	bf00      	nop
  4009ac:	400e0600 	.word	0x400e0600

004009b0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4009b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4009b4:	4b01      	ldr	r3, [pc, #4]	; (4009bc <pmc_disable_pllack+0xc>)
  4009b6:	629a      	str	r2, [r3, #40]	; 0x28
  4009b8:	4770      	bx	lr
  4009ba:	bf00      	nop
  4009bc:	400e0600 	.word	0x400e0600

004009c0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4009c0:	4b02      	ldr	r3, [pc, #8]	; (4009cc <pmc_is_locked_pllack+0xc>)
  4009c2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4009c4:	f000 0002 	and.w	r0, r0, #2
  4009c8:	4770      	bx	lr
  4009ca:	bf00      	nop
  4009cc:	400e0600 	.word	0x400e0600

004009d0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  4009d0:	283f      	cmp	r0, #63	; 0x3f
  4009d2:	d81e      	bhi.n	400a12 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  4009d4:	281f      	cmp	r0, #31
  4009d6:	d80c      	bhi.n	4009f2 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4009d8:	4b11      	ldr	r3, [pc, #68]	; (400a20 <pmc_enable_periph_clk+0x50>)
  4009da:	699a      	ldr	r2, [r3, #24]
  4009dc:	2301      	movs	r3, #1
  4009de:	4083      	lsls	r3, r0
  4009e0:	4393      	bics	r3, r2
  4009e2:	d018      	beq.n	400a16 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4009e4:	2301      	movs	r3, #1
  4009e6:	fa03 f000 	lsl.w	r0, r3, r0
  4009ea:	4b0d      	ldr	r3, [pc, #52]	; (400a20 <pmc_enable_periph_clk+0x50>)
  4009ec:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4009ee:	2000      	movs	r0, #0
  4009f0:	4770      	bx	lr
		ul_id -= 32;
  4009f2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4009f4:	4b0a      	ldr	r3, [pc, #40]	; (400a20 <pmc_enable_periph_clk+0x50>)
  4009f6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4009fa:	2301      	movs	r3, #1
  4009fc:	4083      	lsls	r3, r0
  4009fe:	4393      	bics	r3, r2
  400a00:	d00b      	beq.n	400a1a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  400a02:	2301      	movs	r3, #1
  400a04:	fa03 f000 	lsl.w	r0, r3, r0
  400a08:	4b05      	ldr	r3, [pc, #20]	; (400a20 <pmc_enable_periph_clk+0x50>)
  400a0a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400a0e:	2000      	movs	r0, #0
  400a10:	4770      	bx	lr
		return 1;
  400a12:	2001      	movs	r0, #1
  400a14:	4770      	bx	lr
	return 0;
  400a16:	2000      	movs	r0, #0
  400a18:	4770      	bx	lr
  400a1a:	2000      	movs	r0, #0
}
  400a1c:	4770      	bx	lr
  400a1e:	bf00      	nop
  400a20:	400e0600 	.word	0x400e0600

00400a24 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
  400a24:	f44f 7380 	mov.w	r3, #256	; 0x100
  400a28:	fa03 f000 	lsl.w	r0, r3, r0
  400a2c:	4b01      	ldr	r3, [pc, #4]	; (400a34 <pmc_enable_pck+0x10>)
  400a2e:	6018      	str	r0, [r3, #0]
  400a30:	4770      	bx	lr
  400a32:	bf00      	nop
  400a34:	400e0600 	.word	0x400e0600

00400a38 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  400a38:	6943      	ldr	r3, [r0, #20]
  400a3a:	f013 0f02 	tst.w	r3, #2
  400a3e:	d002      	beq.n	400a46 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  400a40:	61c1      	str	r1, [r0, #28]
	return 0;
  400a42:	2000      	movs	r0, #0
  400a44:	4770      	bx	lr
		return 1;
  400a46:	2001      	movs	r0, #1
}
  400a48:	4770      	bx	lr

00400a4a <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  400a4a:	6943      	ldr	r3, [r0, #20]
  400a4c:	f013 0f01 	tst.w	r3, #1
  400a50:	d003      	beq.n	400a5a <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  400a52:	6983      	ldr	r3, [r0, #24]
  400a54:	700b      	strb	r3, [r1, #0]
	return 0;
  400a56:	2000      	movs	r0, #0
  400a58:	4770      	bx	lr
		return 1;
  400a5a:	2001      	movs	r0, #1
}
  400a5c:	4770      	bx	lr

00400a5e <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  400a5e:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  400a60:	010b      	lsls	r3, r1, #4
  400a62:	4293      	cmp	r3, r2
  400a64:	d914      	bls.n	400a90 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a66:	00c9      	lsls	r1, r1, #3
  400a68:	084b      	lsrs	r3, r1, #1
  400a6a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  400a6e:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  400a72:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a74:	1e5c      	subs	r4, r3, #1
  400a76:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400a7a:	428c      	cmp	r4, r1
  400a7c:	d901      	bls.n	400a82 <usart_set_async_baudrate+0x24>
		return 1;
  400a7e:	2001      	movs	r0, #1
  400a80:	e017      	b.n	400ab2 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  400a82:	6841      	ldr	r1, [r0, #4]
  400a84:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  400a88:	6041      	str	r1, [r0, #4]
  400a8a:	e00c      	b.n	400aa6 <usart_set_async_baudrate+0x48>
		return 1;
  400a8c:	2001      	movs	r0, #1
  400a8e:	e010      	b.n	400ab2 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  400a90:	0859      	lsrs	r1, r3, #1
  400a92:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  400a96:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  400a9a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  400a9c:	1e5c      	subs	r4, r3, #1
  400a9e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  400aa2:	428c      	cmp	r4, r1
  400aa4:	d8f2      	bhi.n	400a8c <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  400aa6:	0412      	lsls	r2, r2, #16
  400aa8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  400aac:	431a      	orrs	r2, r3
  400aae:	6202      	str	r2, [r0, #32]

	return 0;
  400ab0:	2000      	movs	r0, #0
}
  400ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ab6:	4770      	bx	lr

00400ab8 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  400ab8:	4b08      	ldr	r3, [pc, #32]	; (400adc <usart_reset+0x24>)
  400aba:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  400abe:	2300      	movs	r3, #0
  400ac0:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  400ac2:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  400ac4:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  400ac6:	2388      	movs	r3, #136	; 0x88
  400ac8:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  400aca:	2324      	movs	r3, #36	; 0x24
  400acc:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  400ace:	f44f 7380 	mov.w	r3, #256	; 0x100
  400ad2:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  400ad4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  400ad8:	6003      	str	r3, [r0, #0]
  400ada:	4770      	bx	lr
  400adc:	55534100 	.word	0x55534100

00400ae0 <usart_init_rs232>:
{
  400ae0:	b570      	push	{r4, r5, r6, lr}
  400ae2:	4605      	mov	r5, r0
  400ae4:	460c      	mov	r4, r1
  400ae6:	4616      	mov	r6, r2
	usart_reset(p_usart);
  400ae8:	4b0f      	ldr	r3, [pc, #60]	; (400b28 <usart_init_rs232+0x48>)
  400aea:	4798      	blx	r3
	ul_reg_val = 0;
  400aec:	2200      	movs	r2, #0
  400aee:	4b0f      	ldr	r3, [pc, #60]	; (400b2c <usart_init_rs232+0x4c>)
  400af0:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  400af2:	b1a4      	cbz	r4, 400b1e <usart_init_rs232+0x3e>
  400af4:	4632      	mov	r2, r6
  400af6:	6821      	ldr	r1, [r4, #0]
  400af8:	4628      	mov	r0, r5
  400afa:	4b0d      	ldr	r3, [pc, #52]	; (400b30 <usart_init_rs232+0x50>)
  400afc:	4798      	blx	r3
  400afe:	4602      	mov	r2, r0
  400b00:	b978      	cbnz	r0, 400b22 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b02:	6863      	ldr	r3, [r4, #4]
  400b04:	68a1      	ldr	r1, [r4, #8]
  400b06:	430b      	orrs	r3, r1
  400b08:	6921      	ldr	r1, [r4, #16]
  400b0a:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  400b0c:	68e1      	ldr	r1, [r4, #12]
  400b0e:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  400b10:	4906      	ldr	r1, [pc, #24]	; (400b2c <usart_init_rs232+0x4c>)
  400b12:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  400b14:	6869      	ldr	r1, [r5, #4]
  400b16:	430b      	orrs	r3, r1
  400b18:	606b      	str	r3, [r5, #4]
}
  400b1a:	4610      	mov	r0, r2
  400b1c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  400b1e:	2201      	movs	r2, #1
  400b20:	e7fb      	b.n	400b1a <usart_init_rs232+0x3a>
  400b22:	2201      	movs	r2, #1
  400b24:	e7f9      	b.n	400b1a <usart_init_rs232+0x3a>
  400b26:	bf00      	nop
  400b28:	00400ab9 	.word	0x00400ab9
  400b2c:	20400a4c 	.word	0x20400a4c
  400b30:	00400a5f 	.word	0x00400a5f

00400b34 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  400b34:	2340      	movs	r3, #64	; 0x40
  400b36:	6003      	str	r3, [r0, #0]
  400b38:	4770      	bx	lr

00400b3a <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  400b3a:	2310      	movs	r3, #16
  400b3c:	6003      	str	r3, [r0, #0]
  400b3e:	4770      	bx	lr

00400b40 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  400b40:	6943      	ldr	r3, [r0, #20]
  400b42:	f013 0f02 	tst.w	r3, #2
  400b46:	d004      	beq.n	400b52 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  400b48:	f3c1 0108 	ubfx	r1, r1, #0, #9
  400b4c:	61c1      	str	r1, [r0, #28]
	return 0;
  400b4e:	2000      	movs	r0, #0
  400b50:	4770      	bx	lr
		return 1;
  400b52:	2001      	movs	r0, #1
}
  400b54:	4770      	bx	lr

00400b56 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  400b56:	6943      	ldr	r3, [r0, #20]
  400b58:	f013 0f01 	tst.w	r3, #1
  400b5c:	d005      	beq.n	400b6a <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  400b5e:	6983      	ldr	r3, [r0, #24]
  400b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
  400b64:	600b      	str	r3, [r1, #0]
	return 0;
  400b66:	2000      	movs	r0, #0
  400b68:	4770      	bx	lr
		return 1;
  400b6a:	2001      	movs	r0, #1
}
  400b6c:	4770      	bx	lr

00400b6e <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  400b6e:	e7fe      	b.n	400b6e <Dummy_Handler>

00400b70 <Reset_Handler>:
{
  400b70:	b500      	push	{lr}
  400b72:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400b74:	4b25      	ldr	r3, [pc, #148]	; (400c0c <Reset_Handler+0x9c>)
  400b76:	4a26      	ldr	r2, [pc, #152]	; (400c10 <Reset_Handler+0xa0>)
  400b78:	429a      	cmp	r2, r3
  400b7a:	d010      	beq.n	400b9e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  400b7c:	4b25      	ldr	r3, [pc, #148]	; (400c14 <Reset_Handler+0xa4>)
  400b7e:	4a23      	ldr	r2, [pc, #140]	; (400c0c <Reset_Handler+0x9c>)
  400b80:	429a      	cmp	r2, r3
  400b82:	d20c      	bcs.n	400b9e <Reset_Handler+0x2e>
  400b84:	3b01      	subs	r3, #1
  400b86:	1a9b      	subs	r3, r3, r2
  400b88:	f023 0303 	bic.w	r3, r3, #3
  400b8c:	3304      	adds	r3, #4
  400b8e:	4413      	add	r3, r2
  400b90:	491f      	ldr	r1, [pc, #124]	; (400c10 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400b92:	f851 0b04 	ldr.w	r0, [r1], #4
  400b96:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  400b9a:	429a      	cmp	r2, r3
  400b9c:	d1f9      	bne.n	400b92 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  400b9e:	4b1e      	ldr	r3, [pc, #120]	; (400c18 <Reset_Handler+0xa8>)
  400ba0:	4a1e      	ldr	r2, [pc, #120]	; (400c1c <Reset_Handler+0xac>)
  400ba2:	429a      	cmp	r2, r3
  400ba4:	d20a      	bcs.n	400bbc <Reset_Handler+0x4c>
  400ba6:	3b01      	subs	r3, #1
  400ba8:	1a9b      	subs	r3, r3, r2
  400baa:	f023 0303 	bic.w	r3, r3, #3
  400bae:	3304      	adds	r3, #4
  400bb0:	4413      	add	r3, r2
                *pDest++ = 0;
  400bb2:	2100      	movs	r1, #0
  400bb4:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400bb8:	4293      	cmp	r3, r2
  400bba:	d1fb      	bne.n	400bb4 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  400bbc:	4a18      	ldr	r2, [pc, #96]	; (400c20 <Reset_Handler+0xb0>)
  400bbe:	4b19      	ldr	r3, [pc, #100]	; (400c24 <Reset_Handler+0xb4>)
  400bc0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400bc4:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400bc6:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  400bca:	fab3 f383 	clz	r3, r3
  400bce:	095b      	lsrs	r3, r3, #5
  400bd0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  400bd2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400bd4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  400bd8:	2200      	movs	r2, #0
  400bda:	4b13      	ldr	r3, [pc, #76]	; (400c28 <Reset_Handler+0xb8>)
  400bdc:	701a      	strb	r2, [r3, #0]
	return flags;
  400bde:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  400be0:	4a12      	ldr	r2, [pc, #72]	; (400c2c <Reset_Handler+0xbc>)
  400be2:	6813      	ldr	r3, [r2, #0]
  400be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  400be8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  400bea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400bee:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  400bf2:	b129      	cbz	r1, 400c00 <Reset_Handler+0x90>
		cpu_irq_enable();
  400bf4:	2201      	movs	r2, #1
  400bf6:	4b0c      	ldr	r3, [pc, #48]	; (400c28 <Reset_Handler+0xb8>)
  400bf8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  400bfa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400bfe:	b662      	cpsie	i
        __libc_init_array();
  400c00:	4b0b      	ldr	r3, [pc, #44]	; (400c30 <Reset_Handler+0xc0>)
  400c02:	4798      	blx	r3
        main();
  400c04:	4b0b      	ldr	r3, [pc, #44]	; (400c34 <Reset_Handler+0xc4>)
  400c06:	4798      	blx	r3
  400c08:	e7fe      	b.n	400c08 <Reset_Handler+0x98>
  400c0a:	bf00      	nop
  400c0c:	20400000 	.word	0x20400000
  400c10:	00408088 	.word	0x00408088
  400c14:	204009b8 	.word	0x204009b8
  400c18:	20400c48 	.word	0x20400c48
  400c1c:	204009b8 	.word	0x204009b8
  400c20:	e000ed00 	.word	0xe000ed00
  400c24:	00400000 	.word	0x00400000
  400c28:	20400000 	.word	0x20400000
  400c2c:	e000ed88 	.word	0xe000ed88
  400c30:	0040398d 	.word	0x0040398d
  400c34:	00403019 	.word	0x00403019

00400c38 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400c38:	4b3b      	ldr	r3, [pc, #236]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c3c:	f003 0303 	and.w	r3, r3, #3
  400c40:	2b01      	cmp	r3, #1
  400c42:	d01d      	beq.n	400c80 <SystemCoreClockUpdate+0x48>
  400c44:	b183      	cbz	r3, 400c68 <SystemCoreClockUpdate+0x30>
  400c46:	2b02      	cmp	r3, #2
  400c48:	d036      	beq.n	400cb8 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400c4a:	4b37      	ldr	r3, [pc, #220]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400c4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400c52:	2b70      	cmp	r3, #112	; 0x70
  400c54:	d05f      	beq.n	400d16 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400c56:	4b34      	ldr	r3, [pc, #208]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400c5a:	4934      	ldr	r1, [pc, #208]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400c5c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400c60:	680b      	ldr	r3, [r1, #0]
  400c62:	40d3      	lsrs	r3, r2
  400c64:	600b      	str	r3, [r1, #0]
  400c66:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400c68:	4b31      	ldr	r3, [pc, #196]	; (400d30 <SystemCoreClockUpdate+0xf8>)
  400c6a:	695b      	ldr	r3, [r3, #20]
  400c6c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400c70:	bf14      	ite	ne
  400c72:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400c76:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400c7a:	4b2c      	ldr	r3, [pc, #176]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400c7c:	601a      	str	r2, [r3, #0]
  400c7e:	e7e4      	b.n	400c4a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400c80:	4b29      	ldr	r3, [pc, #164]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400c82:	6a1b      	ldr	r3, [r3, #32]
  400c84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400c88:	d003      	beq.n	400c92 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400c8a:	4a2a      	ldr	r2, [pc, #168]	; (400d34 <SystemCoreClockUpdate+0xfc>)
  400c8c:	4b27      	ldr	r3, [pc, #156]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400c8e:	601a      	str	r2, [r3, #0]
  400c90:	e7db      	b.n	400c4a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400c92:	4a29      	ldr	r2, [pc, #164]	; (400d38 <SystemCoreClockUpdate+0x100>)
  400c94:	4b25      	ldr	r3, [pc, #148]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400c96:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400c98:	4b23      	ldr	r3, [pc, #140]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400c9a:	6a1b      	ldr	r3, [r3, #32]
  400c9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ca0:	2b10      	cmp	r3, #16
  400ca2:	d005      	beq.n	400cb0 <SystemCoreClockUpdate+0x78>
  400ca4:	2b20      	cmp	r3, #32
  400ca6:	d1d0      	bne.n	400c4a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400ca8:	4a22      	ldr	r2, [pc, #136]	; (400d34 <SystemCoreClockUpdate+0xfc>)
  400caa:	4b20      	ldr	r3, [pc, #128]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400cac:	601a      	str	r2, [r3, #0]
          break;
  400cae:	e7cc      	b.n	400c4a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400cb0:	4a22      	ldr	r2, [pc, #136]	; (400d3c <SystemCoreClockUpdate+0x104>)
  400cb2:	4b1e      	ldr	r3, [pc, #120]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400cb4:	601a      	str	r2, [r3, #0]
          break;
  400cb6:	e7c8      	b.n	400c4a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400cb8:	4b1b      	ldr	r3, [pc, #108]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400cba:	6a1b      	ldr	r3, [r3, #32]
  400cbc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400cc0:	d016      	beq.n	400cf0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400cc2:	4a1c      	ldr	r2, [pc, #112]	; (400d34 <SystemCoreClockUpdate+0xfc>)
  400cc4:	4b19      	ldr	r3, [pc, #100]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400cc6:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400cc8:	4b17      	ldr	r3, [pc, #92]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400ccc:	f003 0303 	and.w	r3, r3, #3
  400cd0:	2b02      	cmp	r3, #2
  400cd2:	d1ba      	bne.n	400c4a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cd4:	4a14      	ldr	r2, [pc, #80]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400cd6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400cd8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400cda:	4814      	ldr	r0, [pc, #80]	; (400d2c <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400cdc:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ce0:	6803      	ldr	r3, [r0, #0]
  400ce2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ce6:	b2d2      	uxtb	r2, r2
  400ce8:	fbb3 f3f2 	udiv	r3, r3, r2
  400cec:	6003      	str	r3, [r0, #0]
  400cee:	e7ac      	b.n	400c4a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400cf0:	4a11      	ldr	r2, [pc, #68]	; (400d38 <SystemCoreClockUpdate+0x100>)
  400cf2:	4b0e      	ldr	r3, [pc, #56]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400cf4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400cf6:	4b0c      	ldr	r3, [pc, #48]	; (400d28 <SystemCoreClockUpdate+0xf0>)
  400cf8:	6a1b      	ldr	r3, [r3, #32]
  400cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400cfe:	2b10      	cmp	r3, #16
  400d00:	d005      	beq.n	400d0e <SystemCoreClockUpdate+0xd6>
  400d02:	2b20      	cmp	r3, #32
  400d04:	d1e0      	bne.n	400cc8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400d06:	4a0b      	ldr	r2, [pc, #44]	; (400d34 <SystemCoreClockUpdate+0xfc>)
  400d08:	4b08      	ldr	r3, [pc, #32]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400d0a:	601a      	str	r2, [r3, #0]
          break;
  400d0c:	e7dc      	b.n	400cc8 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400d0e:	4a0b      	ldr	r2, [pc, #44]	; (400d3c <SystemCoreClockUpdate+0x104>)
  400d10:	4b06      	ldr	r3, [pc, #24]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400d12:	601a      	str	r2, [r3, #0]
          break;
  400d14:	e7d8      	b.n	400cc8 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400d16:	4a05      	ldr	r2, [pc, #20]	; (400d2c <SystemCoreClockUpdate+0xf4>)
  400d18:	6813      	ldr	r3, [r2, #0]
  400d1a:	4909      	ldr	r1, [pc, #36]	; (400d40 <SystemCoreClockUpdate+0x108>)
  400d1c:	fba1 1303 	umull	r1, r3, r1, r3
  400d20:	085b      	lsrs	r3, r3, #1
  400d22:	6013      	str	r3, [r2, #0]
  400d24:	4770      	bx	lr
  400d26:	bf00      	nop
  400d28:	400e0600 	.word	0x400e0600
  400d2c:	20400004 	.word	0x20400004
  400d30:	400e1810 	.word	0x400e1810
  400d34:	00b71b00 	.word	0x00b71b00
  400d38:	003d0900 	.word	0x003d0900
  400d3c:	007a1200 	.word	0x007a1200
  400d40:	aaaaaaab 	.word	0xaaaaaaab

00400d44 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400d44:	4b16      	ldr	r3, [pc, #88]	; (400da0 <system_init_flash+0x5c>)
  400d46:	4298      	cmp	r0, r3
  400d48:	d913      	bls.n	400d72 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400d4a:	4b16      	ldr	r3, [pc, #88]	; (400da4 <system_init_flash+0x60>)
  400d4c:	4298      	cmp	r0, r3
  400d4e:	d915      	bls.n	400d7c <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400d50:	4b15      	ldr	r3, [pc, #84]	; (400da8 <system_init_flash+0x64>)
  400d52:	4298      	cmp	r0, r3
  400d54:	d916      	bls.n	400d84 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400d56:	4b15      	ldr	r3, [pc, #84]	; (400dac <system_init_flash+0x68>)
  400d58:	4298      	cmp	r0, r3
  400d5a:	d917      	bls.n	400d8c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400d5c:	4b14      	ldr	r3, [pc, #80]	; (400db0 <system_init_flash+0x6c>)
  400d5e:	4298      	cmp	r0, r3
  400d60:	d918      	bls.n	400d94 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  400d62:	4b14      	ldr	r3, [pc, #80]	; (400db4 <system_init_flash+0x70>)
  400d64:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400d66:	bf94      	ite	ls
  400d68:	4a13      	ldrls	r2, [pc, #76]	; (400db8 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  400d6a:	4a14      	ldrhi	r2, [pc, #80]	; (400dbc <system_init_flash+0x78>)
  400d6c:	4b14      	ldr	r3, [pc, #80]	; (400dc0 <system_init_flash+0x7c>)
  400d6e:	601a      	str	r2, [r3, #0]
  400d70:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400d72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d76:	4b12      	ldr	r3, [pc, #72]	; (400dc0 <system_init_flash+0x7c>)
  400d78:	601a      	str	r2, [r3, #0]
  400d7a:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400d7c:	4a11      	ldr	r2, [pc, #68]	; (400dc4 <system_init_flash+0x80>)
  400d7e:	4b10      	ldr	r3, [pc, #64]	; (400dc0 <system_init_flash+0x7c>)
  400d80:	601a      	str	r2, [r3, #0]
  400d82:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400d84:	4a10      	ldr	r2, [pc, #64]	; (400dc8 <system_init_flash+0x84>)
  400d86:	4b0e      	ldr	r3, [pc, #56]	; (400dc0 <system_init_flash+0x7c>)
  400d88:	601a      	str	r2, [r3, #0]
  400d8a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400d8c:	4a0f      	ldr	r2, [pc, #60]	; (400dcc <system_init_flash+0x88>)
  400d8e:	4b0c      	ldr	r3, [pc, #48]	; (400dc0 <system_init_flash+0x7c>)
  400d90:	601a      	str	r2, [r3, #0]
  400d92:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400d94:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  400d98:	4b09      	ldr	r3, [pc, #36]	; (400dc0 <system_init_flash+0x7c>)
  400d9a:	601a      	str	r2, [r3, #0]
  400d9c:	4770      	bx	lr
  400d9e:	bf00      	nop
  400da0:	015ef3bf 	.word	0x015ef3bf
  400da4:	02bde77f 	.word	0x02bde77f
  400da8:	041cdb3f 	.word	0x041cdb3f
  400dac:	057bceff 	.word	0x057bceff
  400db0:	06dac2bf 	.word	0x06dac2bf
  400db4:	0839b67f 	.word	0x0839b67f
  400db8:	04000500 	.word	0x04000500
  400dbc:	04000600 	.word	0x04000600
  400dc0:	400e0c00 	.word	0x400e0c00
  400dc4:	04000100 	.word	0x04000100
  400dc8:	04000200 	.word	0x04000200
  400dcc:	04000300 	.word	0x04000300

00400dd0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  400dd0:	4b0a      	ldr	r3, [pc, #40]	; (400dfc <_sbrk+0x2c>)
  400dd2:	681b      	ldr	r3, [r3, #0]
  400dd4:	b153      	cbz	r3, 400dec <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  400dd6:	4b09      	ldr	r3, [pc, #36]	; (400dfc <_sbrk+0x2c>)
  400dd8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  400dda:	181a      	adds	r2, r3, r0
  400ddc:	4908      	ldr	r1, [pc, #32]	; (400e00 <_sbrk+0x30>)
  400dde:	4291      	cmp	r1, r2
  400de0:	db08      	blt.n	400df4 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  400de2:	4610      	mov	r0, r2
  400de4:	4a05      	ldr	r2, [pc, #20]	; (400dfc <_sbrk+0x2c>)
  400de6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  400de8:	4618      	mov	r0, r3
  400dea:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  400dec:	4a05      	ldr	r2, [pc, #20]	; (400e04 <_sbrk+0x34>)
  400dee:	4b03      	ldr	r3, [pc, #12]	; (400dfc <_sbrk+0x2c>)
  400df0:	601a      	str	r2, [r3, #0]
  400df2:	e7f0      	b.n	400dd6 <_sbrk+0x6>
		return (caddr_t) -1;	
  400df4:	f04f 30ff 	mov.w	r0, #4294967295
}
  400df8:	4770      	bx	lr
  400dfa:	bf00      	nop
  400dfc:	20400a50 	.word	0x20400a50
  400e00:	2045fffc 	.word	0x2045fffc
  400e04:	20402e48 	.word	0x20402e48

00400e08 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  400e08:	f04f 30ff 	mov.w	r0, #4294967295
  400e0c:	4770      	bx	lr

00400e0e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  400e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  400e12:	604b      	str	r3, [r1, #4]

	return 0;
}
  400e14:	2000      	movs	r0, #0
  400e16:	4770      	bx	lr

00400e18 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  400e18:	2001      	movs	r0, #1
  400e1a:	4770      	bx	lr

00400e1c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  400e1c:	2000      	movs	r0, #0
  400e1e:	4770      	bx	lr

00400e20 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e20:	f100 0308 	add.w	r3, r0, #8
  400e24:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  400e26:	f04f 32ff 	mov.w	r2, #4294967295
  400e2a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e2c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e2e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  400e30:	2300      	movs	r3, #0
  400e32:	6003      	str	r3, [r0, #0]
  400e34:	4770      	bx	lr

00400e36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  400e36:	2300      	movs	r3, #0
  400e38:	6103      	str	r3, [r0, #16]
  400e3a:	4770      	bx	lr

00400e3c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  400e3c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  400e3e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  400e40:	689a      	ldr	r2, [r3, #8]
  400e42:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  400e44:	689a      	ldr	r2, [r3, #8]
  400e46:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  400e48:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e4a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e4c:	6803      	ldr	r3, [r0, #0]
  400e4e:	3301      	adds	r3, #1
  400e50:	6003      	str	r3, [r0, #0]
  400e52:	4770      	bx	lr

00400e54 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  400e54:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  400e56:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  400e58:	f1b5 3fff 	cmp.w	r5, #4294967295
  400e5c:	d002      	beq.n	400e64 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e5e:	f100 0208 	add.w	r2, r0, #8
  400e62:	e002      	b.n	400e6a <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  400e64:	6902      	ldr	r2, [r0, #16]
  400e66:	e004      	b.n	400e72 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  400e68:	461a      	mov	r2, r3
  400e6a:	6853      	ldr	r3, [r2, #4]
  400e6c:	681c      	ldr	r4, [r3, #0]
  400e6e:	42a5      	cmp	r5, r4
  400e70:	d2fa      	bcs.n	400e68 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  400e72:	6853      	ldr	r3, [r2, #4]
  400e74:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  400e76:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  400e78:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  400e7a:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  400e7c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  400e7e:	6803      	ldr	r3, [r0, #0]
  400e80:	3301      	adds	r3, #1
  400e82:	6003      	str	r3, [r0, #0]
}
  400e84:	bc30      	pop	{r4, r5}
  400e86:	4770      	bx	lr

00400e88 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  400e88:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  400e8a:	6842      	ldr	r2, [r0, #4]
  400e8c:	6881      	ldr	r1, [r0, #8]
  400e8e:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  400e90:	6882      	ldr	r2, [r0, #8]
  400e92:	6841      	ldr	r1, [r0, #4]
  400e94:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  400e96:	685a      	ldr	r2, [r3, #4]
  400e98:	4290      	cmp	r0, r2
  400e9a:	d005      	beq.n	400ea8 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  400e9c:	2200      	movs	r2, #0
  400e9e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  400ea0:	6818      	ldr	r0, [r3, #0]
  400ea2:	3801      	subs	r0, #1
  400ea4:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  400ea6:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  400ea8:	6882      	ldr	r2, [r0, #8]
  400eaa:	605a      	str	r2, [r3, #4]
  400eac:	e7f6      	b.n	400e9c <uxListRemove+0x14>
	...

00400eb0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  400eb0:	4b0d      	ldr	r3, [pc, #52]	; (400ee8 <prvTaskExitError+0x38>)
  400eb2:	681b      	ldr	r3, [r3, #0]
  400eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
  400eb8:	d00a      	beq.n	400ed0 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  400eba:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ebe:	b672      	cpsid	i
  400ec0:	f383 8811 	msr	BASEPRI, r3
  400ec4:	f3bf 8f6f 	isb	sy
  400ec8:	f3bf 8f4f 	dsb	sy
  400ecc:	b662      	cpsie	i
  400ece:	e7fe      	b.n	400ece <prvTaskExitError+0x1e>
  400ed0:	f04f 0380 	mov.w	r3, #128	; 0x80
  400ed4:	b672      	cpsid	i
  400ed6:	f383 8811 	msr	BASEPRI, r3
  400eda:	f3bf 8f6f 	isb	sy
  400ede:	f3bf 8f4f 	dsb	sy
  400ee2:	b662      	cpsie	i
  400ee4:	e7fe      	b.n	400ee4 <prvTaskExitError+0x34>
  400ee6:	bf00      	nop
  400ee8:	20400008 	.word	0x20400008

00400eec <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  400eec:	4806      	ldr	r0, [pc, #24]	; (400f08 <prvPortStartFirstTask+0x1c>)
  400eee:	6800      	ldr	r0, [r0, #0]
  400ef0:	6800      	ldr	r0, [r0, #0]
  400ef2:	f380 8808 	msr	MSP, r0
  400ef6:	b662      	cpsie	i
  400ef8:	b661      	cpsie	f
  400efa:	f3bf 8f4f 	dsb	sy
  400efe:	f3bf 8f6f 	isb	sy
  400f02:	df00      	svc	0
  400f04:	bf00      	nop
  400f06:	0000      	.short	0x0000
  400f08:	e000ed08 	.word	0xe000ed08

00400f0c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  400f0c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 400f1c <vPortEnableVFP+0x10>
  400f10:	6801      	ldr	r1, [r0, #0]
  400f12:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  400f16:	6001      	str	r1, [r0, #0]
  400f18:	4770      	bx	lr
  400f1a:	0000      	.short	0x0000
  400f1c:	e000ed88 	.word	0xe000ed88

00400f20 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  400f20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  400f24:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  400f28:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  400f2c:	4b05      	ldr	r3, [pc, #20]	; (400f44 <pxPortInitialiseStack+0x24>)
  400f2e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  400f32:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  400f36:	f06f 0302 	mvn.w	r3, #2
  400f3a:	f840 3c24 	str.w	r3, [r0, #-36]
}
  400f3e:	3844      	subs	r0, #68	; 0x44
  400f40:	4770      	bx	lr
  400f42:	bf00      	nop
  400f44:	00400eb1 	.word	0x00400eb1

00400f48 <SVC_Handler>:
	__asm volatile (
  400f48:	4b06      	ldr	r3, [pc, #24]	; (400f64 <pxCurrentTCBConst2>)
  400f4a:	6819      	ldr	r1, [r3, #0]
  400f4c:	6808      	ldr	r0, [r1, #0]
  400f4e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400f52:	f380 8809 	msr	PSP, r0
  400f56:	f3bf 8f6f 	isb	sy
  400f5a:	f04f 0000 	mov.w	r0, #0
  400f5e:	f380 8811 	msr	BASEPRI, r0
  400f62:	4770      	bx	lr

00400f64 <pxCurrentTCBConst2>:
  400f64:	20400a5c 	.word	0x20400a5c
  400f68:	4770      	bx	lr
  400f6a:	bf00      	nop

00400f6c <vPortEnterCritical>:
  400f6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f70:	b672      	cpsid	i
  400f72:	f383 8811 	msr	BASEPRI, r3
  400f76:	f3bf 8f6f 	isb	sy
  400f7a:	f3bf 8f4f 	dsb	sy
  400f7e:	b662      	cpsie	i
	uxCriticalNesting++;
  400f80:	4a0b      	ldr	r2, [pc, #44]	; (400fb0 <vPortEnterCritical+0x44>)
  400f82:	6813      	ldr	r3, [r2, #0]
  400f84:	3301      	adds	r3, #1
  400f86:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  400f88:	2b01      	cmp	r3, #1
  400f8a:	d10f      	bne.n	400fac <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  400f8c:	4b09      	ldr	r3, [pc, #36]	; (400fb4 <vPortEnterCritical+0x48>)
  400f8e:	681b      	ldr	r3, [r3, #0]
  400f90:	f013 0fff 	tst.w	r3, #255	; 0xff
  400f94:	d00a      	beq.n	400fac <vPortEnterCritical+0x40>
  400f96:	f04f 0380 	mov.w	r3, #128	; 0x80
  400f9a:	b672      	cpsid	i
  400f9c:	f383 8811 	msr	BASEPRI, r3
  400fa0:	f3bf 8f6f 	isb	sy
  400fa4:	f3bf 8f4f 	dsb	sy
  400fa8:	b662      	cpsie	i
  400faa:	e7fe      	b.n	400faa <vPortEnterCritical+0x3e>
  400fac:	4770      	bx	lr
  400fae:	bf00      	nop
  400fb0:	20400008 	.word	0x20400008
  400fb4:	e000ed04 	.word	0xe000ed04

00400fb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  400fb8:	4b0a      	ldr	r3, [pc, #40]	; (400fe4 <vPortExitCritical+0x2c>)
  400fba:	681b      	ldr	r3, [r3, #0]
  400fbc:	b953      	cbnz	r3, 400fd4 <vPortExitCritical+0x1c>
  400fbe:	f04f 0380 	mov.w	r3, #128	; 0x80
  400fc2:	b672      	cpsid	i
  400fc4:	f383 8811 	msr	BASEPRI, r3
  400fc8:	f3bf 8f6f 	isb	sy
  400fcc:	f3bf 8f4f 	dsb	sy
  400fd0:	b662      	cpsie	i
  400fd2:	e7fe      	b.n	400fd2 <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  400fd4:	3b01      	subs	r3, #1
  400fd6:	4a03      	ldr	r2, [pc, #12]	; (400fe4 <vPortExitCritical+0x2c>)
  400fd8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  400fda:	b90b      	cbnz	r3, 400fe0 <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  400fdc:	f383 8811 	msr	BASEPRI, r3
  400fe0:	4770      	bx	lr
  400fe2:	bf00      	nop
  400fe4:	20400008 	.word	0x20400008

00400fe8 <PendSV_Handler>:
	__asm volatile
  400fe8:	f3ef 8009 	mrs	r0, PSP
  400fec:	f3bf 8f6f 	isb	sy
  400ff0:	4b15      	ldr	r3, [pc, #84]	; (401048 <pxCurrentTCBConst>)
  400ff2:	681a      	ldr	r2, [r3, #0]
  400ff4:	f01e 0f10 	tst.w	lr, #16
  400ff8:	bf08      	it	eq
  400ffa:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  400ffe:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401002:	6010      	str	r0, [r2, #0]
  401004:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401008:	f04f 0080 	mov.w	r0, #128	; 0x80
  40100c:	b672      	cpsid	i
  40100e:	f380 8811 	msr	BASEPRI, r0
  401012:	f3bf 8f4f 	dsb	sy
  401016:	f3bf 8f6f 	isb	sy
  40101a:	b662      	cpsie	i
  40101c:	f001 f8b6 	bl	40218c <vTaskSwitchContext>
  401020:	f04f 0000 	mov.w	r0, #0
  401024:	f380 8811 	msr	BASEPRI, r0
  401028:	bc08      	pop	{r3}
  40102a:	6819      	ldr	r1, [r3, #0]
  40102c:	6808      	ldr	r0, [r1, #0]
  40102e:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401032:	f01e 0f10 	tst.w	lr, #16
  401036:	bf08      	it	eq
  401038:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  40103c:	f380 8809 	msr	PSP, r0
  401040:	f3bf 8f6f 	isb	sy
  401044:	4770      	bx	lr
  401046:	bf00      	nop

00401048 <pxCurrentTCBConst>:
  401048:	20400a5c 	.word	0x20400a5c
  40104c:	4770      	bx	lr
  40104e:	bf00      	nop

00401050 <SysTick_Handler>:
{
  401050:	b508      	push	{r3, lr}
	__asm volatile
  401052:	f3ef 8311 	mrs	r3, BASEPRI
  401056:	f04f 0280 	mov.w	r2, #128	; 0x80
  40105a:	b672      	cpsid	i
  40105c:	f382 8811 	msr	BASEPRI, r2
  401060:	f3bf 8f6f 	isb	sy
  401064:	f3bf 8f4f 	dsb	sy
  401068:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  40106a:	4b05      	ldr	r3, [pc, #20]	; (401080 <SysTick_Handler+0x30>)
  40106c:	4798      	blx	r3
  40106e:	b118      	cbz	r0, 401078 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  401070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401074:	4b03      	ldr	r3, [pc, #12]	; (401084 <SysTick_Handler+0x34>)
  401076:	601a      	str	r2, [r3, #0]
	__asm volatile
  401078:	2300      	movs	r3, #0
  40107a:	f383 8811 	msr	BASEPRI, r3
  40107e:	bd08      	pop	{r3, pc}
  401080:	00401e89 	.word	0x00401e89
  401084:	e000ed04 	.word	0xe000ed04

00401088 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  401088:	4a03      	ldr	r2, [pc, #12]	; (401098 <vPortSetupTimerInterrupt+0x10>)
  40108a:	4b04      	ldr	r3, [pc, #16]	; (40109c <vPortSetupTimerInterrupt+0x14>)
  40108c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40108e:	2207      	movs	r2, #7
  401090:	3b04      	subs	r3, #4
  401092:	601a      	str	r2, [r3, #0]
  401094:	4770      	bx	lr
  401096:	bf00      	nop
  401098:	000927bf 	.word	0x000927bf
  40109c:	e000e014 	.word	0xe000e014

004010a0 <xPortStartScheduler>:
{
  4010a0:	b500      	push	{lr}
  4010a2:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  4010a4:	4b25      	ldr	r3, [pc, #148]	; (40113c <xPortStartScheduler+0x9c>)
  4010a6:	781a      	ldrb	r2, [r3, #0]
  4010a8:	b2d2      	uxtb	r2, r2
  4010aa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  4010ac:	22ff      	movs	r2, #255	; 0xff
  4010ae:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  4010b0:	781b      	ldrb	r3, [r3, #0]
  4010b2:	b2db      	uxtb	r3, r3
  4010b4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  4010b8:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4010c0:	4a1f      	ldr	r2, [pc, #124]	; (401140 <xPortStartScheduler+0xa0>)
  4010c2:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  4010c4:	2207      	movs	r2, #7
  4010c6:	4b1f      	ldr	r3, [pc, #124]	; (401144 <xPortStartScheduler+0xa4>)
  4010c8:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4010ca:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010ce:	f013 0f80 	tst.w	r3, #128	; 0x80
  4010d2:	d010      	beq.n	4010f6 <xPortStartScheduler+0x56>
  4010d4:	2206      	movs	r2, #6
  4010d6:	e000      	b.n	4010da <xPortStartScheduler+0x3a>
  4010d8:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  4010da:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010de:	005b      	lsls	r3, r3, #1
  4010e0:	b2db      	uxtb	r3, r3
  4010e2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  4010e6:	f89d 3003 	ldrb.w	r3, [sp, #3]
  4010ea:	1e51      	subs	r1, r2, #1
  4010ec:	f013 0f80 	tst.w	r3, #128	; 0x80
  4010f0:	d1f2      	bne.n	4010d8 <xPortStartScheduler+0x38>
  4010f2:	4b14      	ldr	r3, [pc, #80]	; (401144 <xPortStartScheduler+0xa4>)
  4010f4:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4010f6:	4a13      	ldr	r2, [pc, #76]	; (401144 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  4010f8:	6813      	ldr	r3, [r2, #0]
  4010fa:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  4010fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401100:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  401102:	9b01      	ldr	r3, [sp, #4]
  401104:	b2db      	uxtb	r3, r3
  401106:	4a0d      	ldr	r2, [pc, #52]	; (40113c <xPortStartScheduler+0x9c>)
  401108:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  40110a:	4b0f      	ldr	r3, [pc, #60]	; (401148 <xPortStartScheduler+0xa8>)
  40110c:	681a      	ldr	r2, [r3, #0]
  40110e:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  401112:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  401114:	681a      	ldr	r2, [r3, #0]
  401116:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  40111a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  40111c:	4b0b      	ldr	r3, [pc, #44]	; (40114c <xPortStartScheduler+0xac>)
  40111e:	4798      	blx	r3
	uxCriticalNesting = 0;
  401120:	2200      	movs	r2, #0
  401122:	4b0b      	ldr	r3, [pc, #44]	; (401150 <xPortStartScheduler+0xb0>)
  401124:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  401126:	4b0b      	ldr	r3, [pc, #44]	; (401154 <xPortStartScheduler+0xb4>)
  401128:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  40112a:	4a0b      	ldr	r2, [pc, #44]	; (401158 <xPortStartScheduler+0xb8>)
  40112c:	6813      	ldr	r3, [r2, #0]
  40112e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  401132:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  401134:	4b09      	ldr	r3, [pc, #36]	; (40115c <xPortStartScheduler+0xbc>)
  401136:	4798      	blx	r3
	prvTaskExitError();
  401138:	4b09      	ldr	r3, [pc, #36]	; (401160 <xPortStartScheduler+0xc0>)
  40113a:	4798      	blx	r3
  40113c:	e000e400 	.word	0xe000e400
  401140:	20400a54 	.word	0x20400a54
  401144:	20400a58 	.word	0x20400a58
  401148:	e000ed20 	.word	0xe000ed20
  40114c:	00401089 	.word	0x00401089
  401150:	20400008 	.word	0x20400008
  401154:	00400f0d 	.word	0x00400f0d
  401158:	e000ef34 	.word	0xe000ef34
  40115c:	00400eed 	.word	0x00400eed
  401160:	00400eb1 	.word	0x00400eb1

00401164 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  401164:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  401168:	2b0f      	cmp	r3, #15
  40116a:	d911      	bls.n	401190 <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  40116c:	4a12      	ldr	r2, [pc, #72]	; (4011b8 <vPortValidateInterruptPriority+0x54>)
  40116e:	5c9b      	ldrb	r3, [r3, r2]
  401170:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  401172:	4a12      	ldr	r2, [pc, #72]	; (4011bc <vPortValidateInterruptPriority+0x58>)
  401174:	7812      	ldrb	r2, [r2, #0]
  401176:	429a      	cmp	r2, r3
  401178:	d90a      	bls.n	401190 <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  40117a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40117e:	b672      	cpsid	i
  401180:	f383 8811 	msr	BASEPRI, r3
  401184:	f3bf 8f6f 	isb	sy
  401188:	f3bf 8f4f 	dsb	sy
  40118c:	b662      	cpsie	i
  40118e:	e7fe      	b.n	40118e <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  401190:	4b0b      	ldr	r3, [pc, #44]	; (4011c0 <vPortValidateInterruptPriority+0x5c>)
  401192:	681b      	ldr	r3, [r3, #0]
  401194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  401198:	4a0a      	ldr	r2, [pc, #40]	; (4011c4 <vPortValidateInterruptPriority+0x60>)
  40119a:	6812      	ldr	r2, [r2, #0]
  40119c:	4293      	cmp	r3, r2
  40119e:	d90a      	bls.n	4011b6 <vPortValidateInterruptPriority+0x52>
  4011a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4011a4:	b672      	cpsid	i
  4011a6:	f383 8811 	msr	BASEPRI, r3
  4011aa:	f3bf 8f6f 	isb	sy
  4011ae:	f3bf 8f4f 	dsb	sy
  4011b2:	b662      	cpsie	i
  4011b4:	e7fe      	b.n	4011b4 <vPortValidateInterruptPriority+0x50>
  4011b6:	4770      	bx	lr
  4011b8:	e000e3f0 	.word	0xe000e3f0
  4011bc:	20400a54 	.word	0x20400a54
  4011c0:	e000ed0c 	.word	0xe000ed0c
  4011c4:	20400a58 	.word	0x20400a58

004011c8 <pvPortMalloc>:
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  4011c8:	b510      	push	{r4, lr}
  4011ca:	4604      	mov	r4, r0
void *pvReturn;

	vTaskSuspendAll();
  4011cc:	4b06      	ldr	r3, [pc, #24]	; (4011e8 <pvPortMalloc+0x20>)
  4011ce:	4798      	blx	r3
	{
		pvReturn = malloc( xWantedSize );
  4011d0:	4620      	mov	r0, r4
  4011d2:	4b06      	ldr	r3, [pc, #24]	; (4011ec <pvPortMalloc+0x24>)
  4011d4:	4798      	blx	r3
  4011d6:	4604      	mov	r4, r0
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  4011d8:	4b05      	ldr	r3, [pc, #20]	; (4011f0 <pvPortMalloc+0x28>)
  4011da:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  4011dc:	b10c      	cbz	r4, 4011e2 <pvPortMalloc+0x1a>
		}
	}
	#endif

	return pvReturn;
}
  4011de:	4620      	mov	r0, r4
  4011e0:	bd10      	pop	{r4, pc}
			vApplicationMallocFailedHook();
  4011e2:	4b04      	ldr	r3, [pc, #16]	; (4011f4 <pvPortMalloc+0x2c>)
  4011e4:	4798      	blx	r3
	return pvReturn;
  4011e6:	e7fa      	b.n	4011de <pvPortMalloc+0x16>
  4011e8:	00401e6d 	.word	0x00401e6d
  4011ec:	00403a05 	.word	0x00403a05
  4011f0:	00401fd5 	.word	0x00401fd5
  4011f4:	00402d4b 	.word	0x00402d4b

004011f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
	if( pv )
  4011f8:	b148      	cbz	r0, 40120e <vPortFree+0x16>
{
  4011fa:	b510      	push	{r4, lr}
  4011fc:	4604      	mov	r4, r0
	{
		vTaskSuspendAll();
  4011fe:	4b04      	ldr	r3, [pc, #16]	; (401210 <vPortFree+0x18>)
  401200:	4798      	blx	r3
		{
			free( pv );
  401202:	4620      	mov	r0, r4
  401204:	4b03      	ldr	r3, [pc, #12]	; (401214 <vPortFree+0x1c>)
  401206:	4798      	blx	r3
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
  401208:	4b03      	ldr	r3, [pc, #12]	; (401218 <vPortFree+0x20>)
  40120a:	4798      	blx	r3
  40120c:	bd10      	pop	{r4, pc}
  40120e:	4770      	bx	lr
  401210:	00401e6d 	.word	0x00401e6d
  401214:	00403a15 	.word	0x00403a15
  401218:	00401fd5 	.word	0x00401fd5

0040121c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  40121c:	b538      	push	{r3, r4, r5, lr}
  40121e:	4604      	mov	r4, r0
  401220:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  401222:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401224:	b95a      	cbnz	r2, 40123e <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401226:	6803      	ldr	r3, [r0, #0]
  401228:	2b00      	cmp	r3, #0
  40122a:	d12e      	bne.n	40128a <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  40122c:	6840      	ldr	r0, [r0, #4]
  40122e:	4b1b      	ldr	r3, [pc, #108]	; (40129c <prvCopyDataToQueue+0x80>)
  401230:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  401232:	2300      	movs	r3, #0
  401234:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  401236:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401238:	3301      	adds	r3, #1
  40123a:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  40123c:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  40123e:	b96d      	cbnz	r5, 40125c <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  401240:	6880      	ldr	r0, [r0, #8]
  401242:	4b17      	ldr	r3, [pc, #92]	; (4012a0 <prvCopyDataToQueue+0x84>)
  401244:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  401246:	68a3      	ldr	r3, [r4, #8]
  401248:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40124a:	4413      	add	r3, r2
  40124c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40124e:	6862      	ldr	r2, [r4, #4]
  401250:	4293      	cmp	r3, r2
  401252:	d31c      	bcc.n	40128e <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  401254:	6823      	ldr	r3, [r4, #0]
  401256:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  401258:	2000      	movs	r0, #0
  40125a:	e7ec      	b.n	401236 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  40125c:	68c0      	ldr	r0, [r0, #12]
  40125e:	4b10      	ldr	r3, [pc, #64]	; (4012a0 <prvCopyDataToQueue+0x84>)
  401260:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  401262:	6c23      	ldr	r3, [r4, #64]	; 0x40
  401264:	425b      	negs	r3, r3
  401266:	68e2      	ldr	r2, [r4, #12]
  401268:	441a      	add	r2, r3
  40126a:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  40126c:	6821      	ldr	r1, [r4, #0]
  40126e:	428a      	cmp	r2, r1
  401270:	d202      	bcs.n	401278 <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  401272:	6862      	ldr	r2, [r4, #4]
  401274:	4413      	add	r3, r2
  401276:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  401278:	2d02      	cmp	r5, #2
  40127a:	d10a      	bne.n	401292 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  40127c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40127e:	b153      	cbz	r3, 401296 <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  401280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401282:	3b01      	subs	r3, #1
  401284:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  401286:	2000      	movs	r0, #0
  401288:	e7d5      	b.n	401236 <prvCopyDataToQueue+0x1a>
  40128a:	2000      	movs	r0, #0
  40128c:	e7d3      	b.n	401236 <prvCopyDataToQueue+0x1a>
  40128e:	2000      	movs	r0, #0
  401290:	e7d1      	b.n	401236 <prvCopyDataToQueue+0x1a>
  401292:	2000      	movs	r0, #0
  401294:	e7cf      	b.n	401236 <prvCopyDataToQueue+0x1a>
  401296:	2000      	movs	r0, #0
  401298:	e7cd      	b.n	401236 <prvCopyDataToQueue+0x1a>
  40129a:	bf00      	nop
  40129c:	0040258d 	.word	0x0040258d
  4012a0:	00403f85 	.word	0x00403f85

004012a4 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  4012a4:	b530      	push	{r4, r5, lr}
  4012a6:	b083      	sub	sp, #12
  4012a8:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  4012aa:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  4012ac:	b174      	cbz	r4, 4012cc <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  4012ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4012b2:	429a      	cmp	r2, r3
  4012b4:	d315      	bcc.n	4012e2 <prvNotifyQueueSetContainer+0x3e>
  4012b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012ba:	b672      	cpsid	i
  4012bc:	f383 8811 	msr	BASEPRI, r3
  4012c0:	f3bf 8f6f 	isb	sy
  4012c4:	f3bf 8f4f 	dsb	sy
  4012c8:	b662      	cpsie	i
  4012ca:	e7fe      	b.n	4012ca <prvNotifyQueueSetContainer+0x26>
  4012cc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4012d0:	b672      	cpsid	i
  4012d2:	f383 8811 	msr	BASEPRI, r3
  4012d6:	f3bf 8f6f 	isb	sy
  4012da:	f3bf 8f4f 	dsb	sy
  4012de:	b662      	cpsie	i
  4012e0:	e7fe      	b.n	4012e0 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4012e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4012e4:	4293      	cmp	r3, r2
  4012e6:	d803      	bhi.n	4012f0 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4012e8:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4012ea:	4628      	mov	r0, r5
  4012ec:	b003      	add	sp, #12
  4012ee:	bd30      	pop	{r4, r5, pc}
  4012f0:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4012f2:	a901      	add	r1, sp, #4
  4012f4:	4620      	mov	r0, r4
  4012f6:	4b0b      	ldr	r3, [pc, #44]	; (401324 <prvNotifyQueueSetContainer+0x80>)
  4012f8:	4798      	blx	r3
  4012fa:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4012fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4012fe:	f1b3 3fff 	cmp.w	r3, #4294967295
  401302:	d10a      	bne.n	40131a <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  401304:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401306:	2b00      	cmp	r3, #0
  401308:	d0ef      	beq.n	4012ea <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  40130a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40130e:	4b06      	ldr	r3, [pc, #24]	; (401328 <prvNotifyQueueSetContainer+0x84>)
  401310:	4798      	blx	r3
  401312:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  401314:	bf18      	it	ne
  401316:	2501      	movne	r5, #1
  401318:	e7e7      	b.n	4012ea <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  40131a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40131c:	3301      	adds	r3, #1
  40131e:	64a3      	str	r3, [r4, #72]	; 0x48
  401320:	e7e3      	b.n	4012ea <prvNotifyQueueSetContainer+0x46>
  401322:	bf00      	nop
  401324:	0040121d 	.word	0x0040121d
  401328:	00402361 	.word	0x00402361

0040132c <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  40132c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40132e:	b172      	cbz	r2, 40134e <prvCopyDataFromQueue+0x22>
{
  401330:	b510      	push	{r4, lr}
  401332:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  401334:	68c4      	ldr	r4, [r0, #12]
  401336:	4414      	add	r4, r2
  401338:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40133a:	6840      	ldr	r0, [r0, #4]
  40133c:	4284      	cmp	r4, r0
  40133e:	d301      	bcc.n	401344 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  401340:	6818      	ldr	r0, [r3, #0]
  401342:	60d8      	str	r0, [r3, #12]
  401344:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  401346:	68d9      	ldr	r1, [r3, #12]
  401348:	4b01      	ldr	r3, [pc, #4]	; (401350 <prvCopyDataFromQueue+0x24>)
  40134a:	4798      	blx	r3
  40134c:	bd10      	pop	{r4, pc}
  40134e:	4770      	bx	lr
  401350:	00403f85 	.word	0x00403f85

00401354 <prvUnlockQueue>:
{
  401354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401356:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  401358:	4b22      	ldr	r3, [pc, #136]	; (4013e4 <prvUnlockQueue+0x90>)
  40135a:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40135c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40135e:	2b00      	cmp	r3, #0
  401360:	dd1b      	ble.n	40139a <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401362:	4d21      	ldr	r5, [pc, #132]	; (4013e8 <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  401364:	4f21      	ldr	r7, [pc, #132]	; (4013ec <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401366:	4e22      	ldr	r6, [pc, #136]	; (4013f0 <prvUnlockQueue+0x9c>)
  401368:	e00b      	b.n	401382 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40136a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  40136c:	b1ab      	cbz	r3, 40139a <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40136e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401372:	47b0      	blx	r6
  401374:	b978      	cbnz	r0, 401396 <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  401376:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401378:	3b01      	subs	r3, #1
  40137a:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  40137c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40137e:	2b00      	cmp	r3, #0
  401380:	dd0b      	ble.n	40139a <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  401382:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401384:	2b00      	cmp	r3, #0
  401386:	d0f0      	beq.n	40136a <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  401388:	2100      	movs	r1, #0
  40138a:	4620      	mov	r0, r4
  40138c:	47a8      	blx	r5
  40138e:	2801      	cmp	r0, #1
  401390:	d1f1      	bne.n	401376 <prvUnlockQueue+0x22>
						vTaskMissedYield();
  401392:	47b8      	blx	r7
  401394:	e7ef      	b.n	401376 <prvUnlockQueue+0x22>
							vTaskMissedYield();
  401396:	47b8      	blx	r7
  401398:	e7ed      	b.n	401376 <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40139a:	f04f 33ff 	mov.w	r3, #4294967295
  40139e:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  4013a0:	4b14      	ldr	r3, [pc, #80]	; (4013f4 <prvUnlockQueue+0xa0>)
  4013a2:	4798      	blx	r3
	taskENTER_CRITICAL();
  4013a4:	4b0f      	ldr	r3, [pc, #60]	; (4013e4 <prvUnlockQueue+0x90>)
  4013a6:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4013a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013aa:	2b00      	cmp	r3, #0
  4013ac:	dd14      	ble.n	4013d8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013ae:	6923      	ldr	r3, [r4, #16]
  4013b0:	b193      	cbz	r3, 4013d8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013b2:	f104 0610 	add.w	r6, r4, #16
  4013b6:	4d0e      	ldr	r5, [pc, #56]	; (4013f0 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  4013b8:	4f0c      	ldr	r7, [pc, #48]	; (4013ec <prvUnlockQueue+0x98>)
  4013ba:	e007      	b.n	4013cc <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  4013bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013be:	3b01      	subs	r3, #1
  4013c0:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  4013c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4013c4:	2b00      	cmp	r3, #0
  4013c6:	dd07      	ble.n	4013d8 <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4013c8:	6923      	ldr	r3, [r4, #16]
  4013ca:	b12b      	cbz	r3, 4013d8 <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4013cc:	4630      	mov	r0, r6
  4013ce:	47a8      	blx	r5
  4013d0:	2800      	cmp	r0, #0
  4013d2:	d0f3      	beq.n	4013bc <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4013d4:	47b8      	blx	r7
  4013d6:	e7f1      	b.n	4013bc <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4013d8:	f04f 33ff 	mov.w	r3, #4294967295
  4013dc:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4013de:	4b05      	ldr	r3, [pc, #20]	; (4013f4 <prvUnlockQueue+0xa0>)
  4013e0:	4798      	blx	r3
  4013e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4013e4:	00400f6d 	.word	0x00400f6d
  4013e8:	004012a5 	.word	0x004012a5
  4013ec:	004024bd 	.word	0x004024bd
  4013f0:	00402361 	.word	0x00402361
  4013f4:	00400fb9 	.word	0x00400fb9

004013f8 <xQueueGenericReset>:
{
  4013f8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4013fa:	b308      	cbz	r0, 401440 <xQueueGenericReset+0x48>
  4013fc:	4604      	mov	r4, r0
  4013fe:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  401400:	4b1d      	ldr	r3, [pc, #116]	; (401478 <xQueueGenericReset+0x80>)
  401402:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  401404:	6822      	ldr	r2, [r4, #0]
  401406:	6c21      	ldr	r1, [r4, #64]	; 0x40
  401408:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40140a:	fb03 f301 	mul.w	r3, r3, r1
  40140e:	18d0      	adds	r0, r2, r3
  401410:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  401412:	2000      	movs	r0, #0
  401414:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  401416:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  401418:	1a5b      	subs	r3, r3, r1
  40141a:	4413      	add	r3, r2
  40141c:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  40141e:	f04f 33ff 	mov.w	r3, #4294967295
  401422:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  401424:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  401426:	b9fd      	cbnz	r5, 401468 <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401428:	6923      	ldr	r3, [r4, #16]
  40142a:	b12b      	cbz	r3, 401438 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40142c:	f104 0010 	add.w	r0, r4, #16
  401430:	4b12      	ldr	r3, [pc, #72]	; (40147c <xQueueGenericReset+0x84>)
  401432:	4798      	blx	r3
  401434:	2801      	cmp	r0, #1
  401436:	d00e      	beq.n	401456 <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  401438:	4b11      	ldr	r3, [pc, #68]	; (401480 <xQueueGenericReset+0x88>)
  40143a:	4798      	blx	r3
}
  40143c:	2001      	movs	r0, #1
  40143e:	bd38      	pop	{r3, r4, r5, pc}
  401440:	f04f 0380 	mov.w	r3, #128	; 0x80
  401444:	b672      	cpsid	i
  401446:	f383 8811 	msr	BASEPRI, r3
  40144a:	f3bf 8f6f 	isb	sy
  40144e:	f3bf 8f4f 	dsb	sy
  401452:	b662      	cpsie	i
  401454:	e7fe      	b.n	401454 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  401456:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40145a:	4b0a      	ldr	r3, [pc, #40]	; (401484 <xQueueGenericReset+0x8c>)
  40145c:	601a      	str	r2, [r3, #0]
  40145e:	f3bf 8f4f 	dsb	sy
  401462:	f3bf 8f6f 	isb	sy
  401466:	e7e7      	b.n	401438 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  401468:	f104 0010 	add.w	r0, r4, #16
  40146c:	4d06      	ldr	r5, [pc, #24]	; (401488 <xQueueGenericReset+0x90>)
  40146e:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  401470:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401474:	47a8      	blx	r5
  401476:	e7df      	b.n	401438 <xQueueGenericReset+0x40>
  401478:	00400f6d 	.word	0x00400f6d
  40147c:	00402361 	.word	0x00402361
  401480:	00400fb9 	.word	0x00400fb9
  401484:	e000ed04 	.word	0xe000ed04
  401488:	00400e21 	.word	0x00400e21

0040148c <xQueueGenericCreate>:
{
  40148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  40148e:	b950      	cbnz	r0, 4014a6 <xQueueGenericCreate+0x1a>
  401490:	f04f 0380 	mov.w	r3, #128	; 0x80
  401494:	b672      	cpsid	i
  401496:	f383 8811 	msr	BASEPRI, r3
  40149a:	f3bf 8f6f 	isb	sy
  40149e:	f3bf 8f4f 	dsb	sy
  4014a2:	b662      	cpsie	i
  4014a4:	e7fe      	b.n	4014a4 <xQueueGenericCreate+0x18>
  4014a6:	4606      	mov	r6, r0
  4014a8:	4617      	mov	r7, r2
  4014aa:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  4014ac:	b189      	cbz	r1, 4014d2 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  4014ae:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4014b2:	3059      	adds	r0, #89	; 0x59
  4014b4:	4b12      	ldr	r3, [pc, #72]	; (401500 <xQueueGenericCreate+0x74>)
  4014b6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4014b8:	4604      	mov	r4, r0
  4014ba:	b9e8      	cbnz	r0, 4014f8 <xQueueGenericCreate+0x6c>
  4014bc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4014c0:	b672      	cpsid	i
  4014c2:	f383 8811 	msr	BASEPRI, r3
  4014c6:	f3bf 8f6f 	isb	sy
  4014ca:	f3bf 8f4f 	dsb	sy
  4014ce:	b662      	cpsie	i
  4014d0:	e7fe      	b.n	4014d0 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4014d2:	2058      	movs	r0, #88	; 0x58
  4014d4:	4b0a      	ldr	r3, [pc, #40]	; (401500 <xQueueGenericCreate+0x74>)
  4014d6:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4014d8:	4604      	mov	r4, r0
  4014da:	2800      	cmp	r0, #0
  4014dc:	d0ee      	beq.n	4014bc <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4014de:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4014e0:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4014e2:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4014e4:	2101      	movs	r1, #1
  4014e6:	4620      	mov	r0, r4
  4014e8:	4b06      	ldr	r3, [pc, #24]	; (401504 <xQueueGenericCreate+0x78>)
  4014ea:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4014ec:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4014f0:	2300      	movs	r3, #0
  4014f2:	6563      	str	r3, [r4, #84]	; 0x54
}
  4014f4:	4620      	mov	r0, r4
  4014f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4014f8:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4014fc:	6003      	str	r3, [r0, #0]
  4014fe:	e7ef      	b.n	4014e0 <xQueueGenericCreate+0x54>
  401500:	004011c9 	.word	0x004011c9
  401504:	004013f9 	.word	0x004013f9

00401508 <xQueueGenericSend>:
{
  401508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40150c:	b085      	sub	sp, #20
  40150e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  401510:	b1b8      	cbz	r0, 401542 <xQueueGenericSend+0x3a>
  401512:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401514:	b301      	cbz	r1, 401558 <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401516:	2b02      	cmp	r3, #2
  401518:	d02c      	beq.n	401574 <xQueueGenericSend+0x6c>
  40151a:	461d      	mov	r5, r3
  40151c:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  40151e:	4b66      	ldr	r3, [pc, #408]	; (4016b8 <xQueueGenericSend+0x1b0>)
  401520:	4798      	blx	r3
  401522:	2800      	cmp	r0, #0
  401524:	d134      	bne.n	401590 <xQueueGenericSend+0x88>
  401526:	9b01      	ldr	r3, [sp, #4]
  401528:	2b00      	cmp	r3, #0
  40152a:	d038      	beq.n	40159e <xQueueGenericSend+0x96>
  40152c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401530:	b672      	cpsid	i
  401532:	f383 8811 	msr	BASEPRI, r3
  401536:	f3bf 8f6f 	isb	sy
  40153a:	f3bf 8f4f 	dsb	sy
  40153e:	b662      	cpsie	i
  401540:	e7fe      	b.n	401540 <xQueueGenericSend+0x38>
  401542:	f04f 0380 	mov.w	r3, #128	; 0x80
  401546:	b672      	cpsid	i
  401548:	f383 8811 	msr	BASEPRI, r3
  40154c:	f3bf 8f6f 	isb	sy
  401550:	f3bf 8f4f 	dsb	sy
  401554:	b662      	cpsie	i
  401556:	e7fe      	b.n	401556 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401558:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40155a:	2a00      	cmp	r2, #0
  40155c:	d0db      	beq.n	401516 <xQueueGenericSend+0xe>
  40155e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401562:	b672      	cpsid	i
  401564:	f383 8811 	msr	BASEPRI, r3
  401568:	f3bf 8f6f 	isb	sy
  40156c:	f3bf 8f4f 	dsb	sy
  401570:	b662      	cpsie	i
  401572:	e7fe      	b.n	401572 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401574:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  401576:	2a01      	cmp	r2, #1
  401578:	d0cf      	beq.n	40151a <xQueueGenericSend+0x12>
  40157a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40157e:	b672      	cpsid	i
  401580:	f383 8811 	msr	BASEPRI, r3
  401584:	f3bf 8f6f 	isb	sy
  401588:	f3bf 8f4f 	dsb	sy
  40158c:	b662      	cpsie	i
  40158e:	e7fe      	b.n	40158e <xQueueGenericSend+0x86>
  401590:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  401592:	4e4a      	ldr	r6, [pc, #296]	; (4016bc <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  401594:	f8df a150 	ldr.w	sl, [pc, #336]	; 4016e8 <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  401598:	f8df 912c 	ldr.w	r9, [pc, #300]	; 4016c8 <xQueueGenericSend+0x1c0>
  40159c:	e042      	b.n	401624 <xQueueGenericSend+0x11c>
  40159e:	2700      	movs	r7, #0
  4015a0:	e7f7      	b.n	401592 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  4015a2:	462a      	mov	r2, r5
  4015a4:	4641      	mov	r1, r8
  4015a6:	4620      	mov	r0, r4
  4015a8:	4b45      	ldr	r3, [pc, #276]	; (4016c0 <xQueueGenericSend+0x1b8>)
  4015aa:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  4015ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
  4015ae:	b19b      	cbz	r3, 4015d8 <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  4015b0:	4629      	mov	r1, r5
  4015b2:	4620      	mov	r0, r4
  4015b4:	4b43      	ldr	r3, [pc, #268]	; (4016c4 <xQueueGenericSend+0x1bc>)
  4015b6:	4798      	blx	r3
  4015b8:	2801      	cmp	r0, #1
  4015ba:	d107      	bne.n	4015cc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4015bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015c0:	4b41      	ldr	r3, [pc, #260]	; (4016c8 <xQueueGenericSend+0x1c0>)
  4015c2:	601a      	str	r2, [r3, #0]
  4015c4:	f3bf 8f4f 	dsb	sy
  4015c8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4015cc:	4b3f      	ldr	r3, [pc, #252]	; (4016cc <xQueueGenericSend+0x1c4>)
  4015ce:	4798      	blx	r3
				return pdPASS;
  4015d0:	2001      	movs	r0, #1
}
  4015d2:	b005      	add	sp, #20
  4015d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4015d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4015da:	b173      	cbz	r3, 4015fa <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4015dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4015e0:	4b3b      	ldr	r3, [pc, #236]	; (4016d0 <xQueueGenericSend+0x1c8>)
  4015e2:	4798      	blx	r3
  4015e4:	2801      	cmp	r0, #1
  4015e6:	d1f1      	bne.n	4015cc <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4015e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4015ec:	4b36      	ldr	r3, [pc, #216]	; (4016c8 <xQueueGenericSend+0x1c0>)
  4015ee:	601a      	str	r2, [r3, #0]
  4015f0:	f3bf 8f4f 	dsb	sy
  4015f4:	f3bf 8f6f 	isb	sy
  4015f8:	e7e8      	b.n	4015cc <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4015fa:	2800      	cmp	r0, #0
  4015fc:	d0e6      	beq.n	4015cc <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4015fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401602:	4b31      	ldr	r3, [pc, #196]	; (4016c8 <xQueueGenericSend+0x1c0>)
  401604:	601a      	str	r2, [r3, #0]
  401606:	f3bf 8f4f 	dsb	sy
  40160a:	f3bf 8f6f 	isb	sy
  40160e:	e7dd      	b.n	4015cc <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  401610:	4b2e      	ldr	r3, [pc, #184]	; (4016cc <xQueueGenericSend+0x1c4>)
  401612:	4798      	blx	r3
					return errQUEUE_FULL;
  401614:	2000      	movs	r0, #0
  401616:	e7dc      	b.n	4015d2 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  401618:	4620      	mov	r0, r4
  40161a:	4b2e      	ldr	r3, [pc, #184]	; (4016d4 <xQueueGenericSend+0x1cc>)
  40161c:	4798      	blx	r3
				( void ) xTaskResumeAll();
  40161e:	4b2e      	ldr	r3, [pc, #184]	; (4016d8 <xQueueGenericSend+0x1d0>)
  401620:	4798      	blx	r3
  401622:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  401624:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401626:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  40162a:	429a      	cmp	r2, r3
  40162c:	d3b9      	bcc.n	4015a2 <xQueueGenericSend+0x9a>
  40162e:	2d02      	cmp	r5, #2
  401630:	d0b7      	beq.n	4015a2 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  401632:	9b01      	ldr	r3, [sp, #4]
  401634:	2b00      	cmp	r3, #0
  401636:	d0eb      	beq.n	401610 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  401638:	b90f      	cbnz	r7, 40163e <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40163a:	a802      	add	r0, sp, #8
  40163c:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  40163e:	4b23      	ldr	r3, [pc, #140]	; (4016cc <xQueueGenericSend+0x1c4>)
  401640:	4798      	blx	r3
		vTaskSuspendAll();
  401642:	4b26      	ldr	r3, [pc, #152]	; (4016dc <xQueueGenericSend+0x1d4>)
  401644:	4798      	blx	r3
		prvLockQueue( pxQueue );
  401646:	47b0      	blx	r6
  401648:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40164a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40164e:	d101      	bne.n	401654 <xQueueGenericSend+0x14c>
  401650:	2300      	movs	r3, #0
  401652:	6463      	str	r3, [r4, #68]	; 0x44
  401654:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401656:	f1b3 3fff 	cmp.w	r3, #4294967295
  40165a:	d101      	bne.n	401660 <xQueueGenericSend+0x158>
  40165c:	2300      	movs	r3, #0
  40165e:	64a3      	str	r3, [r4, #72]	; 0x48
  401660:	4b1a      	ldr	r3, [pc, #104]	; (4016cc <xQueueGenericSend+0x1c4>)
  401662:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401664:	a901      	add	r1, sp, #4
  401666:	a802      	add	r0, sp, #8
  401668:	4b1d      	ldr	r3, [pc, #116]	; (4016e0 <xQueueGenericSend+0x1d8>)
  40166a:	4798      	blx	r3
  40166c:	b9e0      	cbnz	r0, 4016a8 <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  40166e:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  401670:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  401674:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  401676:	4b15      	ldr	r3, [pc, #84]	; (4016cc <xQueueGenericSend+0x1c4>)
  401678:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40167a:	45bb      	cmp	fp, r7
  40167c:	d1cc      	bne.n	401618 <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  40167e:	9901      	ldr	r1, [sp, #4]
  401680:	f104 0010 	add.w	r0, r4, #16
  401684:	4b17      	ldr	r3, [pc, #92]	; (4016e4 <xQueueGenericSend+0x1dc>)
  401686:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401688:	4620      	mov	r0, r4
  40168a:	4b12      	ldr	r3, [pc, #72]	; (4016d4 <xQueueGenericSend+0x1cc>)
  40168c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  40168e:	4b12      	ldr	r3, [pc, #72]	; (4016d8 <xQueueGenericSend+0x1d0>)
  401690:	4798      	blx	r3
  401692:	2800      	cmp	r0, #0
  401694:	d1c5      	bne.n	401622 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  401696:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40169a:	f8c9 3000 	str.w	r3, [r9]
  40169e:	f3bf 8f4f 	dsb	sy
  4016a2:	f3bf 8f6f 	isb	sy
  4016a6:	e7bc      	b.n	401622 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  4016a8:	4620      	mov	r0, r4
  4016aa:	4b0a      	ldr	r3, [pc, #40]	; (4016d4 <xQueueGenericSend+0x1cc>)
  4016ac:	4798      	blx	r3
			( void ) xTaskResumeAll();
  4016ae:	4b0a      	ldr	r3, [pc, #40]	; (4016d8 <xQueueGenericSend+0x1d0>)
  4016b0:	4798      	blx	r3
			return errQUEUE_FULL;
  4016b2:	2000      	movs	r0, #0
  4016b4:	e78d      	b.n	4015d2 <xQueueGenericSend+0xca>
  4016b6:	bf00      	nop
  4016b8:	004024c9 	.word	0x004024c9
  4016bc:	00400f6d 	.word	0x00400f6d
  4016c0:	0040121d 	.word	0x0040121d
  4016c4:	004012a5 	.word	0x004012a5
  4016c8:	e000ed04 	.word	0xe000ed04
  4016cc:	00400fb9 	.word	0x00400fb9
  4016d0:	00402361 	.word	0x00402361
  4016d4:	00401355 	.word	0x00401355
  4016d8:	00401fd5 	.word	0x00401fd5
  4016dc:	00401e6d 	.word	0x00401e6d
  4016e0:	00402429 	.word	0x00402429
  4016e4:	0040225d 	.word	0x0040225d
  4016e8:	004023f9 	.word	0x004023f9

004016ec <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4016ec:	2800      	cmp	r0, #0
  4016ee:	d036      	beq.n	40175e <xQueueGenericSendFromISR+0x72>
{
  4016f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4016f4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4016f6:	2900      	cmp	r1, #0
  4016f8:	d03c      	beq.n	401774 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4016fa:	2b02      	cmp	r3, #2
  4016fc:	d048      	beq.n	401790 <xQueueGenericSendFromISR+0xa4>
  4016fe:	461e      	mov	r6, r3
  401700:	4615      	mov	r5, r2
  401702:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401704:	4b35      	ldr	r3, [pc, #212]	; (4017dc <xQueueGenericSendFromISR+0xf0>)
  401706:	4798      	blx	r3
	__asm volatile
  401708:	f3ef 8711 	mrs	r7, BASEPRI
  40170c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401710:	b672      	cpsid	i
  401712:	f383 8811 	msr	BASEPRI, r3
  401716:	f3bf 8f6f 	isb	sy
  40171a:	f3bf 8f4f 	dsb	sy
  40171e:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  401720:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401722:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401724:	429a      	cmp	r2, r3
  401726:	d301      	bcc.n	40172c <xQueueGenericSendFromISR+0x40>
  401728:	2e02      	cmp	r6, #2
  40172a:	d14f      	bne.n	4017cc <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  40172c:	4632      	mov	r2, r6
  40172e:	4641      	mov	r1, r8
  401730:	4620      	mov	r0, r4
  401732:	4b2b      	ldr	r3, [pc, #172]	; (4017e0 <xQueueGenericSendFromISR+0xf4>)
  401734:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  401736:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401738:	f1b3 3fff 	cmp.w	r3, #4294967295
  40173c:	d141      	bne.n	4017c2 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  40173e:	6d63      	ldr	r3, [r4, #84]	; 0x54
  401740:	2b00      	cmp	r3, #0
  401742:	d033      	beq.n	4017ac <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  401744:	4631      	mov	r1, r6
  401746:	4620      	mov	r0, r4
  401748:	4b26      	ldr	r3, [pc, #152]	; (4017e4 <xQueueGenericSendFromISR+0xf8>)
  40174a:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  40174c:	2d00      	cmp	r5, #0
  40174e:	d03f      	beq.n	4017d0 <xQueueGenericSendFromISR+0xe4>
  401750:	2801      	cmp	r0, #1
  401752:	d13d      	bne.n	4017d0 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  401754:	6028      	str	r0, [r5, #0]
	__asm volatile
  401756:	f387 8811 	msr	BASEPRI, r7
}
  40175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  40175e:	f04f 0380 	mov.w	r3, #128	; 0x80
  401762:	b672      	cpsid	i
  401764:	f383 8811 	msr	BASEPRI, r3
  401768:	f3bf 8f6f 	isb	sy
  40176c:	f3bf 8f4f 	dsb	sy
  401770:	b662      	cpsie	i
  401772:	e7fe      	b.n	401772 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401774:	6c00      	ldr	r0, [r0, #64]	; 0x40
  401776:	2800      	cmp	r0, #0
  401778:	d0bf      	beq.n	4016fa <xQueueGenericSendFromISR+0xe>
  40177a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40177e:	b672      	cpsid	i
  401780:	f383 8811 	msr	BASEPRI, r3
  401784:	f3bf 8f6f 	isb	sy
  401788:	f3bf 8f4f 	dsb	sy
  40178c:	b662      	cpsie	i
  40178e:	e7fe      	b.n	40178e <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  401790:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  401792:	2801      	cmp	r0, #1
  401794:	d0b3      	beq.n	4016fe <xQueueGenericSendFromISR+0x12>
  401796:	f04f 0380 	mov.w	r3, #128	; 0x80
  40179a:	b672      	cpsid	i
  40179c:	f383 8811 	msr	BASEPRI, r3
  4017a0:	f3bf 8f6f 	isb	sy
  4017a4:	f3bf 8f4f 	dsb	sy
  4017a8:	b662      	cpsie	i
  4017aa:	e7fe      	b.n	4017aa <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4017ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4017ae:	b18b      	cbz	r3, 4017d4 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  4017b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4017b4:	4b0c      	ldr	r3, [pc, #48]	; (4017e8 <xQueueGenericSendFromISR+0xfc>)
  4017b6:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  4017b8:	b175      	cbz	r5, 4017d8 <xQueueGenericSendFromISR+0xec>
  4017ba:	b168      	cbz	r0, 4017d8 <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4017bc:	2001      	movs	r0, #1
  4017be:	6028      	str	r0, [r5, #0]
  4017c0:	e7c9      	b.n	401756 <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  4017c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4017c4:	3301      	adds	r3, #1
  4017c6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4017c8:	2001      	movs	r0, #1
  4017ca:	e7c4      	b.n	401756 <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4017cc:	2000      	movs	r0, #0
  4017ce:	e7c2      	b.n	401756 <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4017d0:	2001      	movs	r0, #1
  4017d2:	e7c0      	b.n	401756 <xQueueGenericSendFromISR+0x6a>
  4017d4:	2001      	movs	r0, #1
  4017d6:	e7be      	b.n	401756 <xQueueGenericSendFromISR+0x6a>
  4017d8:	2001      	movs	r0, #1
  4017da:	e7bc      	b.n	401756 <xQueueGenericSendFromISR+0x6a>
  4017dc:	00401165 	.word	0x00401165
  4017e0:	0040121d 	.word	0x0040121d
  4017e4:	004012a5 	.word	0x004012a5
  4017e8:	00402361 	.word	0x00402361

004017ec <xQueueGiveFromISR>:
	configASSERT( pxQueue );
  4017ec:	b170      	cbz	r0, 40180c <xQueueGiveFromISR+0x20>
{
  4017ee:	b570      	push	{r4, r5, r6, lr}
  4017f0:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
  4017f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
  4017f4:	b1ab      	cbz	r3, 401822 <xQueueGiveFromISR+0x36>
  4017f6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4017fa:	b672      	cpsid	i
  4017fc:	f383 8811 	msr	BASEPRI, r3
  401800:	f3bf 8f6f 	isb	sy
  401804:	f3bf 8f4f 	dsb	sy
  401808:	b662      	cpsie	i
  40180a:	e7fe      	b.n	40180a <xQueueGiveFromISR+0x1e>
  40180c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401810:	b672      	cpsid	i
  401812:	f383 8811 	msr	BASEPRI, r3
  401816:	f3bf 8f6f 	isb	sy
  40181a:	f3bf 8f4f 	dsb	sy
  40181e:	b662      	cpsie	i
  401820:	e7fe      	b.n	401820 <xQueueGiveFromISR+0x34>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401822:	6803      	ldr	r3, [r0, #0]
  401824:	b333      	cbz	r3, 401874 <xQueueGiveFromISR+0x88>
  401826:	460d      	mov	r5, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  401828:	4b25      	ldr	r3, [pc, #148]	; (4018c0 <xQueueGiveFromISR+0xd4>)
  40182a:	4798      	blx	r3
	__asm volatile
  40182c:	f3ef 8611 	mrs	r6, BASEPRI
  401830:	f04f 0380 	mov.w	r3, #128	; 0x80
  401834:	b672      	cpsid	i
  401836:	f383 8811 	msr	BASEPRI, r3
  40183a:	f3bf 8f6f 	isb	sy
  40183e:	f3bf 8f4f 	dsb	sy
  401842:	b662      	cpsie	i
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
  401844:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  401846:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  401848:	429a      	cmp	r2, r3
  40184a:	d231      	bcs.n	4018b0 <xQueueGiveFromISR+0xc4>
			++( pxQueue->uxMessagesWaiting );
  40184c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40184e:	3301      	adds	r3, #1
  401850:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
  401852:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401854:	f1b3 3fff 	cmp.w	r3, #4294967295
  401858:	d125      	bne.n	4018a6 <xQueueGiveFromISR+0xba>
					if( pxQueue->pxQueueSetContainer != NULL )
  40185a:	6d63      	ldr	r3, [r4, #84]	; 0x54
  40185c:	b1c3      	cbz	r3, 401890 <xQueueGiveFromISR+0xa4>
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40185e:	2100      	movs	r1, #0
  401860:	4620      	mov	r0, r4
  401862:	4b18      	ldr	r3, [pc, #96]	; (4018c4 <xQueueGiveFromISR+0xd8>)
  401864:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  401866:	b32d      	cbz	r5, 4018b4 <xQueueGiveFromISR+0xc8>
  401868:	2801      	cmp	r0, #1
  40186a:	d123      	bne.n	4018b4 <xQueueGiveFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
  40186c:	6028      	str	r0, [r5, #0]
	__asm volatile
  40186e:	f386 8811 	msr	BASEPRI, r6
}
  401872:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
  401874:	6843      	ldr	r3, [r0, #4]
  401876:	2b00      	cmp	r3, #0
  401878:	d0d5      	beq.n	401826 <xQueueGiveFromISR+0x3a>
	__asm volatile
  40187a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40187e:	b672      	cpsid	i
  401880:	f383 8811 	msr	BASEPRI, r3
  401884:	f3bf 8f6f 	isb	sy
  401888:	f3bf 8f4f 	dsb	sy
  40188c:	b662      	cpsie	i
  40188e:	e7fe      	b.n	40188e <xQueueGiveFromISR+0xa2>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401890:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401892:	b18b      	cbz	r3, 4018b8 <xQueueGiveFromISR+0xcc>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401894:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401898:	4b0b      	ldr	r3, [pc, #44]	; (4018c8 <xQueueGiveFromISR+0xdc>)
  40189a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40189c:	b175      	cbz	r5, 4018bc <xQueueGiveFromISR+0xd0>
  40189e:	b168      	cbz	r0, 4018bc <xQueueGiveFromISR+0xd0>
									*pxHigherPriorityTaskWoken = pdTRUE;
  4018a0:	2001      	movs	r0, #1
  4018a2:	6028      	str	r0, [r5, #0]
  4018a4:	e7e3      	b.n	40186e <xQueueGiveFromISR+0x82>
				++( pxQueue->xTxLock );
  4018a6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4018a8:	3301      	adds	r3, #1
  4018aa:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  4018ac:	2001      	movs	r0, #1
  4018ae:	e7de      	b.n	40186e <xQueueGiveFromISR+0x82>
			xReturn = errQUEUE_FULL;
  4018b0:	2000      	movs	r0, #0
  4018b2:	e7dc      	b.n	40186e <xQueueGiveFromISR+0x82>
			xReturn = pdPASS;
  4018b4:	2001      	movs	r0, #1
  4018b6:	e7da      	b.n	40186e <xQueueGiveFromISR+0x82>
  4018b8:	2001      	movs	r0, #1
  4018ba:	e7d8      	b.n	40186e <xQueueGiveFromISR+0x82>
  4018bc:	2001      	movs	r0, #1
  4018be:	e7d6      	b.n	40186e <xQueueGiveFromISR+0x82>
  4018c0:	00401165 	.word	0x00401165
  4018c4:	004012a5 	.word	0x004012a5
  4018c8:	00402361 	.word	0x00402361

004018cc <xQueueGenericReceive>:
{
  4018cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4018d0:	b084      	sub	sp, #16
  4018d2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4018d4:	b198      	cbz	r0, 4018fe <xQueueGenericReceive+0x32>
  4018d6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4018d8:	b1e1      	cbz	r1, 401914 <xQueueGenericReceive+0x48>
  4018da:	4698      	mov	r8, r3
  4018dc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4018de:	4b61      	ldr	r3, [pc, #388]	; (401a64 <xQueueGenericReceive+0x198>)
  4018e0:	4798      	blx	r3
  4018e2:	bb28      	cbnz	r0, 401930 <xQueueGenericReceive+0x64>
  4018e4:	9b01      	ldr	r3, [sp, #4]
  4018e6:	b353      	cbz	r3, 40193e <xQueueGenericReceive+0x72>
  4018e8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4018ec:	b672      	cpsid	i
  4018ee:	f383 8811 	msr	BASEPRI, r3
  4018f2:	f3bf 8f6f 	isb	sy
  4018f6:	f3bf 8f4f 	dsb	sy
  4018fa:	b662      	cpsie	i
  4018fc:	e7fe      	b.n	4018fc <xQueueGenericReceive+0x30>
  4018fe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401902:	b672      	cpsid	i
  401904:	f383 8811 	msr	BASEPRI, r3
  401908:	f3bf 8f6f 	isb	sy
  40190c:	f3bf 8f4f 	dsb	sy
  401910:	b662      	cpsie	i
  401912:	e7fe      	b.n	401912 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  401914:	6c02      	ldr	r2, [r0, #64]	; 0x40
  401916:	2a00      	cmp	r2, #0
  401918:	d0df      	beq.n	4018da <xQueueGenericReceive+0xe>
  40191a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40191e:	b672      	cpsid	i
  401920:	f383 8811 	msr	BASEPRI, r3
  401924:	f3bf 8f6f 	isb	sy
  401928:	f3bf 8f4f 	dsb	sy
  40192c:	b662      	cpsie	i
  40192e:	e7fe      	b.n	40192e <xQueueGenericReceive+0x62>
  401930:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  401932:	4d4d      	ldr	r5, [pc, #308]	; (401a68 <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  401934:	f8df a160 	ldr.w	sl, [pc, #352]	; 401a98 <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  401938:	f8df 913c 	ldr.w	r9, [pc, #316]	; 401a78 <xQueueGenericReceive+0x1ac>
  40193c:	e04b      	b.n	4019d6 <xQueueGenericReceive+0x10a>
  40193e:	2600      	movs	r6, #0
  401940:	e7f7      	b.n	401932 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  401942:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  401944:	4639      	mov	r1, r7
  401946:	4620      	mov	r0, r4
  401948:	4b48      	ldr	r3, [pc, #288]	; (401a6c <xQueueGenericReceive+0x1a0>)
  40194a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  40194c:	f1b8 0f00 	cmp.w	r8, #0
  401950:	d11d      	bne.n	40198e <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  401952:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401954:	3b01      	subs	r3, #1
  401956:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401958:	6823      	ldr	r3, [r4, #0]
  40195a:	b913      	cbnz	r3, 401962 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  40195c:	4b44      	ldr	r3, [pc, #272]	; (401a70 <xQueueGenericReceive+0x1a4>)
  40195e:	4798      	blx	r3
  401960:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  401962:	6923      	ldr	r3, [r4, #16]
  401964:	b16b      	cbz	r3, 401982 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  401966:	f104 0010 	add.w	r0, r4, #16
  40196a:	4b42      	ldr	r3, [pc, #264]	; (401a74 <xQueueGenericReceive+0x1a8>)
  40196c:	4798      	blx	r3
  40196e:	2801      	cmp	r0, #1
  401970:	d107      	bne.n	401982 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  401972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401976:	4b40      	ldr	r3, [pc, #256]	; (401a78 <xQueueGenericReceive+0x1ac>)
  401978:	601a      	str	r2, [r3, #0]
  40197a:	f3bf 8f4f 	dsb	sy
  40197e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  401982:	4b3e      	ldr	r3, [pc, #248]	; (401a7c <xQueueGenericReceive+0x1b0>)
  401984:	4798      	blx	r3
				return pdPASS;
  401986:	2001      	movs	r0, #1
}
  401988:	b004      	add	sp, #16
  40198a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  40198e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  401990:	6a63      	ldr	r3, [r4, #36]	; 0x24
  401992:	2b00      	cmp	r3, #0
  401994:	d0f5      	beq.n	401982 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  401996:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40199a:	4b36      	ldr	r3, [pc, #216]	; (401a74 <xQueueGenericReceive+0x1a8>)
  40199c:	4798      	blx	r3
  40199e:	2800      	cmp	r0, #0
  4019a0:	d0ef      	beq.n	401982 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  4019a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4019a6:	4b34      	ldr	r3, [pc, #208]	; (401a78 <xQueueGenericReceive+0x1ac>)
  4019a8:	601a      	str	r2, [r3, #0]
  4019aa:	f3bf 8f4f 	dsb	sy
  4019ae:	f3bf 8f6f 	isb	sy
  4019b2:	e7e6      	b.n	401982 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4019b4:	4b31      	ldr	r3, [pc, #196]	; (401a7c <xQueueGenericReceive+0x1b0>)
  4019b6:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4019b8:	2000      	movs	r0, #0
  4019ba:	e7e5      	b.n	401988 <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4019bc:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4019be:	6860      	ldr	r0, [r4, #4]
  4019c0:	4b2f      	ldr	r3, [pc, #188]	; (401a80 <xQueueGenericReceive+0x1b4>)
  4019c2:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4019c4:	4b2d      	ldr	r3, [pc, #180]	; (401a7c <xQueueGenericReceive+0x1b0>)
  4019c6:	4798      	blx	r3
  4019c8:	e030      	b.n	401a2c <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4019ca:	4620      	mov	r0, r4
  4019cc:	4b2d      	ldr	r3, [pc, #180]	; (401a84 <xQueueGenericReceive+0x1b8>)
  4019ce:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4019d0:	4b2d      	ldr	r3, [pc, #180]	; (401a88 <xQueueGenericReceive+0x1bc>)
  4019d2:	4798      	blx	r3
  4019d4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4019d6:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4019d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4019da:	2b00      	cmp	r3, #0
  4019dc:	d1b1      	bne.n	401942 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4019de:	9b01      	ldr	r3, [sp, #4]
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	d0e7      	beq.n	4019b4 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4019e4:	b90e      	cbnz	r6, 4019ea <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4019e6:	a802      	add	r0, sp, #8
  4019e8:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4019ea:	4b24      	ldr	r3, [pc, #144]	; (401a7c <xQueueGenericReceive+0x1b0>)
  4019ec:	4798      	blx	r3
		vTaskSuspendAll();
  4019ee:	4b27      	ldr	r3, [pc, #156]	; (401a8c <xQueueGenericReceive+0x1c0>)
  4019f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4019f2:	47a8      	blx	r5
  4019f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4019f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4019fa:	d101      	bne.n	401a00 <xQueueGenericReceive+0x134>
  4019fc:	2300      	movs	r3, #0
  4019fe:	6463      	str	r3, [r4, #68]	; 0x44
  401a00:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401a02:	f1b3 3fff 	cmp.w	r3, #4294967295
  401a06:	d101      	bne.n	401a0c <xQueueGenericReceive+0x140>
  401a08:	2300      	movs	r3, #0
  401a0a:	64a3      	str	r3, [r4, #72]	; 0x48
  401a0c:	4b1b      	ldr	r3, [pc, #108]	; (401a7c <xQueueGenericReceive+0x1b0>)
  401a0e:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  401a10:	a901      	add	r1, sp, #4
  401a12:	a802      	add	r0, sp, #8
  401a14:	4b1e      	ldr	r3, [pc, #120]	; (401a90 <xQueueGenericReceive+0x1c4>)
  401a16:	4798      	blx	r3
  401a18:	b9e8      	cbnz	r0, 401a56 <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  401a1a:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  401a1c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  401a1e:	4b17      	ldr	r3, [pc, #92]	; (401a7c <xQueueGenericReceive+0x1b0>)
  401a20:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  401a22:	2e00      	cmp	r6, #0
  401a24:	d1d1      	bne.n	4019ca <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  401a26:	6823      	ldr	r3, [r4, #0]
  401a28:	2b00      	cmp	r3, #0
  401a2a:	d0c7      	beq.n	4019bc <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  401a2c:	9901      	ldr	r1, [sp, #4]
  401a2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401a32:	4b18      	ldr	r3, [pc, #96]	; (401a94 <xQueueGenericReceive+0x1c8>)
  401a34:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  401a36:	4620      	mov	r0, r4
  401a38:	4b12      	ldr	r3, [pc, #72]	; (401a84 <xQueueGenericReceive+0x1b8>)
  401a3a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  401a3c:	4b12      	ldr	r3, [pc, #72]	; (401a88 <xQueueGenericReceive+0x1bc>)
  401a3e:	4798      	blx	r3
  401a40:	2800      	cmp	r0, #0
  401a42:	d1c7      	bne.n	4019d4 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  401a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  401a48:	f8c9 3000 	str.w	r3, [r9]
  401a4c:	f3bf 8f4f 	dsb	sy
  401a50:	f3bf 8f6f 	isb	sy
  401a54:	e7be      	b.n	4019d4 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  401a56:	4620      	mov	r0, r4
  401a58:	4b0a      	ldr	r3, [pc, #40]	; (401a84 <xQueueGenericReceive+0x1b8>)
  401a5a:	4798      	blx	r3
			( void ) xTaskResumeAll();
  401a5c:	4b0a      	ldr	r3, [pc, #40]	; (401a88 <xQueueGenericReceive+0x1bc>)
  401a5e:	4798      	blx	r3
			return errQUEUE_EMPTY;
  401a60:	2000      	movs	r0, #0
  401a62:	e791      	b.n	401988 <xQueueGenericReceive+0xbc>
  401a64:	004024c9 	.word	0x004024c9
  401a68:	00400f6d 	.word	0x00400f6d
  401a6c:	0040132d 	.word	0x0040132d
  401a70:	00402649 	.word	0x00402649
  401a74:	00402361 	.word	0x00402361
  401a78:	e000ed04 	.word	0xe000ed04
  401a7c:	00400fb9 	.word	0x00400fb9
  401a80:	004024e9 	.word	0x004024e9
  401a84:	00401355 	.word	0x00401355
  401a88:	00401fd5 	.word	0x00401fd5
  401a8c:	00401e6d 	.word	0x00401e6d
  401a90:	00402429 	.word	0x00402429
  401a94:	0040225d 	.word	0x0040225d
  401a98:	004023f9 	.word	0x004023f9

00401a9c <vQueueAddToRegistry>:
	{
  401a9c:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  401a9e:	4b0b      	ldr	r3, [pc, #44]	; (401acc <vQueueAddToRegistry+0x30>)
  401aa0:	681b      	ldr	r3, [r3, #0]
  401aa2:	b153      	cbz	r3, 401aba <vQueueAddToRegistry+0x1e>
  401aa4:	2301      	movs	r3, #1
  401aa6:	4c09      	ldr	r4, [pc, #36]	; (401acc <vQueueAddToRegistry+0x30>)
  401aa8:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  401aac:	b132      	cbz	r2, 401abc <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401aae:	3301      	adds	r3, #1
  401ab0:	2b08      	cmp	r3, #8
  401ab2:	d1f9      	bne.n	401aa8 <vQueueAddToRegistry+0xc>
	}
  401ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
  401ab8:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  401aba:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  401abc:	4a03      	ldr	r2, [pc, #12]	; (401acc <vQueueAddToRegistry+0x30>)
  401abe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  401ac2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  401ac6:	6058      	str	r0, [r3, #4]
				break;
  401ac8:	e7f4      	b.n	401ab4 <vQueueAddToRegistry+0x18>
  401aca:	bf00      	nop
  401acc:	20400bd4 	.word	0x20400bd4

00401ad0 <vQueueWaitForMessageRestricted>:
	{
  401ad0:	b570      	push	{r4, r5, r6, lr}
  401ad2:	4604      	mov	r4, r0
  401ad4:	460d      	mov	r5, r1
  401ad6:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  401ad8:	4b0f      	ldr	r3, [pc, #60]	; (401b18 <vQueueWaitForMessageRestricted+0x48>)
  401ada:	4798      	blx	r3
  401adc:	6c63      	ldr	r3, [r4, #68]	; 0x44
  401ade:	f1b3 3fff 	cmp.w	r3, #4294967295
  401ae2:	d00b      	beq.n	401afc <vQueueWaitForMessageRestricted+0x2c>
  401ae4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  401ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
  401aea:	d00a      	beq.n	401b02 <vQueueWaitForMessageRestricted+0x32>
  401aec:	4b0b      	ldr	r3, [pc, #44]	; (401b1c <vQueueWaitForMessageRestricted+0x4c>)
  401aee:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  401af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  401af2:	b14b      	cbz	r3, 401b08 <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  401af4:	4620      	mov	r0, r4
  401af6:	4b0a      	ldr	r3, [pc, #40]	; (401b20 <vQueueWaitForMessageRestricted+0x50>)
  401af8:	4798      	blx	r3
  401afa:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  401afc:	2300      	movs	r3, #0
  401afe:	6463      	str	r3, [r4, #68]	; 0x44
  401b00:	e7f0      	b.n	401ae4 <vQueueWaitForMessageRestricted+0x14>
  401b02:	2300      	movs	r3, #0
  401b04:	64a3      	str	r3, [r4, #72]	; 0x48
  401b06:	e7f1      	b.n	401aec <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  401b08:	4632      	mov	r2, r6
  401b0a:	4629      	mov	r1, r5
  401b0c:	f104 0024 	add.w	r0, r4, #36	; 0x24
  401b10:	4b04      	ldr	r3, [pc, #16]	; (401b24 <vQueueWaitForMessageRestricted+0x54>)
  401b12:	4798      	blx	r3
  401b14:	e7ee      	b.n	401af4 <vQueueWaitForMessageRestricted+0x24>
  401b16:	bf00      	nop
  401b18:	00400f6d 	.word	0x00400f6d
  401b1c:	00400fb9 	.word	0x00400fb9
  401b20:	00401355 	.word	0x00401355
  401b24:	004022e1 	.word	0x004022e1

00401b28 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401b28:	4b08      	ldr	r3, [pc, #32]	; (401b4c <prvResetNextTaskUnblockTime+0x24>)
  401b2a:	681b      	ldr	r3, [r3, #0]
  401b2c:	681b      	ldr	r3, [r3, #0]
  401b2e:	b13b      	cbz	r3, 401b40 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401b30:	4b06      	ldr	r3, [pc, #24]	; (401b4c <prvResetNextTaskUnblockTime+0x24>)
  401b32:	681b      	ldr	r3, [r3, #0]
  401b34:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  401b36:	68db      	ldr	r3, [r3, #12]
  401b38:	685a      	ldr	r2, [r3, #4]
  401b3a:	4b05      	ldr	r3, [pc, #20]	; (401b50 <prvResetNextTaskUnblockTime+0x28>)
  401b3c:	601a      	str	r2, [r3, #0]
  401b3e:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  401b40:	f04f 32ff 	mov.w	r2, #4294967295
  401b44:	4b02      	ldr	r3, [pc, #8]	; (401b50 <prvResetNextTaskUnblockTime+0x28>)
  401b46:	601a      	str	r2, [r3, #0]
  401b48:	4770      	bx	lr
  401b4a:	bf00      	nop
  401b4c:	20400a60 	.word	0x20400a60
  401b50:	20400b0c 	.word	0x20400b0c

00401b54 <prvAddCurrentTaskToDelayedList>:
{
  401b54:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  401b56:	4b0f      	ldr	r3, [pc, #60]	; (401b94 <prvAddCurrentTaskToDelayedList+0x40>)
  401b58:	681b      	ldr	r3, [r3, #0]
  401b5a:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  401b5c:	4b0e      	ldr	r3, [pc, #56]	; (401b98 <prvAddCurrentTaskToDelayedList+0x44>)
  401b5e:	681b      	ldr	r3, [r3, #0]
  401b60:	4298      	cmp	r0, r3
  401b62:	d30e      	bcc.n	401b82 <prvAddCurrentTaskToDelayedList+0x2e>
  401b64:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401b66:	4b0d      	ldr	r3, [pc, #52]	; (401b9c <prvAddCurrentTaskToDelayedList+0x48>)
  401b68:	6818      	ldr	r0, [r3, #0]
  401b6a:	4b0a      	ldr	r3, [pc, #40]	; (401b94 <prvAddCurrentTaskToDelayedList+0x40>)
  401b6c:	6819      	ldr	r1, [r3, #0]
  401b6e:	3104      	adds	r1, #4
  401b70:	4b0b      	ldr	r3, [pc, #44]	; (401ba0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401b72:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  401b74:	4b0b      	ldr	r3, [pc, #44]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x50>)
  401b76:	681b      	ldr	r3, [r3, #0]
  401b78:	429c      	cmp	r4, r3
  401b7a:	d201      	bcs.n	401b80 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  401b7c:	4b09      	ldr	r3, [pc, #36]	; (401ba4 <prvAddCurrentTaskToDelayedList+0x50>)
  401b7e:	601c      	str	r4, [r3, #0]
  401b80:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  401b82:	4b09      	ldr	r3, [pc, #36]	; (401ba8 <prvAddCurrentTaskToDelayedList+0x54>)
  401b84:	6818      	ldr	r0, [r3, #0]
  401b86:	4b03      	ldr	r3, [pc, #12]	; (401b94 <prvAddCurrentTaskToDelayedList+0x40>)
  401b88:	6819      	ldr	r1, [r3, #0]
  401b8a:	3104      	adds	r1, #4
  401b8c:	4b04      	ldr	r3, [pc, #16]	; (401ba0 <prvAddCurrentTaskToDelayedList+0x4c>)
  401b8e:	4798      	blx	r3
  401b90:	bd10      	pop	{r4, pc}
  401b92:	bf00      	nop
  401b94:	20400a5c 	.word	0x20400a5c
  401b98:	20400b54 	.word	0x20400b54
  401b9c:	20400a60 	.word	0x20400a60
  401ba0:	00400e55 	.word	0x00400e55
  401ba4:	20400b0c 	.word	0x20400b0c
  401ba8:	20400a64 	.word	0x20400a64

00401bac <xTaskGenericCreate>:
{
  401bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401bb0:	b083      	sub	sp, #12
  401bb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  401bb4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  401bb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  401bba:	b160      	cbz	r0, 401bd6 <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  401bbc:	2d04      	cmp	r5, #4
  401bbe:	d915      	bls.n	401bec <xTaskGenericCreate+0x40>
  401bc0:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bc4:	b672      	cpsid	i
  401bc6:	f383 8811 	msr	BASEPRI, r3
  401bca:	f3bf 8f6f 	isb	sy
  401bce:	f3bf 8f4f 	dsb	sy
  401bd2:	b662      	cpsie	i
  401bd4:	e7fe      	b.n	401bd4 <xTaskGenericCreate+0x28>
  401bd6:	f04f 0380 	mov.w	r3, #128	; 0x80
  401bda:	b672      	cpsid	i
  401bdc:	f383 8811 	msr	BASEPRI, r3
  401be0:	f3bf 8f6f 	isb	sy
  401be4:	f3bf 8f4f 	dsb	sy
  401be8:	b662      	cpsie	i
  401bea:	e7fe      	b.n	401bea <xTaskGenericCreate+0x3e>
  401bec:	9001      	str	r0, [sp, #4]
  401bee:	4698      	mov	r8, r3
  401bf0:	4691      	mov	r9, r2
  401bf2:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401bf4:	b936      	cbnz	r6, 401c04 <xTaskGenericCreate+0x58>
  401bf6:	0090      	lsls	r0, r2, #2
  401bf8:	4b62      	ldr	r3, [pc, #392]	; (401d84 <xTaskGenericCreate+0x1d8>)
  401bfa:	4798      	blx	r3
		if( pxStack != NULL )
  401bfc:	4606      	mov	r6, r0
  401bfe:	2800      	cmp	r0, #0
  401c00:	f000 809e 	beq.w	401d40 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  401c04:	2058      	movs	r0, #88	; 0x58
  401c06:	4b5f      	ldr	r3, [pc, #380]	; (401d84 <xTaskGenericCreate+0x1d8>)
  401c08:	4798      	blx	r3
			if( pxNewTCB != NULL )
  401c0a:	4604      	mov	r4, r0
  401c0c:	2800      	cmp	r0, #0
  401c0e:	f000 8094 	beq.w	401d3a <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  401c12:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  401c14:	ea4f 0289 	mov.w	r2, r9, lsl #2
  401c18:	21a5      	movs	r1, #165	; 0xa5
  401c1a:	4630      	mov	r0, r6
  401c1c:	4b5a      	ldr	r3, [pc, #360]	; (401d88 <xTaskGenericCreate+0x1dc>)
  401c1e:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  401c20:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  401c24:	444e      	add	r6, r9
  401c26:	6b23      	ldr	r3, [r4, #48]	; 0x30
  401c28:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  401c2c:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401c30:	783b      	ldrb	r3, [r7, #0]
  401c32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  401c36:	783b      	ldrb	r3, [r7, #0]
  401c38:	2b00      	cmp	r3, #0
  401c3a:	f040 8084 	bne.w	401d46 <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  401c3e:	2700      	movs	r7, #0
  401c40:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  401c44:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  401c46:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  401c48:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  401c4a:	f104 0904 	add.w	r9, r4, #4
  401c4e:	4648      	mov	r0, r9
  401c50:	f8df b184 	ldr.w	fp, [pc, #388]	; 401dd8 <xTaskGenericCreate+0x22c>
  401c54:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  401c56:	f104 0018 	add.w	r0, r4, #24
  401c5a:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  401c5c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  401c5e:	f1c5 0305 	rsb	r3, r5, #5
  401c62:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  401c64:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  401c66:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  401c68:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  401c6c:	4642      	mov	r2, r8
  401c6e:	9901      	ldr	r1, [sp, #4]
  401c70:	4630      	mov	r0, r6
  401c72:	4b46      	ldr	r3, [pc, #280]	; (401d8c <xTaskGenericCreate+0x1e0>)
  401c74:	4798      	blx	r3
  401c76:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  401c78:	f1ba 0f00 	cmp.w	sl, #0
  401c7c:	d001      	beq.n	401c82 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  401c7e:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  401c82:	4b43      	ldr	r3, [pc, #268]	; (401d90 <xTaskGenericCreate+0x1e4>)
  401c84:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  401c86:	4a43      	ldr	r2, [pc, #268]	; (401d94 <xTaskGenericCreate+0x1e8>)
  401c88:	6813      	ldr	r3, [r2, #0]
  401c8a:	3301      	adds	r3, #1
  401c8c:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  401c8e:	4b42      	ldr	r3, [pc, #264]	; (401d98 <xTaskGenericCreate+0x1ec>)
  401c90:	681b      	ldr	r3, [r3, #0]
  401c92:	2b00      	cmp	r3, #0
  401c94:	d166      	bne.n	401d64 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  401c96:	4b40      	ldr	r3, [pc, #256]	; (401d98 <xTaskGenericCreate+0x1ec>)
  401c98:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  401c9a:	6813      	ldr	r3, [r2, #0]
  401c9c:	2b01      	cmp	r3, #1
  401c9e:	d121      	bne.n	401ce4 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  401ca0:	4f3e      	ldr	r7, [pc, #248]	; (401d9c <xTaskGenericCreate+0x1f0>)
  401ca2:	4638      	mov	r0, r7
  401ca4:	4e3e      	ldr	r6, [pc, #248]	; (401da0 <xTaskGenericCreate+0x1f4>)
  401ca6:	47b0      	blx	r6
  401ca8:	f107 0014 	add.w	r0, r7, #20
  401cac:	47b0      	blx	r6
  401cae:	f107 0028 	add.w	r0, r7, #40	; 0x28
  401cb2:	47b0      	blx	r6
  401cb4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  401cb8:	47b0      	blx	r6
  401cba:	f107 0050 	add.w	r0, r7, #80	; 0x50
  401cbe:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  401cc0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 401ddc <xTaskGenericCreate+0x230>
  401cc4:	4640      	mov	r0, r8
  401cc6:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  401cc8:	4f36      	ldr	r7, [pc, #216]	; (401da4 <xTaskGenericCreate+0x1f8>)
  401cca:	4638      	mov	r0, r7
  401ccc:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  401cce:	4836      	ldr	r0, [pc, #216]	; (401da8 <xTaskGenericCreate+0x1fc>)
  401cd0:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  401cd2:	4836      	ldr	r0, [pc, #216]	; (401dac <xTaskGenericCreate+0x200>)
  401cd4:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  401cd6:	4836      	ldr	r0, [pc, #216]	; (401db0 <xTaskGenericCreate+0x204>)
  401cd8:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  401cda:	4b36      	ldr	r3, [pc, #216]	; (401db4 <xTaskGenericCreate+0x208>)
  401cdc:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  401ce0:	4b35      	ldr	r3, [pc, #212]	; (401db8 <xTaskGenericCreate+0x20c>)
  401ce2:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  401ce4:	4a35      	ldr	r2, [pc, #212]	; (401dbc <xTaskGenericCreate+0x210>)
  401ce6:	6813      	ldr	r3, [r2, #0]
  401ce8:	3301      	adds	r3, #1
  401cea:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  401cec:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  401cee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  401cf0:	4a33      	ldr	r2, [pc, #204]	; (401dc0 <xTaskGenericCreate+0x214>)
  401cf2:	6811      	ldr	r1, [r2, #0]
  401cf4:	2301      	movs	r3, #1
  401cf6:	4083      	lsls	r3, r0
  401cf8:	430b      	orrs	r3, r1
  401cfa:	6013      	str	r3, [r2, #0]
  401cfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401d00:	4649      	mov	r1, r9
  401d02:	4b26      	ldr	r3, [pc, #152]	; (401d9c <xTaskGenericCreate+0x1f0>)
  401d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401d08:	4b2e      	ldr	r3, [pc, #184]	; (401dc4 <xTaskGenericCreate+0x218>)
  401d0a:	4798      	blx	r3
		taskEXIT_CRITICAL();
  401d0c:	4b2e      	ldr	r3, [pc, #184]	; (401dc8 <xTaskGenericCreate+0x21c>)
  401d0e:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  401d10:	4b2e      	ldr	r3, [pc, #184]	; (401dcc <xTaskGenericCreate+0x220>)
  401d12:	681b      	ldr	r3, [r3, #0]
  401d14:	2b00      	cmp	r3, #0
  401d16:	d031      	beq.n	401d7c <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  401d18:	4b1f      	ldr	r3, [pc, #124]	; (401d98 <xTaskGenericCreate+0x1ec>)
  401d1a:	681b      	ldr	r3, [r3, #0]
  401d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d1e:	429d      	cmp	r5, r3
  401d20:	d92e      	bls.n	401d80 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  401d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  401d26:	4b2a      	ldr	r3, [pc, #168]	; (401dd0 <xTaskGenericCreate+0x224>)
  401d28:	601a      	str	r2, [r3, #0]
  401d2a:	f3bf 8f4f 	dsb	sy
  401d2e:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  401d32:	2001      	movs	r0, #1
}
  401d34:	b003      	add	sp, #12
  401d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  401d3a:	4630      	mov	r0, r6
  401d3c:	4b25      	ldr	r3, [pc, #148]	; (401dd4 <xTaskGenericCreate+0x228>)
  401d3e:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  401d40:	f04f 30ff 	mov.w	r0, #4294967295
  401d44:	e7f6      	b.n	401d34 <xTaskGenericCreate+0x188>
  401d46:	463b      	mov	r3, r7
  401d48:	f104 0234 	add.w	r2, r4, #52	; 0x34
  401d4c:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  401d4e:	7859      	ldrb	r1, [r3, #1]
  401d50:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  401d54:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  401d58:	2900      	cmp	r1, #0
  401d5a:	f43f af70 	beq.w	401c3e <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  401d5e:	42bb      	cmp	r3, r7
  401d60:	d1f5      	bne.n	401d4e <xTaskGenericCreate+0x1a2>
  401d62:	e76c      	b.n	401c3e <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  401d64:	4b19      	ldr	r3, [pc, #100]	; (401dcc <xTaskGenericCreate+0x220>)
  401d66:	681b      	ldr	r3, [r3, #0]
  401d68:	2b00      	cmp	r3, #0
  401d6a:	d1bb      	bne.n	401ce4 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  401d6c:	4b0a      	ldr	r3, [pc, #40]	; (401d98 <xTaskGenericCreate+0x1ec>)
  401d6e:	681b      	ldr	r3, [r3, #0]
  401d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401d72:	429d      	cmp	r5, r3
  401d74:	d3b6      	bcc.n	401ce4 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  401d76:	4b08      	ldr	r3, [pc, #32]	; (401d98 <xTaskGenericCreate+0x1ec>)
  401d78:	601c      	str	r4, [r3, #0]
  401d7a:	e7b3      	b.n	401ce4 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  401d7c:	2001      	movs	r0, #1
  401d7e:	e7d9      	b.n	401d34 <xTaskGenericCreate+0x188>
  401d80:	2001      	movs	r0, #1
	return xReturn;
  401d82:	e7d7      	b.n	401d34 <xTaskGenericCreate+0x188>
  401d84:	004011c9 	.word	0x004011c9
  401d88:	004040b9 	.word	0x004040b9
  401d8c:	00400f21 	.word	0x00400f21
  401d90:	00400f6d 	.word	0x00400f6d
  401d94:	20400acc 	.word	0x20400acc
  401d98:	20400a5c 	.word	0x20400a5c
  401d9c:	20400a68 	.word	0x20400a68
  401da0:	00400e21 	.word	0x00400e21
  401da4:	20400af8 	.word	0x20400af8
  401da8:	20400b14 	.word	0x20400b14
  401dac:	20400b40 	.word	0x20400b40
  401db0:	20400b2c 	.word	0x20400b2c
  401db4:	20400a60 	.word	0x20400a60
  401db8:	20400a64 	.word	0x20400a64
  401dbc:	20400ad8 	.word	0x20400ad8
  401dc0:	20400ae0 	.word	0x20400ae0
  401dc4:	00400e3d 	.word	0x00400e3d
  401dc8:	00400fb9 	.word	0x00400fb9
  401dcc:	20400b28 	.word	0x20400b28
  401dd0:	e000ed04 	.word	0xe000ed04
  401dd4:	004011f9 	.word	0x004011f9
  401dd8:	00400e37 	.word	0x00400e37
  401ddc:	20400ae4 	.word	0x20400ae4

00401de0 <vTaskStartScheduler>:
{
  401de0:	b510      	push	{r4, lr}
  401de2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  401de4:	2300      	movs	r3, #0
  401de6:	9303      	str	r3, [sp, #12]
  401de8:	9302      	str	r3, [sp, #8]
  401dea:	9301      	str	r3, [sp, #4]
  401dec:	9300      	str	r3, [sp, #0]
  401dee:	2282      	movs	r2, #130	; 0x82
  401df0:	4916      	ldr	r1, [pc, #88]	; (401e4c <vTaskStartScheduler+0x6c>)
  401df2:	4817      	ldr	r0, [pc, #92]	; (401e50 <vTaskStartScheduler+0x70>)
  401df4:	4c17      	ldr	r4, [pc, #92]	; (401e54 <vTaskStartScheduler+0x74>)
  401df6:	47a0      	blx	r4
		if( xReturn == pdPASS )
  401df8:	2801      	cmp	r0, #1
  401dfa:	d00b      	beq.n	401e14 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  401dfc:	bb20      	cbnz	r0, 401e48 <vTaskStartScheduler+0x68>
  401dfe:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e02:	b672      	cpsid	i
  401e04:	f383 8811 	msr	BASEPRI, r3
  401e08:	f3bf 8f6f 	isb	sy
  401e0c:	f3bf 8f4f 	dsb	sy
  401e10:	b662      	cpsie	i
  401e12:	e7fe      	b.n	401e12 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  401e14:	4b10      	ldr	r3, [pc, #64]	; (401e58 <vTaskStartScheduler+0x78>)
  401e16:	4798      	blx	r3
	if( xReturn == pdPASS )
  401e18:	2801      	cmp	r0, #1
  401e1a:	d1ef      	bne.n	401dfc <vTaskStartScheduler+0x1c>
  401e1c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e20:	b672      	cpsid	i
  401e22:	f383 8811 	msr	BASEPRI, r3
  401e26:	f3bf 8f6f 	isb	sy
  401e2a:	f3bf 8f4f 	dsb	sy
  401e2e:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  401e30:	f04f 32ff 	mov.w	r2, #4294967295
  401e34:	4b09      	ldr	r3, [pc, #36]	; (401e5c <vTaskStartScheduler+0x7c>)
  401e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  401e38:	2201      	movs	r2, #1
  401e3a:	4b09      	ldr	r3, [pc, #36]	; (401e60 <vTaskStartScheduler+0x80>)
  401e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  401e3e:	2200      	movs	r2, #0
  401e40:	4b08      	ldr	r3, [pc, #32]	; (401e64 <vTaskStartScheduler+0x84>)
  401e42:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  401e44:	4b08      	ldr	r3, [pc, #32]	; (401e68 <vTaskStartScheduler+0x88>)
  401e46:	4798      	blx	r3
}
  401e48:	b004      	add	sp, #16
  401e4a:	bd10      	pop	{r4, pc}
  401e4c:	00406918 	.word	0x00406918
  401e50:	004020f5 	.word	0x004020f5
  401e54:	00401bad 	.word	0x00401bad
  401e58:	00402735 	.word	0x00402735
  401e5c:	20400b0c 	.word	0x20400b0c
  401e60:	20400b28 	.word	0x20400b28
  401e64:	20400b54 	.word	0x20400b54
  401e68:	004010a1 	.word	0x004010a1

00401e6c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  401e6c:	4a02      	ldr	r2, [pc, #8]	; (401e78 <vTaskSuspendAll+0xc>)
  401e6e:	6813      	ldr	r3, [r2, #0]
  401e70:	3301      	adds	r3, #1
  401e72:	6013      	str	r3, [r2, #0]
  401e74:	4770      	bx	lr
  401e76:	bf00      	nop
  401e78:	20400ad4 	.word	0x20400ad4

00401e7c <xTaskGetTickCount>:
		xTicks = xTickCount;
  401e7c:	4b01      	ldr	r3, [pc, #4]	; (401e84 <xTaskGetTickCount+0x8>)
  401e7e:	6818      	ldr	r0, [r3, #0]
}
  401e80:	4770      	bx	lr
  401e82:	bf00      	nop
  401e84:	20400b54 	.word	0x20400b54

00401e88 <xTaskIncrementTick>:
{
  401e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  401e8c:	4b42      	ldr	r3, [pc, #264]	; (401f98 <xTaskIncrementTick+0x110>)
  401e8e:	681b      	ldr	r3, [r3, #0]
  401e90:	2b00      	cmp	r3, #0
  401e92:	d178      	bne.n	401f86 <xTaskIncrementTick+0xfe>
		++xTickCount;
  401e94:	4b41      	ldr	r3, [pc, #260]	; (401f9c <xTaskIncrementTick+0x114>)
  401e96:	681a      	ldr	r2, [r3, #0]
  401e98:	3201      	adds	r2, #1
  401e9a:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  401e9c:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  401e9e:	b9d6      	cbnz	r6, 401ed6 <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  401ea0:	4b3f      	ldr	r3, [pc, #252]	; (401fa0 <xTaskIncrementTick+0x118>)
  401ea2:	681b      	ldr	r3, [r3, #0]
  401ea4:	681b      	ldr	r3, [r3, #0]
  401ea6:	b153      	cbz	r3, 401ebe <xTaskIncrementTick+0x36>
  401ea8:	f04f 0380 	mov.w	r3, #128	; 0x80
  401eac:	b672      	cpsid	i
  401eae:	f383 8811 	msr	BASEPRI, r3
  401eb2:	f3bf 8f6f 	isb	sy
  401eb6:	f3bf 8f4f 	dsb	sy
  401eba:	b662      	cpsie	i
  401ebc:	e7fe      	b.n	401ebc <xTaskIncrementTick+0x34>
  401ebe:	4a38      	ldr	r2, [pc, #224]	; (401fa0 <xTaskIncrementTick+0x118>)
  401ec0:	6811      	ldr	r1, [r2, #0]
  401ec2:	4b38      	ldr	r3, [pc, #224]	; (401fa4 <xTaskIncrementTick+0x11c>)
  401ec4:	6818      	ldr	r0, [r3, #0]
  401ec6:	6010      	str	r0, [r2, #0]
  401ec8:	6019      	str	r1, [r3, #0]
  401eca:	4a37      	ldr	r2, [pc, #220]	; (401fa8 <xTaskIncrementTick+0x120>)
  401ecc:	6813      	ldr	r3, [r2, #0]
  401ece:	3301      	adds	r3, #1
  401ed0:	6013      	str	r3, [r2, #0]
  401ed2:	4b36      	ldr	r3, [pc, #216]	; (401fac <xTaskIncrementTick+0x124>)
  401ed4:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  401ed6:	4b36      	ldr	r3, [pc, #216]	; (401fb0 <xTaskIncrementTick+0x128>)
  401ed8:	681b      	ldr	r3, [r3, #0]
  401eda:	429e      	cmp	r6, r3
  401edc:	d218      	bcs.n	401f10 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  401ede:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  401ee0:	4b34      	ldr	r3, [pc, #208]	; (401fb4 <xTaskIncrementTick+0x12c>)
  401ee2:	681b      	ldr	r3, [r3, #0]
  401ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  401ee6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  401eea:	4a33      	ldr	r2, [pc, #204]	; (401fb8 <xTaskIncrementTick+0x130>)
  401eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  401ef0:	2b02      	cmp	r3, #2
  401ef2:	bf28      	it	cs
  401ef4:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  401ef6:	4b31      	ldr	r3, [pc, #196]	; (401fbc <xTaskIncrementTick+0x134>)
  401ef8:	681b      	ldr	r3, [r3, #0]
  401efa:	b90b      	cbnz	r3, 401f00 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  401efc:	4b30      	ldr	r3, [pc, #192]	; (401fc0 <xTaskIncrementTick+0x138>)
  401efe:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  401f00:	4b30      	ldr	r3, [pc, #192]	; (401fc4 <xTaskIncrementTick+0x13c>)
  401f02:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  401f04:	2b00      	cmp	r3, #0
}
  401f06:	bf0c      	ite	eq
  401f08:	4620      	moveq	r0, r4
  401f0a:	2001      	movne	r0, #1
  401f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401f10:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401f12:	f8df 908c 	ldr.w	r9, [pc, #140]	; 401fa0 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401f16:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 401fd0 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  401f1a:	4f2b      	ldr	r7, [pc, #172]	; (401fc8 <xTaskIncrementTick+0x140>)
  401f1c:	e01f      	b.n	401f5e <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  401f1e:	f04f 32ff 	mov.w	r2, #4294967295
  401f22:	4b23      	ldr	r3, [pc, #140]	; (401fb0 <xTaskIncrementTick+0x128>)
  401f24:	601a      	str	r2, [r3, #0]
						break;
  401f26:	e7db      	b.n	401ee0 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  401f28:	4a21      	ldr	r2, [pc, #132]	; (401fb0 <xTaskIncrementTick+0x128>)
  401f2a:	6013      	str	r3, [r2, #0]
							break;
  401f2c:	e7d8      	b.n	401ee0 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  401f2e:	f105 0018 	add.w	r0, r5, #24
  401f32:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  401f34:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  401f36:	683a      	ldr	r2, [r7, #0]
  401f38:	2301      	movs	r3, #1
  401f3a:	4083      	lsls	r3, r0
  401f3c:	4313      	orrs	r3, r2
  401f3e:	603b      	str	r3, [r7, #0]
  401f40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  401f44:	4651      	mov	r1, sl
  401f46:	4b1c      	ldr	r3, [pc, #112]	; (401fb8 <xTaskIncrementTick+0x130>)
  401f48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  401f4c:	4b1f      	ldr	r3, [pc, #124]	; (401fcc <xTaskIncrementTick+0x144>)
  401f4e:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  401f50:	4b18      	ldr	r3, [pc, #96]	; (401fb4 <xTaskIncrementTick+0x12c>)
  401f52:	681b      	ldr	r3, [r3, #0]
  401f54:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  401f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  401f58:	429a      	cmp	r2, r3
  401f5a:	bf28      	it	cs
  401f5c:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  401f5e:	f8d9 3000 	ldr.w	r3, [r9]
  401f62:	681b      	ldr	r3, [r3, #0]
  401f64:	2b00      	cmp	r3, #0
  401f66:	d0da      	beq.n	401f1e <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  401f68:	f8d9 3000 	ldr.w	r3, [r9]
  401f6c:	68db      	ldr	r3, [r3, #12]
  401f6e:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  401f70:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  401f72:	429e      	cmp	r6, r3
  401f74:	d3d8      	bcc.n	401f28 <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  401f76:	f105 0a04 	add.w	sl, r5, #4
  401f7a:	4650      	mov	r0, sl
  401f7c:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  401f7e:	6aab      	ldr	r3, [r5, #40]	; 0x28
  401f80:	2b00      	cmp	r3, #0
  401f82:	d1d4      	bne.n	401f2e <xTaskIncrementTick+0xa6>
  401f84:	e7d6      	b.n	401f34 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  401f86:	4a0d      	ldr	r2, [pc, #52]	; (401fbc <xTaskIncrementTick+0x134>)
  401f88:	6813      	ldr	r3, [r2, #0]
  401f8a:	3301      	adds	r3, #1
  401f8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  401f8e:	4b0c      	ldr	r3, [pc, #48]	; (401fc0 <xTaskIncrementTick+0x138>)
  401f90:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  401f92:	2400      	movs	r4, #0
  401f94:	e7b4      	b.n	401f00 <xTaskIncrementTick+0x78>
  401f96:	bf00      	nop
  401f98:	20400ad4 	.word	0x20400ad4
  401f9c:	20400b54 	.word	0x20400b54
  401fa0:	20400a60 	.word	0x20400a60
  401fa4:	20400a64 	.word	0x20400a64
  401fa8:	20400b10 	.word	0x20400b10
  401fac:	00401b29 	.word	0x00401b29
  401fb0:	20400b0c 	.word	0x20400b0c
  401fb4:	20400a5c 	.word	0x20400a5c
  401fb8:	20400a68 	.word	0x20400a68
  401fbc:	20400ad0 	.word	0x20400ad0
  401fc0:	00402d49 	.word	0x00402d49
  401fc4:	20400b58 	.word	0x20400b58
  401fc8:	20400ae0 	.word	0x20400ae0
  401fcc:	00400e3d 	.word	0x00400e3d
  401fd0:	00400e89 	.word	0x00400e89

00401fd4 <xTaskResumeAll>:
{
  401fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  401fd8:	4b38      	ldr	r3, [pc, #224]	; (4020bc <xTaskResumeAll+0xe8>)
  401fda:	681b      	ldr	r3, [r3, #0]
  401fdc:	b953      	cbnz	r3, 401ff4 <xTaskResumeAll+0x20>
  401fde:	f04f 0380 	mov.w	r3, #128	; 0x80
  401fe2:	b672      	cpsid	i
  401fe4:	f383 8811 	msr	BASEPRI, r3
  401fe8:	f3bf 8f6f 	isb	sy
  401fec:	f3bf 8f4f 	dsb	sy
  401ff0:	b662      	cpsie	i
  401ff2:	e7fe      	b.n	401ff2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  401ff4:	4b32      	ldr	r3, [pc, #200]	; (4020c0 <xTaskResumeAll+0xec>)
  401ff6:	4798      	blx	r3
		--uxSchedulerSuspended;
  401ff8:	4b30      	ldr	r3, [pc, #192]	; (4020bc <xTaskResumeAll+0xe8>)
  401ffa:	681a      	ldr	r2, [r3, #0]
  401ffc:	3a01      	subs	r2, #1
  401ffe:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402000:	681b      	ldr	r3, [r3, #0]
  402002:	2b00      	cmp	r3, #0
  402004:	d155      	bne.n	4020b2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402006:	4b2f      	ldr	r3, [pc, #188]	; (4020c4 <xTaskResumeAll+0xf0>)
  402008:	681b      	ldr	r3, [r3, #0]
  40200a:	2b00      	cmp	r3, #0
  40200c:	d132      	bne.n	402074 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  40200e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402010:	4b2d      	ldr	r3, [pc, #180]	; (4020c8 <xTaskResumeAll+0xf4>)
  402012:	4798      	blx	r3
}
  402014:	4620      	mov	r0, r4
  402016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  40201a:	68fb      	ldr	r3, [r7, #12]
  40201c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  40201e:	f104 0018 	add.w	r0, r4, #24
  402022:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402024:	f104 0804 	add.w	r8, r4, #4
  402028:	4640      	mov	r0, r8
  40202a:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  40202c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  40202e:	682a      	ldr	r2, [r5, #0]
  402030:	2301      	movs	r3, #1
  402032:	4083      	lsls	r3, r0
  402034:	4313      	orrs	r3, r2
  402036:	602b      	str	r3, [r5, #0]
  402038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40203c:	4641      	mov	r1, r8
  40203e:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402042:	4b22      	ldr	r3, [pc, #136]	; (4020cc <xTaskResumeAll+0xf8>)
  402044:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402046:	4b22      	ldr	r3, [pc, #136]	; (4020d0 <xTaskResumeAll+0xfc>)
  402048:	681b      	ldr	r3, [r3, #0]
  40204a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  40204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40204e:	429a      	cmp	r2, r3
  402050:	d20c      	bcs.n	40206c <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402052:	683b      	ldr	r3, [r7, #0]
  402054:	2b00      	cmp	r3, #0
  402056:	d1e0      	bne.n	40201a <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402058:	4b1e      	ldr	r3, [pc, #120]	; (4020d4 <xTaskResumeAll+0x100>)
  40205a:	681b      	ldr	r3, [r3, #0]
  40205c:	b1db      	cbz	r3, 402096 <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  40205e:	4b1d      	ldr	r3, [pc, #116]	; (4020d4 <xTaskResumeAll+0x100>)
  402060:	681b      	ldr	r3, [r3, #0]
  402062:	b1c3      	cbz	r3, 402096 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402064:	4e1c      	ldr	r6, [pc, #112]	; (4020d8 <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402066:	4d1d      	ldr	r5, [pc, #116]	; (4020dc <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402068:	4c1a      	ldr	r4, [pc, #104]	; (4020d4 <xTaskResumeAll+0x100>)
  40206a:	e00e      	b.n	40208a <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  40206c:	2201      	movs	r2, #1
  40206e:	4b1b      	ldr	r3, [pc, #108]	; (4020dc <xTaskResumeAll+0x108>)
  402070:	601a      	str	r2, [r3, #0]
  402072:	e7ee      	b.n	402052 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402074:	4f1a      	ldr	r7, [pc, #104]	; (4020e0 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402076:	4e1b      	ldr	r6, [pc, #108]	; (4020e4 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402078:	4d1b      	ldr	r5, [pc, #108]	; (4020e8 <xTaskResumeAll+0x114>)
  40207a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 4020f0 <xTaskResumeAll+0x11c>
  40207e:	e7e8      	b.n	402052 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402080:	6823      	ldr	r3, [r4, #0]
  402082:	3b01      	subs	r3, #1
  402084:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402086:	6823      	ldr	r3, [r4, #0]
  402088:	b12b      	cbz	r3, 402096 <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  40208a:	47b0      	blx	r6
  40208c:	2800      	cmp	r0, #0
  40208e:	d0f7      	beq.n	402080 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402090:	2301      	movs	r3, #1
  402092:	602b      	str	r3, [r5, #0]
  402094:	e7f4      	b.n	402080 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402096:	4b11      	ldr	r3, [pc, #68]	; (4020dc <xTaskResumeAll+0x108>)
  402098:	681b      	ldr	r3, [r3, #0]
  40209a:	2b01      	cmp	r3, #1
  40209c:	d10b      	bne.n	4020b6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  40209e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4020a2:	4b12      	ldr	r3, [pc, #72]	; (4020ec <xTaskResumeAll+0x118>)
  4020a4:	601a      	str	r2, [r3, #0]
  4020a6:	f3bf 8f4f 	dsb	sy
  4020aa:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  4020ae:	2401      	movs	r4, #1
  4020b0:	e7ae      	b.n	402010 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  4020b2:	2400      	movs	r4, #0
  4020b4:	e7ac      	b.n	402010 <xTaskResumeAll+0x3c>
  4020b6:	2400      	movs	r4, #0
  4020b8:	e7aa      	b.n	402010 <xTaskResumeAll+0x3c>
  4020ba:	bf00      	nop
  4020bc:	20400ad4 	.word	0x20400ad4
  4020c0:	00400f6d 	.word	0x00400f6d
  4020c4:	20400acc 	.word	0x20400acc
  4020c8:	00400fb9 	.word	0x00400fb9
  4020cc:	00400e3d 	.word	0x00400e3d
  4020d0:	20400a5c 	.word	0x20400a5c
  4020d4:	20400ad0 	.word	0x20400ad0
  4020d8:	00401e89 	.word	0x00401e89
  4020dc:	20400b58 	.word	0x20400b58
  4020e0:	20400b14 	.word	0x20400b14
  4020e4:	00400e89 	.word	0x00400e89
  4020e8:	20400ae0 	.word	0x20400ae0
  4020ec:	e000ed04 	.word	0xe000ed04
  4020f0:	20400a68 	.word	0x20400a68

004020f4 <prvIdleTask>:
{
  4020f4:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  4020f6:	f8df 8088 	ldr.w	r8, [pc, #136]	; 402180 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  4020fa:	4e19      	ldr	r6, [pc, #100]	; (402160 <prvIdleTask+0x6c>)
				taskYIELD();
  4020fc:	f8df 9084 	ldr.w	r9, [pc, #132]	; 402184 <prvIdleTask+0x90>
  402100:	e02a      	b.n	402158 <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  402102:	4b18      	ldr	r3, [pc, #96]	; (402164 <prvIdleTask+0x70>)
  402104:	681b      	ldr	r3, [r3, #0]
  402106:	2b01      	cmp	r3, #1
  402108:	d81e      	bhi.n	402148 <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40210a:	682b      	ldr	r3, [r5, #0]
  40210c:	2b00      	cmp	r3, #0
  40210e:	d0f8      	beq.n	402102 <prvIdleTask+0xe>
			vTaskSuspendAll();
  402110:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  402112:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  402114:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  402116:	2c00      	cmp	r4, #0
  402118:	d0f7      	beq.n	40210a <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40211a:	4b13      	ldr	r3, [pc, #76]	; (402168 <prvIdleTask+0x74>)
  40211c:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  40211e:	68f3      	ldr	r3, [r6, #12]
  402120:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402122:	1d20      	adds	r0, r4, #4
  402124:	4b11      	ldr	r3, [pc, #68]	; (40216c <prvIdleTask+0x78>)
  402126:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  402128:	4a11      	ldr	r2, [pc, #68]	; (402170 <prvIdleTask+0x7c>)
  40212a:	6813      	ldr	r3, [r2, #0]
  40212c:	3b01      	subs	r3, #1
  40212e:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  402130:	682b      	ldr	r3, [r5, #0]
  402132:	3b01      	subs	r3, #1
  402134:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  402136:	4b0f      	ldr	r3, [pc, #60]	; (402174 <prvIdleTask+0x80>)
  402138:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  40213a:	6b20      	ldr	r0, [r4, #48]	; 0x30
  40213c:	f8df a048 	ldr.w	sl, [pc, #72]	; 402188 <prvIdleTask+0x94>
  402140:	47d0      	blx	sl
		vPortFree( pxTCB );
  402142:	4620      	mov	r0, r4
  402144:	47d0      	blx	sl
  402146:	e7e0      	b.n	40210a <prvIdleTask+0x16>
				taskYIELD();
  402148:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40214c:	f8c9 3000 	str.w	r3, [r9]
  402150:	f3bf 8f4f 	dsb	sy
  402154:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  402158:	4d07      	ldr	r5, [pc, #28]	; (402178 <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  40215a:	4f08      	ldr	r7, [pc, #32]	; (40217c <prvIdleTask+0x88>)
  40215c:	e7d5      	b.n	40210a <prvIdleTask+0x16>
  40215e:	bf00      	nop
  402160:	20400b40 	.word	0x20400b40
  402164:	20400a68 	.word	0x20400a68
  402168:	00400f6d 	.word	0x00400f6d
  40216c:	00400e89 	.word	0x00400e89
  402170:	20400acc 	.word	0x20400acc
  402174:	00400fb9 	.word	0x00400fb9
  402178:	20400adc 	.word	0x20400adc
  40217c:	00401fd5 	.word	0x00401fd5
  402180:	00401e6d 	.word	0x00401e6d
  402184:	e000ed04 	.word	0xe000ed04
  402188:	004011f9 	.word	0x004011f9

0040218c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  40218c:	4b2d      	ldr	r3, [pc, #180]	; (402244 <vTaskSwitchContext+0xb8>)
  40218e:	681b      	ldr	r3, [r3, #0]
  402190:	2b00      	cmp	r3, #0
  402192:	d12c      	bne.n	4021ee <vTaskSwitchContext+0x62>
{
  402194:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  402196:	2200      	movs	r2, #0
  402198:	4b2b      	ldr	r3, [pc, #172]	; (402248 <vTaskSwitchContext+0xbc>)
  40219a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  40219c:	4b2b      	ldr	r3, [pc, #172]	; (40224c <vTaskSwitchContext+0xc0>)
  40219e:	681b      	ldr	r3, [r3, #0]
  4021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021a2:	681a      	ldr	r2, [r3, #0]
  4021a4:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4021a8:	d103      	bne.n	4021b2 <vTaskSwitchContext+0x26>
  4021aa:	685a      	ldr	r2, [r3, #4]
  4021ac:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4021b0:	d021      	beq.n	4021f6 <vTaskSwitchContext+0x6a>
  4021b2:	4b26      	ldr	r3, [pc, #152]	; (40224c <vTaskSwitchContext+0xc0>)
  4021b4:	6818      	ldr	r0, [r3, #0]
  4021b6:	6819      	ldr	r1, [r3, #0]
  4021b8:	3134      	adds	r1, #52	; 0x34
  4021ba:	4b25      	ldr	r3, [pc, #148]	; (402250 <vTaskSwitchContext+0xc4>)
  4021bc:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  4021be:	4b25      	ldr	r3, [pc, #148]	; (402254 <vTaskSwitchContext+0xc8>)
  4021c0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  4021c2:	fab3 f383 	clz	r3, r3
  4021c6:	b2db      	uxtb	r3, r3
  4021c8:	f1c3 031f 	rsb	r3, r3, #31
  4021cc:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4021d0:	4a21      	ldr	r2, [pc, #132]	; (402258 <vTaskSwitchContext+0xcc>)
  4021d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4021d6:	b9ba      	cbnz	r2, 402208 <vTaskSwitchContext+0x7c>
	__asm volatile
  4021d8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021dc:	b672      	cpsid	i
  4021de:	f383 8811 	msr	BASEPRI, r3
  4021e2:	f3bf 8f6f 	isb	sy
  4021e6:	f3bf 8f4f 	dsb	sy
  4021ea:	b662      	cpsie	i
  4021ec:	e7fe      	b.n	4021ec <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  4021ee:	2201      	movs	r2, #1
  4021f0:	4b15      	ldr	r3, [pc, #84]	; (402248 <vTaskSwitchContext+0xbc>)
  4021f2:	601a      	str	r2, [r3, #0]
  4021f4:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  4021f6:	689a      	ldr	r2, [r3, #8]
  4021f8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  4021fc:	d1d9      	bne.n	4021b2 <vTaskSwitchContext+0x26>
  4021fe:	68db      	ldr	r3, [r3, #12]
  402200:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  402204:	d1d5      	bne.n	4021b2 <vTaskSwitchContext+0x26>
  402206:	e7da      	b.n	4021be <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  402208:	4a13      	ldr	r2, [pc, #76]	; (402258 <vTaskSwitchContext+0xcc>)
  40220a:	0099      	lsls	r1, r3, #2
  40220c:	18c8      	adds	r0, r1, r3
  40220e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  402212:	6844      	ldr	r4, [r0, #4]
  402214:	6864      	ldr	r4, [r4, #4]
  402216:	6044      	str	r4, [r0, #4]
  402218:	4419      	add	r1, r3
  40221a:	4602      	mov	r2, r0
  40221c:	3208      	adds	r2, #8
  40221e:	4294      	cmp	r4, r2
  402220:	d009      	beq.n	402236 <vTaskSwitchContext+0xaa>
  402222:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402226:	4a0c      	ldr	r2, [pc, #48]	; (402258 <vTaskSwitchContext+0xcc>)
  402228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  40222c:	685b      	ldr	r3, [r3, #4]
  40222e:	68da      	ldr	r2, [r3, #12]
  402230:	4b06      	ldr	r3, [pc, #24]	; (40224c <vTaskSwitchContext+0xc0>)
  402232:	601a      	str	r2, [r3, #0]
  402234:	bd10      	pop	{r4, pc}
  402236:	6860      	ldr	r0, [r4, #4]
  402238:	4a07      	ldr	r2, [pc, #28]	; (402258 <vTaskSwitchContext+0xcc>)
  40223a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  40223e:	6050      	str	r0, [r2, #4]
  402240:	e7ef      	b.n	402222 <vTaskSwitchContext+0x96>
  402242:	bf00      	nop
  402244:	20400ad4 	.word	0x20400ad4
  402248:	20400b58 	.word	0x20400b58
  40224c:	20400a5c 	.word	0x20400a5c
  402250:	00402d31 	.word	0x00402d31
  402254:	20400ae0 	.word	0x20400ae0
  402258:	20400a68 	.word	0x20400a68

0040225c <vTaskPlaceOnEventList>:
{
  40225c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  40225e:	b1e0      	cbz	r0, 40229a <vTaskPlaceOnEventList+0x3e>
  402260:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  402262:	4d17      	ldr	r5, [pc, #92]	; (4022c0 <vTaskPlaceOnEventList+0x64>)
  402264:	6829      	ldr	r1, [r5, #0]
  402266:	3118      	adds	r1, #24
  402268:	4b16      	ldr	r3, [pc, #88]	; (4022c4 <vTaskPlaceOnEventList+0x68>)
  40226a:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40226c:	6828      	ldr	r0, [r5, #0]
  40226e:	3004      	adds	r0, #4
  402270:	4b15      	ldr	r3, [pc, #84]	; (4022c8 <vTaskPlaceOnEventList+0x6c>)
  402272:	4798      	blx	r3
  402274:	b940      	cbnz	r0, 402288 <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  402276:	682a      	ldr	r2, [r5, #0]
  402278:	4914      	ldr	r1, [pc, #80]	; (4022cc <vTaskPlaceOnEventList+0x70>)
  40227a:	680b      	ldr	r3, [r1, #0]
  40227c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40227e:	2201      	movs	r2, #1
  402280:	4082      	lsls	r2, r0
  402282:	ea23 0302 	bic.w	r3, r3, r2
  402286:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  402288:	f1b4 3fff 	cmp.w	r4, #4294967295
  40228c:	d010      	beq.n	4022b0 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  40228e:	4b10      	ldr	r3, [pc, #64]	; (4022d0 <vTaskPlaceOnEventList+0x74>)
  402290:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  402292:	4420      	add	r0, r4
  402294:	4b0f      	ldr	r3, [pc, #60]	; (4022d4 <vTaskPlaceOnEventList+0x78>)
  402296:	4798      	blx	r3
  402298:	bd38      	pop	{r3, r4, r5, pc}
  40229a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40229e:	b672      	cpsid	i
  4022a0:	f383 8811 	msr	BASEPRI, r3
  4022a4:	f3bf 8f6f 	isb	sy
  4022a8:	f3bf 8f4f 	dsb	sy
  4022ac:	b662      	cpsie	i
  4022ae:	e7fe      	b.n	4022ae <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4022b0:	4b03      	ldr	r3, [pc, #12]	; (4022c0 <vTaskPlaceOnEventList+0x64>)
  4022b2:	6819      	ldr	r1, [r3, #0]
  4022b4:	3104      	adds	r1, #4
  4022b6:	4808      	ldr	r0, [pc, #32]	; (4022d8 <vTaskPlaceOnEventList+0x7c>)
  4022b8:	4b08      	ldr	r3, [pc, #32]	; (4022dc <vTaskPlaceOnEventList+0x80>)
  4022ba:	4798      	blx	r3
  4022bc:	bd38      	pop	{r3, r4, r5, pc}
  4022be:	bf00      	nop
  4022c0:	20400a5c 	.word	0x20400a5c
  4022c4:	00400e55 	.word	0x00400e55
  4022c8:	00400e89 	.word	0x00400e89
  4022cc:	20400ae0 	.word	0x20400ae0
  4022d0:	20400b54 	.word	0x20400b54
  4022d4:	00401b55 	.word	0x00401b55
  4022d8:	20400b2c 	.word	0x20400b2c
  4022dc:	00400e3d 	.word	0x00400e3d

004022e0 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  4022e0:	b1e8      	cbz	r0, 40231e <vTaskPlaceOnEventListRestricted+0x3e>
	{
  4022e2:	b570      	push	{r4, r5, r6, lr}
  4022e4:	4615      	mov	r5, r2
  4022e6:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4022e8:	4e16      	ldr	r6, [pc, #88]	; (402344 <vTaskPlaceOnEventListRestricted+0x64>)
  4022ea:	6831      	ldr	r1, [r6, #0]
  4022ec:	3118      	adds	r1, #24
  4022ee:	4b16      	ldr	r3, [pc, #88]	; (402348 <vTaskPlaceOnEventListRestricted+0x68>)
  4022f0:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4022f2:	6830      	ldr	r0, [r6, #0]
  4022f4:	3004      	adds	r0, #4
  4022f6:	4b15      	ldr	r3, [pc, #84]	; (40234c <vTaskPlaceOnEventListRestricted+0x6c>)
  4022f8:	4798      	blx	r3
  4022fa:	b940      	cbnz	r0, 40230e <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4022fc:	6832      	ldr	r2, [r6, #0]
  4022fe:	4914      	ldr	r1, [pc, #80]	; (402350 <vTaskPlaceOnEventListRestricted+0x70>)
  402300:	680b      	ldr	r3, [r1, #0]
  402302:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  402304:	2201      	movs	r2, #1
  402306:	4082      	lsls	r2, r0
  402308:	ea23 0302 	bic.w	r3, r3, r2
  40230c:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  40230e:	2d01      	cmp	r5, #1
  402310:	d010      	beq.n	402334 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  402312:	4b10      	ldr	r3, [pc, #64]	; (402354 <vTaskPlaceOnEventListRestricted+0x74>)
  402314:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  402316:	4420      	add	r0, r4
  402318:	4b0f      	ldr	r3, [pc, #60]	; (402358 <vTaskPlaceOnEventListRestricted+0x78>)
  40231a:	4798      	blx	r3
  40231c:	bd70      	pop	{r4, r5, r6, pc}
  40231e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402322:	b672      	cpsid	i
  402324:	f383 8811 	msr	BASEPRI, r3
  402328:	f3bf 8f6f 	isb	sy
  40232c:	f3bf 8f4f 	dsb	sy
  402330:	b662      	cpsie	i
  402332:	e7fe      	b.n	402332 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402334:	4b03      	ldr	r3, [pc, #12]	; (402344 <vTaskPlaceOnEventListRestricted+0x64>)
  402336:	6819      	ldr	r1, [r3, #0]
  402338:	3104      	adds	r1, #4
  40233a:	4808      	ldr	r0, [pc, #32]	; (40235c <vTaskPlaceOnEventListRestricted+0x7c>)
  40233c:	4b02      	ldr	r3, [pc, #8]	; (402348 <vTaskPlaceOnEventListRestricted+0x68>)
  40233e:	4798      	blx	r3
  402340:	bd70      	pop	{r4, r5, r6, pc}
  402342:	bf00      	nop
  402344:	20400a5c 	.word	0x20400a5c
  402348:	00400e3d 	.word	0x00400e3d
  40234c:	00400e89 	.word	0x00400e89
  402350:	20400ae0 	.word	0x20400ae0
  402354:	20400b54 	.word	0x20400b54
  402358:	00401b55 	.word	0x00401b55
  40235c:	20400b2c 	.word	0x20400b2c

00402360 <xTaskRemoveFromEventList>:
{
  402360:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  402362:	68c3      	ldr	r3, [r0, #12]
  402364:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  402366:	b324      	cbz	r4, 4023b2 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  402368:	f104 0518 	add.w	r5, r4, #24
  40236c:	4628      	mov	r0, r5
  40236e:	4b1a      	ldr	r3, [pc, #104]	; (4023d8 <xTaskRemoveFromEventList+0x78>)
  402370:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402372:	4b1a      	ldr	r3, [pc, #104]	; (4023dc <xTaskRemoveFromEventList+0x7c>)
  402374:	681b      	ldr	r3, [r3, #0]
  402376:	bb3b      	cbnz	r3, 4023c8 <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  402378:	1d25      	adds	r5, r4, #4
  40237a:	4628      	mov	r0, r5
  40237c:	4b16      	ldr	r3, [pc, #88]	; (4023d8 <xTaskRemoveFromEventList+0x78>)
  40237e:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  402380:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402382:	4a17      	ldr	r2, [pc, #92]	; (4023e0 <xTaskRemoveFromEventList+0x80>)
  402384:	6811      	ldr	r1, [r2, #0]
  402386:	2301      	movs	r3, #1
  402388:	4083      	lsls	r3, r0
  40238a:	430b      	orrs	r3, r1
  40238c:	6013      	str	r3, [r2, #0]
  40238e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402392:	4629      	mov	r1, r5
  402394:	4b13      	ldr	r3, [pc, #76]	; (4023e4 <xTaskRemoveFromEventList+0x84>)
  402396:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40239a:	4b13      	ldr	r3, [pc, #76]	; (4023e8 <xTaskRemoveFromEventList+0x88>)
  40239c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  40239e:	4b13      	ldr	r3, [pc, #76]	; (4023ec <xTaskRemoveFromEventList+0x8c>)
  4023a0:	681b      	ldr	r3, [r3, #0]
  4023a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  4023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  4023a6:	429a      	cmp	r2, r3
  4023a8:	d913      	bls.n	4023d2 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  4023aa:	2001      	movs	r0, #1
  4023ac:	4b10      	ldr	r3, [pc, #64]	; (4023f0 <xTaskRemoveFromEventList+0x90>)
  4023ae:	6018      	str	r0, [r3, #0]
  4023b0:	bd38      	pop	{r3, r4, r5, pc}
  4023b2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4023b6:	b672      	cpsid	i
  4023b8:	f383 8811 	msr	BASEPRI, r3
  4023bc:	f3bf 8f6f 	isb	sy
  4023c0:	f3bf 8f4f 	dsb	sy
  4023c4:	b662      	cpsie	i
  4023c6:	e7fe      	b.n	4023c6 <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  4023c8:	4629      	mov	r1, r5
  4023ca:	480a      	ldr	r0, [pc, #40]	; (4023f4 <xTaskRemoveFromEventList+0x94>)
  4023cc:	4b06      	ldr	r3, [pc, #24]	; (4023e8 <xTaskRemoveFromEventList+0x88>)
  4023ce:	4798      	blx	r3
  4023d0:	e7e5      	b.n	40239e <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  4023d2:	2000      	movs	r0, #0
}
  4023d4:	bd38      	pop	{r3, r4, r5, pc}
  4023d6:	bf00      	nop
  4023d8:	00400e89 	.word	0x00400e89
  4023dc:	20400ad4 	.word	0x20400ad4
  4023e0:	20400ae0 	.word	0x20400ae0
  4023e4:	20400a68 	.word	0x20400a68
  4023e8:	00400e3d 	.word	0x00400e3d
  4023ec:	20400a5c 	.word	0x20400a5c
  4023f0:	20400b58 	.word	0x20400b58
  4023f4:	20400b14 	.word	0x20400b14

004023f8 <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  4023f8:	b130      	cbz	r0, 402408 <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  4023fa:	4a09      	ldr	r2, [pc, #36]	; (402420 <vTaskSetTimeOutState+0x28>)
  4023fc:	6812      	ldr	r2, [r2, #0]
  4023fe:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  402400:	4a08      	ldr	r2, [pc, #32]	; (402424 <vTaskSetTimeOutState+0x2c>)
  402402:	6812      	ldr	r2, [r2, #0]
  402404:	6042      	str	r2, [r0, #4]
  402406:	4770      	bx	lr
  402408:	f04f 0380 	mov.w	r3, #128	; 0x80
  40240c:	b672      	cpsid	i
  40240e:	f383 8811 	msr	BASEPRI, r3
  402412:	f3bf 8f6f 	isb	sy
  402416:	f3bf 8f4f 	dsb	sy
  40241a:	b662      	cpsie	i
  40241c:	e7fe      	b.n	40241c <vTaskSetTimeOutState+0x24>
  40241e:	bf00      	nop
  402420:	20400b10 	.word	0x20400b10
  402424:	20400b54 	.word	0x20400b54

00402428 <xTaskCheckForTimeOut>:
{
  402428:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  40242a:	b1c0      	cbz	r0, 40245e <xTaskCheckForTimeOut+0x36>
  40242c:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  40242e:	b309      	cbz	r1, 402474 <xTaskCheckForTimeOut+0x4c>
  402430:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  402432:	4b1d      	ldr	r3, [pc, #116]	; (4024a8 <xTaskCheckForTimeOut+0x80>)
  402434:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  402436:	4b1d      	ldr	r3, [pc, #116]	; (4024ac <xTaskCheckForTimeOut+0x84>)
  402438:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  40243a:	682b      	ldr	r3, [r5, #0]
  40243c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402440:	d02e      	beq.n	4024a0 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  402442:	491b      	ldr	r1, [pc, #108]	; (4024b0 <xTaskCheckForTimeOut+0x88>)
  402444:	6809      	ldr	r1, [r1, #0]
  402446:	6820      	ldr	r0, [r4, #0]
  402448:	4288      	cmp	r0, r1
  40244a:	d002      	beq.n	402452 <xTaskCheckForTimeOut+0x2a>
  40244c:	6861      	ldr	r1, [r4, #4]
  40244e:	428a      	cmp	r2, r1
  402450:	d228      	bcs.n	4024a4 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  402452:	6861      	ldr	r1, [r4, #4]
  402454:	1a50      	subs	r0, r2, r1
  402456:	4283      	cmp	r3, r0
  402458:	d817      	bhi.n	40248a <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  40245a:	2401      	movs	r4, #1
  40245c:	e01c      	b.n	402498 <xTaskCheckForTimeOut+0x70>
  40245e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402462:	b672      	cpsid	i
  402464:	f383 8811 	msr	BASEPRI, r3
  402468:	f3bf 8f6f 	isb	sy
  40246c:	f3bf 8f4f 	dsb	sy
  402470:	b662      	cpsie	i
  402472:	e7fe      	b.n	402472 <xTaskCheckForTimeOut+0x4a>
  402474:	f04f 0380 	mov.w	r3, #128	; 0x80
  402478:	b672      	cpsid	i
  40247a:	f383 8811 	msr	BASEPRI, r3
  40247e:	f3bf 8f6f 	isb	sy
  402482:	f3bf 8f4f 	dsb	sy
  402486:	b662      	cpsie	i
  402488:	e7fe      	b.n	402488 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40248a:	1a9b      	subs	r3, r3, r2
  40248c:	440b      	add	r3, r1
  40248e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  402490:	4620      	mov	r0, r4
  402492:	4b08      	ldr	r3, [pc, #32]	; (4024b4 <xTaskCheckForTimeOut+0x8c>)
  402494:	4798      	blx	r3
			xReturn = pdFALSE;
  402496:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402498:	4b07      	ldr	r3, [pc, #28]	; (4024b8 <xTaskCheckForTimeOut+0x90>)
  40249a:	4798      	blx	r3
}
  40249c:	4620      	mov	r0, r4
  40249e:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  4024a0:	2400      	movs	r4, #0
  4024a2:	e7f9      	b.n	402498 <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  4024a4:	2401      	movs	r4, #1
  4024a6:	e7f7      	b.n	402498 <xTaskCheckForTimeOut+0x70>
  4024a8:	00400f6d 	.word	0x00400f6d
  4024ac:	20400b54 	.word	0x20400b54
  4024b0:	20400b10 	.word	0x20400b10
  4024b4:	004023f9 	.word	0x004023f9
  4024b8:	00400fb9 	.word	0x00400fb9

004024bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  4024bc:	2201      	movs	r2, #1
  4024be:	4b01      	ldr	r3, [pc, #4]	; (4024c4 <vTaskMissedYield+0x8>)
  4024c0:	601a      	str	r2, [r3, #0]
  4024c2:	4770      	bx	lr
  4024c4:	20400b58 	.word	0x20400b58

004024c8 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  4024c8:	4b05      	ldr	r3, [pc, #20]	; (4024e0 <xTaskGetSchedulerState+0x18>)
  4024ca:	681b      	ldr	r3, [r3, #0]
  4024cc:	b133      	cbz	r3, 4024dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4024ce:	4b05      	ldr	r3, [pc, #20]	; (4024e4 <xTaskGetSchedulerState+0x1c>)
  4024d0:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  4024d2:	2b00      	cmp	r3, #0
  4024d4:	bf0c      	ite	eq
  4024d6:	2002      	moveq	r0, #2
  4024d8:	2000      	movne	r0, #0
  4024da:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  4024dc:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  4024de:	4770      	bx	lr
  4024e0:	20400b28 	.word	0x20400b28
  4024e4:	20400ad4 	.word	0x20400ad4

004024e8 <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  4024e8:	2800      	cmp	r0, #0
  4024ea:	d044      	beq.n	402576 <vTaskPriorityInherit+0x8e>
	{
  4024ec:	b538      	push	{r3, r4, r5, lr}
  4024ee:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  4024f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  4024f2:	4921      	ldr	r1, [pc, #132]	; (402578 <vTaskPriorityInherit+0x90>)
  4024f4:	6809      	ldr	r1, [r1, #0]
  4024f6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  4024f8:	428a      	cmp	r2, r1
  4024fa:	d214      	bcs.n	402526 <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  4024fc:	6981      	ldr	r1, [r0, #24]
  4024fe:	2900      	cmp	r1, #0
  402500:	db05      	blt.n	40250e <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402502:	491d      	ldr	r1, [pc, #116]	; (402578 <vTaskPriorityInherit+0x90>)
  402504:	6809      	ldr	r1, [r1, #0]
  402506:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  402508:	f1c1 0105 	rsb	r1, r1, #5
  40250c:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  40250e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  402512:	491a      	ldr	r1, [pc, #104]	; (40257c <vTaskPriorityInherit+0x94>)
  402514:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  402518:	6961      	ldr	r1, [r4, #20]
  40251a:	4291      	cmp	r1, r2
  40251c:	d004      	beq.n	402528 <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  40251e:	4a16      	ldr	r2, [pc, #88]	; (402578 <vTaskPriorityInherit+0x90>)
  402520:	6812      	ldr	r2, [r2, #0]
  402522:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  402524:	62e2      	str	r2, [r4, #44]	; 0x2c
  402526:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  402528:	1d25      	adds	r5, r4, #4
  40252a:	4628      	mov	r0, r5
  40252c:	4b14      	ldr	r3, [pc, #80]	; (402580 <vTaskPriorityInherit+0x98>)
  40252e:	4798      	blx	r3
  402530:	b970      	cbnz	r0, 402550 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  402532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  402534:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  402538:	4a10      	ldr	r2, [pc, #64]	; (40257c <vTaskPriorityInherit+0x94>)
  40253a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40253e:	b93a      	cbnz	r2, 402550 <vTaskPriorityInherit+0x68>
  402540:	4810      	ldr	r0, [pc, #64]	; (402584 <vTaskPriorityInherit+0x9c>)
  402542:	6802      	ldr	r2, [r0, #0]
  402544:	2101      	movs	r1, #1
  402546:	fa01 f303 	lsl.w	r3, r1, r3
  40254a:	ea22 0303 	bic.w	r3, r2, r3
  40254e:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  402550:	4b09      	ldr	r3, [pc, #36]	; (402578 <vTaskPriorityInherit+0x90>)
  402552:	681b      	ldr	r3, [r3, #0]
  402554:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  402556:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  402558:	4a0a      	ldr	r2, [pc, #40]	; (402584 <vTaskPriorityInherit+0x9c>)
  40255a:	6811      	ldr	r1, [r2, #0]
  40255c:	2301      	movs	r3, #1
  40255e:	4083      	lsls	r3, r0
  402560:	430b      	orrs	r3, r1
  402562:	6013      	str	r3, [r2, #0]
  402564:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402568:	4629      	mov	r1, r5
  40256a:	4b04      	ldr	r3, [pc, #16]	; (40257c <vTaskPriorityInherit+0x94>)
  40256c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402570:	4b05      	ldr	r3, [pc, #20]	; (402588 <vTaskPriorityInherit+0xa0>)
  402572:	4798      	blx	r3
  402574:	bd38      	pop	{r3, r4, r5, pc}
  402576:	4770      	bx	lr
  402578:	20400a5c 	.word	0x20400a5c
  40257c:	20400a68 	.word	0x20400a68
  402580:	00400e89 	.word	0x00400e89
  402584:	20400ae0 	.word	0x20400ae0
  402588:	00400e3d 	.word	0x00400e3d

0040258c <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  40258c:	2800      	cmp	r0, #0
  40258e:	d04d      	beq.n	40262c <xTaskPriorityDisinherit+0xa0>
	{
  402590:	b538      	push	{r3, r4, r5, lr}
  402592:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  402594:	4a27      	ldr	r2, [pc, #156]	; (402634 <xTaskPriorityDisinherit+0xa8>)
  402596:	6812      	ldr	r2, [r2, #0]
  402598:	4290      	cmp	r0, r2
  40259a:	d00a      	beq.n	4025b2 <xTaskPriorityDisinherit+0x26>
  40259c:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025a0:	b672      	cpsid	i
  4025a2:	f383 8811 	msr	BASEPRI, r3
  4025a6:	f3bf 8f6f 	isb	sy
  4025aa:	f3bf 8f4f 	dsb	sy
  4025ae:	b662      	cpsie	i
  4025b0:	e7fe      	b.n	4025b0 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  4025b2:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  4025b4:	b952      	cbnz	r2, 4025cc <xTaskPriorityDisinherit+0x40>
  4025b6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4025ba:	b672      	cpsid	i
  4025bc:	f383 8811 	msr	BASEPRI, r3
  4025c0:	f3bf 8f6f 	isb	sy
  4025c4:	f3bf 8f4f 	dsb	sy
  4025c8:	b662      	cpsie	i
  4025ca:	e7fe      	b.n	4025ca <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  4025cc:	3a01      	subs	r2, #1
  4025ce:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  4025d0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  4025d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  4025d4:	4288      	cmp	r0, r1
  4025d6:	d02b      	beq.n	402630 <xTaskPriorityDisinherit+0xa4>
  4025d8:	bb52      	cbnz	r2, 402630 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4025da:	1d25      	adds	r5, r4, #4
  4025dc:	4628      	mov	r0, r5
  4025de:	4b16      	ldr	r3, [pc, #88]	; (402638 <xTaskPriorityDisinherit+0xac>)
  4025e0:	4798      	blx	r3
  4025e2:	b968      	cbnz	r0, 402600 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4025e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  4025e6:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  4025ea:	4b14      	ldr	r3, [pc, #80]	; (40263c <xTaskPriorityDisinherit+0xb0>)
  4025ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4025f0:	b933      	cbnz	r3, 402600 <xTaskPriorityDisinherit+0x74>
  4025f2:	4813      	ldr	r0, [pc, #76]	; (402640 <xTaskPriorityDisinherit+0xb4>)
  4025f4:	6803      	ldr	r3, [r0, #0]
  4025f6:	2201      	movs	r2, #1
  4025f8:	408a      	lsls	r2, r1
  4025fa:	ea23 0302 	bic.w	r3, r3, r2
  4025fe:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  402600:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  402602:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402604:	f1c0 0305 	rsb	r3, r0, #5
  402608:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40260a:	4a0d      	ldr	r2, [pc, #52]	; (402640 <xTaskPriorityDisinherit+0xb4>)
  40260c:	6811      	ldr	r1, [r2, #0]
  40260e:	2401      	movs	r4, #1
  402610:	fa04 f300 	lsl.w	r3, r4, r0
  402614:	430b      	orrs	r3, r1
  402616:	6013      	str	r3, [r2, #0]
  402618:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  40261c:	4629      	mov	r1, r5
  40261e:	4b07      	ldr	r3, [pc, #28]	; (40263c <xTaskPriorityDisinherit+0xb0>)
  402620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402624:	4b07      	ldr	r3, [pc, #28]	; (402644 <xTaskPriorityDisinherit+0xb8>)
  402626:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  402628:	4620      	mov	r0, r4
  40262a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  40262c:	2000      	movs	r0, #0
  40262e:	4770      	bx	lr
  402630:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  402632:	bd38      	pop	{r3, r4, r5, pc}
  402634:	20400a5c 	.word	0x20400a5c
  402638:	00400e89 	.word	0x00400e89
  40263c:	20400a68 	.word	0x20400a68
  402640:	20400ae0 	.word	0x20400ae0
  402644:	00400e3d 	.word	0x00400e3d

00402648 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  402648:	4b05      	ldr	r3, [pc, #20]	; (402660 <pvTaskIncrementMutexHeldCount+0x18>)
  40264a:	681b      	ldr	r3, [r3, #0]
  40264c:	b123      	cbz	r3, 402658 <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  40264e:	4b04      	ldr	r3, [pc, #16]	; (402660 <pvTaskIncrementMutexHeldCount+0x18>)
  402650:	681a      	ldr	r2, [r3, #0]
  402652:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  402654:	3301      	adds	r3, #1
  402656:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  402658:	4b01      	ldr	r3, [pc, #4]	; (402660 <pvTaskIncrementMutexHeldCount+0x18>)
  40265a:	6818      	ldr	r0, [r3, #0]
	}
  40265c:	4770      	bx	lr
  40265e:	bf00      	nop
  402660:	20400a5c 	.word	0x20400a5c

00402664 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  402664:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  402666:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  402668:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  40266a:	4291      	cmp	r1, r2
  40266c:	d80c      	bhi.n	402688 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  40266e:	1ad2      	subs	r2, r2, r3
  402670:	6983      	ldr	r3, [r0, #24]
  402672:	429a      	cmp	r2, r3
  402674:	d301      	bcc.n	40267a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  402676:	2001      	movs	r0, #1
  402678:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  40267a:	1d01      	adds	r1, r0, #4
  40267c:	4b09      	ldr	r3, [pc, #36]	; (4026a4 <prvInsertTimerInActiveList+0x40>)
  40267e:	6818      	ldr	r0, [r3, #0]
  402680:	4b09      	ldr	r3, [pc, #36]	; (4026a8 <prvInsertTimerInActiveList+0x44>)
  402682:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  402684:	2000      	movs	r0, #0
  402686:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  402688:	429a      	cmp	r2, r3
  40268a:	d203      	bcs.n	402694 <prvInsertTimerInActiveList+0x30>
  40268c:	4299      	cmp	r1, r3
  40268e:	d301      	bcc.n	402694 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  402690:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  402692:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  402694:	1d01      	adds	r1, r0, #4
  402696:	4b05      	ldr	r3, [pc, #20]	; (4026ac <prvInsertTimerInActiveList+0x48>)
  402698:	6818      	ldr	r0, [r3, #0]
  40269a:	4b03      	ldr	r3, [pc, #12]	; (4026a8 <prvInsertTimerInActiveList+0x44>)
  40269c:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  40269e:	2000      	movs	r0, #0
  4026a0:	bd08      	pop	{r3, pc}
  4026a2:	bf00      	nop
  4026a4:	20400b60 	.word	0x20400b60
  4026a8:	00400e55 	.word	0x00400e55
  4026ac:	20400b5c 	.word	0x20400b5c

004026b0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  4026b0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  4026b2:	4b15      	ldr	r3, [pc, #84]	; (402708 <prvCheckForValidListAndQueue+0x58>)
  4026b4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  4026b6:	4b15      	ldr	r3, [pc, #84]	; (40270c <prvCheckForValidListAndQueue+0x5c>)
  4026b8:	681b      	ldr	r3, [r3, #0]
  4026ba:	b113      	cbz	r3, 4026c2 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  4026bc:	4b14      	ldr	r3, [pc, #80]	; (402710 <prvCheckForValidListAndQueue+0x60>)
  4026be:	4798      	blx	r3
  4026c0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  4026c2:	4d14      	ldr	r5, [pc, #80]	; (402714 <prvCheckForValidListAndQueue+0x64>)
  4026c4:	4628      	mov	r0, r5
  4026c6:	4e14      	ldr	r6, [pc, #80]	; (402718 <prvCheckForValidListAndQueue+0x68>)
  4026c8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  4026ca:	4c14      	ldr	r4, [pc, #80]	; (40271c <prvCheckForValidListAndQueue+0x6c>)
  4026cc:	4620      	mov	r0, r4
  4026ce:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  4026d0:	4b13      	ldr	r3, [pc, #76]	; (402720 <prvCheckForValidListAndQueue+0x70>)
  4026d2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  4026d4:	4b13      	ldr	r3, [pc, #76]	; (402724 <prvCheckForValidListAndQueue+0x74>)
  4026d6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  4026d8:	2200      	movs	r2, #0
  4026da:	2110      	movs	r1, #16
  4026dc:	2005      	movs	r0, #5
  4026de:	4b12      	ldr	r3, [pc, #72]	; (402728 <prvCheckForValidListAndQueue+0x78>)
  4026e0:	4798      	blx	r3
  4026e2:	4b0a      	ldr	r3, [pc, #40]	; (40270c <prvCheckForValidListAndQueue+0x5c>)
  4026e4:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  4026e6:	b118      	cbz	r0, 4026f0 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  4026e8:	4910      	ldr	r1, [pc, #64]	; (40272c <prvCheckForValidListAndQueue+0x7c>)
  4026ea:	4b11      	ldr	r3, [pc, #68]	; (402730 <prvCheckForValidListAndQueue+0x80>)
  4026ec:	4798      	blx	r3
  4026ee:	e7e5      	b.n	4026bc <prvCheckForValidListAndQueue+0xc>
  4026f0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026f4:	b672      	cpsid	i
  4026f6:	f383 8811 	msr	BASEPRI, r3
  4026fa:	f3bf 8f6f 	isb	sy
  4026fe:	f3bf 8f4f 	dsb	sy
  402702:	b662      	cpsie	i
  402704:	e7fe      	b.n	402704 <prvCheckForValidListAndQueue+0x54>
  402706:	bf00      	nop
  402708:	00400f6d 	.word	0x00400f6d
  40270c:	20400b90 	.word	0x20400b90
  402710:	00400fb9 	.word	0x00400fb9
  402714:	20400b64 	.word	0x20400b64
  402718:	00400e21 	.word	0x00400e21
  40271c:	20400b78 	.word	0x20400b78
  402720:	20400b5c 	.word	0x20400b5c
  402724:	20400b60 	.word	0x20400b60
  402728:	0040148d 	.word	0x0040148d
  40272c:	00406920 	.word	0x00406920
  402730:	00401a9d 	.word	0x00401a9d

00402734 <xTimerCreateTimerTask>:
{
  402734:	b510      	push	{r4, lr}
  402736:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  402738:	4b0f      	ldr	r3, [pc, #60]	; (402778 <xTimerCreateTimerTask+0x44>)
  40273a:	4798      	blx	r3
	if( xTimerQueue != NULL )
  40273c:	4b0f      	ldr	r3, [pc, #60]	; (40277c <xTimerCreateTimerTask+0x48>)
  40273e:	681b      	ldr	r3, [r3, #0]
  402740:	b173      	cbz	r3, 402760 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  402742:	2300      	movs	r3, #0
  402744:	9303      	str	r3, [sp, #12]
  402746:	9302      	str	r3, [sp, #8]
  402748:	9301      	str	r3, [sp, #4]
  40274a:	2204      	movs	r2, #4
  40274c:	9200      	str	r2, [sp, #0]
  40274e:	f44f 7282 	mov.w	r2, #260	; 0x104
  402752:	490b      	ldr	r1, [pc, #44]	; (402780 <xTimerCreateTimerTask+0x4c>)
  402754:	480b      	ldr	r0, [pc, #44]	; (402784 <xTimerCreateTimerTask+0x50>)
  402756:	4c0c      	ldr	r4, [pc, #48]	; (402788 <xTimerCreateTimerTask+0x54>)
  402758:	47a0      	blx	r4
	configASSERT( xReturn );
  40275a:	b108      	cbz	r0, 402760 <xTimerCreateTimerTask+0x2c>
}
  40275c:	b004      	add	sp, #16
  40275e:	bd10      	pop	{r4, pc}
  402760:	f04f 0380 	mov.w	r3, #128	; 0x80
  402764:	b672      	cpsid	i
  402766:	f383 8811 	msr	BASEPRI, r3
  40276a:	f3bf 8f6f 	isb	sy
  40276e:	f3bf 8f4f 	dsb	sy
  402772:	b662      	cpsie	i
  402774:	e7fe      	b.n	402774 <xTimerCreateTimerTask+0x40>
  402776:	bf00      	nop
  402778:	004026b1 	.word	0x004026b1
  40277c:	20400b90 	.word	0x20400b90
  402780:	00406928 	.word	0x00406928
  402784:	004028b5 	.word	0x004028b5
  402788:	00401bad 	.word	0x00401bad

0040278c <xTimerGenericCommand>:
	configASSERT( xTimer );
  40278c:	b1d8      	cbz	r0, 4027c6 <xTimerGenericCommand+0x3a>
{
  40278e:	b530      	push	{r4, r5, lr}
  402790:	b085      	sub	sp, #20
  402792:	4615      	mov	r5, r2
  402794:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  402796:	4a15      	ldr	r2, [pc, #84]	; (4027ec <xTimerGenericCommand+0x60>)
  402798:	6810      	ldr	r0, [r2, #0]
  40279a:	b320      	cbz	r0, 4027e6 <xTimerGenericCommand+0x5a>
  40279c:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  40279e:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  4027a0:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  4027a2:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  4027a4:	2905      	cmp	r1, #5
  4027a6:	dc19      	bgt.n	4027dc <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  4027a8:	4b11      	ldr	r3, [pc, #68]	; (4027f0 <xTimerGenericCommand+0x64>)
  4027aa:	4798      	blx	r3
  4027ac:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  4027ae:	f04f 0300 	mov.w	r3, #0
  4027b2:	bf0c      	ite	eq
  4027b4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  4027b6:	461a      	movne	r2, r3
  4027b8:	4669      	mov	r1, sp
  4027ba:	480c      	ldr	r0, [pc, #48]	; (4027ec <xTimerGenericCommand+0x60>)
  4027bc:	6800      	ldr	r0, [r0, #0]
  4027be:	4c0d      	ldr	r4, [pc, #52]	; (4027f4 <xTimerGenericCommand+0x68>)
  4027c0:	47a0      	blx	r4
}
  4027c2:	b005      	add	sp, #20
  4027c4:	bd30      	pop	{r4, r5, pc}
  4027c6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027ca:	b672      	cpsid	i
  4027cc:	f383 8811 	msr	BASEPRI, r3
  4027d0:	f3bf 8f6f 	isb	sy
  4027d4:	f3bf 8f4f 	dsb	sy
  4027d8:	b662      	cpsie	i
  4027da:	e7fe      	b.n	4027da <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  4027dc:	2300      	movs	r3, #0
  4027de:	4669      	mov	r1, sp
  4027e0:	4c05      	ldr	r4, [pc, #20]	; (4027f8 <xTimerGenericCommand+0x6c>)
  4027e2:	47a0      	blx	r4
  4027e4:	e7ed      	b.n	4027c2 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  4027e6:	2000      	movs	r0, #0
	return xReturn;
  4027e8:	e7eb      	b.n	4027c2 <xTimerGenericCommand+0x36>
  4027ea:	bf00      	nop
  4027ec:	20400b90 	.word	0x20400b90
  4027f0:	004024c9 	.word	0x004024c9
  4027f4:	00401509 	.word	0x00401509
  4027f8:	004016ed 	.word	0x004016ed

004027fc <prvSampleTimeNow>:
{
  4027fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402800:	b082      	sub	sp, #8
  402802:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  402804:	4b24      	ldr	r3, [pc, #144]	; (402898 <prvSampleTimeNow+0x9c>)
  402806:	4798      	blx	r3
  402808:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40280a:	4b24      	ldr	r3, [pc, #144]	; (40289c <prvSampleTimeNow+0xa0>)
  40280c:	681b      	ldr	r3, [r3, #0]
  40280e:	4298      	cmp	r0, r3
  402810:	d31b      	bcc.n	40284a <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  402812:	2300      	movs	r3, #0
  402814:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  402818:	4b20      	ldr	r3, [pc, #128]	; (40289c <prvSampleTimeNow+0xa0>)
  40281a:	601f      	str	r7, [r3, #0]
}
  40281c:	4638      	mov	r0, r7
  40281e:	b002      	add	sp, #8
  402820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402824:	2100      	movs	r1, #0
  402826:	9100      	str	r1, [sp, #0]
  402828:	460b      	mov	r3, r1
  40282a:	4652      	mov	r2, sl
  40282c:	4620      	mov	r0, r4
  40282e:	4c1c      	ldr	r4, [pc, #112]	; (4028a0 <prvSampleTimeNow+0xa4>)
  402830:	47a0      	blx	r4
				configASSERT( xResult );
  402832:	b960      	cbnz	r0, 40284e <prvSampleTimeNow+0x52>
  402834:	f04f 0380 	mov.w	r3, #128	; 0x80
  402838:	b672      	cpsid	i
  40283a:	f383 8811 	msr	BASEPRI, r3
  40283e:	f3bf 8f6f 	isb	sy
  402842:	f3bf 8f4f 	dsb	sy
  402846:	b662      	cpsie	i
  402848:	e7fe      	b.n	402848 <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40284a:	4d16      	ldr	r5, [pc, #88]	; (4028a4 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40284c:	4e16      	ldr	r6, [pc, #88]	; (4028a8 <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  40284e:	682b      	ldr	r3, [r5, #0]
  402850:	681a      	ldr	r2, [r3, #0]
  402852:	b1c2      	cbz	r2, 402886 <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  402854:	68db      	ldr	r3, [r3, #12]
  402856:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  40285a:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40285c:	f104 0904 	add.w	r9, r4, #4
  402860:	4648      	mov	r0, r9
  402862:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402864:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402866:	4620      	mov	r0, r4
  402868:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  40286a:	69e3      	ldr	r3, [r4, #28]
  40286c:	2b01      	cmp	r3, #1
  40286e:	d1ee      	bne.n	40284e <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  402870:	69a3      	ldr	r3, [r4, #24]
  402872:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  402874:	459a      	cmp	sl, r3
  402876:	d2d5      	bcs.n	402824 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  402878:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  40287a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  40287c:	4649      	mov	r1, r9
  40287e:	6828      	ldr	r0, [r5, #0]
  402880:	4b0a      	ldr	r3, [pc, #40]	; (4028ac <prvSampleTimeNow+0xb0>)
  402882:	4798      	blx	r3
  402884:	e7e3      	b.n	40284e <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  402886:	4a0a      	ldr	r2, [pc, #40]	; (4028b0 <prvSampleTimeNow+0xb4>)
  402888:	6810      	ldr	r0, [r2, #0]
  40288a:	4906      	ldr	r1, [pc, #24]	; (4028a4 <prvSampleTimeNow+0xa8>)
  40288c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  40288e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  402890:	2301      	movs	r3, #1
  402892:	f8c8 3000 	str.w	r3, [r8]
  402896:	e7bf      	b.n	402818 <prvSampleTimeNow+0x1c>
  402898:	00401e7d 	.word	0x00401e7d
  40289c:	20400b8c 	.word	0x20400b8c
  4028a0:	0040278d 	.word	0x0040278d
  4028a4:	20400b5c 	.word	0x20400b5c
  4028a8:	00400e89 	.word	0x00400e89
  4028ac:	00400e55 	.word	0x00400e55
  4028b0:	20400b60 	.word	0x20400b60

004028b4 <prvTimerTask>:
{
  4028b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4028b8:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4028ba:	4e75      	ldr	r6, [pc, #468]	; (402a90 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  4028bc:	4f75      	ldr	r7, [pc, #468]	; (402a94 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  4028be:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 402abc <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4028c2:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 402ac0 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  4028c6:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  4028c8:	681a      	ldr	r2, [r3, #0]
  4028ca:	2a00      	cmp	r2, #0
  4028cc:	f000 80ce 	beq.w	402a6c <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4028d0:	68db      	ldr	r3, [r3, #12]
  4028d2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  4028d4:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4028d6:	a804      	add	r0, sp, #16
  4028d8:	4b6f      	ldr	r3, [pc, #444]	; (402a98 <prvTimerTask+0x1e4>)
  4028da:	4798      	blx	r3
  4028dc:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4028de:	9b04      	ldr	r3, [sp, #16]
  4028e0:	2b00      	cmp	r3, #0
  4028e2:	d144      	bne.n	40296e <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  4028e4:	42a0      	cmp	r0, r4
  4028e6:	d212      	bcs.n	40290e <prvTimerTask+0x5a>
  4028e8:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  4028ea:	1b61      	subs	r1, r4, r5
  4028ec:	4b6b      	ldr	r3, [pc, #428]	; (402a9c <prvTimerTask+0x1e8>)
  4028ee:	6818      	ldr	r0, [r3, #0]
  4028f0:	4b6b      	ldr	r3, [pc, #428]	; (402aa0 <prvTimerTask+0x1ec>)
  4028f2:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  4028f4:	4b6b      	ldr	r3, [pc, #428]	; (402aa4 <prvTimerTask+0x1f0>)
  4028f6:	4798      	blx	r3
  4028f8:	2800      	cmp	r0, #0
  4028fa:	d13a      	bne.n	402972 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  4028fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  402900:	f8c9 3000 	str.w	r3, [r9]
  402904:	f3bf 8f4f 	dsb	sy
  402908:	f3bf 8f6f 	isb	sy
  40290c:	e031      	b.n	402972 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  40290e:	4b65      	ldr	r3, [pc, #404]	; (402aa4 <prvTimerTask+0x1f0>)
  402910:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  402912:	6833      	ldr	r3, [r6, #0]
  402914:	68db      	ldr	r3, [r3, #12]
  402916:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40291a:	f10a 0004 	add.w	r0, sl, #4
  40291e:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402920:	f8da 301c 	ldr.w	r3, [sl, #28]
  402924:	2b01      	cmp	r3, #1
  402926:	d004      	beq.n	402932 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  402928:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  40292c:	4650      	mov	r0, sl
  40292e:	4798      	blx	r3
  402930:	e01f      	b.n	402972 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  402932:	f8da 1018 	ldr.w	r1, [sl, #24]
  402936:	4623      	mov	r3, r4
  402938:	462a      	mov	r2, r5
  40293a:	4421      	add	r1, r4
  40293c:	4650      	mov	r0, sl
  40293e:	4d5a      	ldr	r5, [pc, #360]	; (402aa8 <prvTimerTask+0x1f4>)
  402940:	47a8      	blx	r5
  402942:	2801      	cmp	r0, #1
  402944:	d1f0      	bne.n	402928 <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  402946:	2100      	movs	r1, #0
  402948:	9100      	str	r1, [sp, #0]
  40294a:	460b      	mov	r3, r1
  40294c:	4622      	mov	r2, r4
  40294e:	4650      	mov	r0, sl
  402950:	4c56      	ldr	r4, [pc, #344]	; (402aac <prvTimerTask+0x1f8>)
  402952:	47a0      	blx	r4
			configASSERT( xResult );
  402954:	2800      	cmp	r0, #0
  402956:	d1e7      	bne.n	402928 <prvTimerTask+0x74>
  402958:	f04f 0380 	mov.w	r3, #128	; 0x80
  40295c:	b672      	cpsid	i
  40295e:	f383 8811 	msr	BASEPRI, r3
  402962:	f3bf 8f6f 	isb	sy
  402966:	f3bf 8f4f 	dsb	sy
  40296a:	b662      	cpsie	i
  40296c:	e7fe      	b.n	40296c <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  40296e:	4b4d      	ldr	r3, [pc, #308]	; (402aa4 <prvTimerTask+0x1f0>)
  402970:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402972:	4d4a      	ldr	r5, [pc, #296]	; (402a9c <prvTimerTask+0x1e8>)
  402974:	4c4e      	ldr	r4, [pc, #312]	; (402ab0 <prvTimerTask+0x1fc>)
  402976:	e006      	b.n	402986 <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  402978:	9907      	ldr	r1, [sp, #28]
  40297a:	9806      	ldr	r0, [sp, #24]
  40297c:	9b05      	ldr	r3, [sp, #20]
  40297e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  402980:	9b04      	ldr	r3, [sp, #16]
  402982:	2b00      	cmp	r3, #0
  402984:	da09      	bge.n	40299a <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  402986:	2300      	movs	r3, #0
  402988:	461a      	mov	r2, r3
  40298a:	a904      	add	r1, sp, #16
  40298c:	6828      	ldr	r0, [r5, #0]
  40298e:	47a0      	blx	r4
  402990:	2800      	cmp	r0, #0
  402992:	d098      	beq.n	4028c6 <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  402994:	9b04      	ldr	r3, [sp, #16]
  402996:	2b00      	cmp	r3, #0
  402998:	dbee      	blt.n	402978 <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40299a:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  40299e:	f8da 3014 	ldr.w	r3, [sl, #20]
  4029a2:	b113      	cbz	r3, 4029aa <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4029a4:	f10a 0004 	add.w	r0, sl, #4
  4029a8:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4029aa:	a803      	add	r0, sp, #12
  4029ac:	4b3a      	ldr	r3, [pc, #232]	; (402a98 <prvTimerTask+0x1e4>)
  4029ae:	4798      	blx	r3
			switch( xMessage.xMessageID )
  4029b0:	9b04      	ldr	r3, [sp, #16]
  4029b2:	2b09      	cmp	r3, #9
  4029b4:	d8e7      	bhi.n	402986 <prvTimerTask+0xd2>
  4029b6:	a201      	add	r2, pc, #4	; (adr r2, 4029bc <prvTimerTask+0x108>)
  4029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4029bc:	004029e5 	.word	0x004029e5
  4029c0:	004029e5 	.word	0x004029e5
  4029c4:	004029e5 	.word	0x004029e5
  4029c8:	00402987 	.word	0x00402987
  4029cc:	00402a39 	.word	0x00402a39
  4029d0:	00402a65 	.word	0x00402a65
  4029d4:	004029e5 	.word	0x004029e5
  4029d8:	004029e5 	.word	0x004029e5
  4029dc:	00402987 	.word	0x00402987
  4029e0:	00402a39 	.word	0x00402a39
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  4029e4:	9c05      	ldr	r4, [sp, #20]
  4029e6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4029ea:	4623      	mov	r3, r4
  4029ec:	4602      	mov	r2, r0
  4029ee:	4421      	add	r1, r4
  4029f0:	4650      	mov	r0, sl
  4029f2:	4c2d      	ldr	r4, [pc, #180]	; (402aa8 <prvTimerTask+0x1f4>)
  4029f4:	47a0      	blx	r4
  4029f6:	2801      	cmp	r0, #1
  4029f8:	d1bc      	bne.n	402974 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4029fa:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4029fe:	4650      	mov	r0, sl
  402a00:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  402a02:	f8da 301c 	ldr.w	r3, [sl, #28]
  402a06:	2b01      	cmp	r3, #1
  402a08:	d1b4      	bne.n	402974 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  402a0a:	f8da 2018 	ldr.w	r2, [sl, #24]
  402a0e:	2100      	movs	r1, #0
  402a10:	9100      	str	r1, [sp, #0]
  402a12:	460b      	mov	r3, r1
  402a14:	9805      	ldr	r0, [sp, #20]
  402a16:	4402      	add	r2, r0
  402a18:	4650      	mov	r0, sl
  402a1a:	4c24      	ldr	r4, [pc, #144]	; (402aac <prvTimerTask+0x1f8>)
  402a1c:	47a0      	blx	r4
							configASSERT( xResult );
  402a1e:	2800      	cmp	r0, #0
  402a20:	d1a8      	bne.n	402974 <prvTimerTask+0xc0>
  402a22:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a26:	b672      	cpsid	i
  402a28:	f383 8811 	msr	BASEPRI, r3
  402a2c:	f3bf 8f6f 	isb	sy
  402a30:	f3bf 8f4f 	dsb	sy
  402a34:	b662      	cpsie	i
  402a36:	e7fe      	b.n	402a36 <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  402a38:	9905      	ldr	r1, [sp, #20]
  402a3a:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  402a3e:	b131      	cbz	r1, 402a4e <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  402a40:	4603      	mov	r3, r0
  402a42:	4602      	mov	r2, r0
  402a44:	4401      	add	r1, r0
  402a46:	4650      	mov	r0, sl
  402a48:	4c17      	ldr	r4, [pc, #92]	; (402aa8 <prvTimerTask+0x1f4>)
  402a4a:	47a0      	blx	r4
  402a4c:	e792      	b.n	402974 <prvTimerTask+0xc0>
  402a4e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402a52:	b672      	cpsid	i
  402a54:	f383 8811 	msr	BASEPRI, r3
  402a58:	f3bf 8f6f 	isb	sy
  402a5c:	f3bf 8f4f 	dsb	sy
  402a60:	b662      	cpsie	i
  402a62:	e7fe      	b.n	402a62 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  402a64:	4650      	mov	r0, sl
  402a66:	4b13      	ldr	r3, [pc, #76]	; (402ab4 <prvTimerTask+0x200>)
  402a68:	4798      	blx	r3
  402a6a:	e783      	b.n	402974 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  402a6c:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  402a6e:	a804      	add	r0, sp, #16
  402a70:	4b09      	ldr	r3, [pc, #36]	; (402a98 <prvTimerTask+0x1e4>)
  402a72:	4798      	blx	r3
  402a74:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  402a76:	9b04      	ldr	r3, [sp, #16]
  402a78:	2b00      	cmp	r3, #0
  402a7a:	f47f af78 	bne.w	40296e <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  402a7e:	4b0e      	ldr	r3, [pc, #56]	; (402ab8 <prvTimerTask+0x204>)
  402a80:	681b      	ldr	r3, [r3, #0]
  402a82:	681a      	ldr	r2, [r3, #0]
  402a84:	fab2 f282 	clz	r2, r2
  402a88:	0952      	lsrs	r2, r2, #5
  402a8a:	2400      	movs	r4, #0
  402a8c:	e72d      	b.n	4028ea <prvTimerTask+0x36>
  402a8e:	bf00      	nop
  402a90:	20400b5c 	.word	0x20400b5c
  402a94:	00401e6d 	.word	0x00401e6d
  402a98:	004027fd 	.word	0x004027fd
  402a9c:	20400b90 	.word	0x20400b90
  402aa0:	00401ad1 	.word	0x00401ad1
  402aa4:	00401fd5 	.word	0x00401fd5
  402aa8:	00402665 	.word	0x00402665
  402aac:	0040278d 	.word	0x0040278d
  402ab0:	004018cd 	.word	0x004018cd
  402ab4:	004011f9 	.word	0x004011f9
  402ab8:	20400b60 	.word	0x20400b60
  402abc:	e000ed04 	.word	0xe000ed04
  402ac0:	00400e89 	.word	0x00400e89

00402ac4 <but1_callback>:
SemaphoreHandle_t xSemaphoreStart;

/************************************************************************/
/* handlers / callbacks                                                 */
/************************************************************************/
void but1_callback(void) {
  402ac4:	b508      	push	{r3, lr}
	xSemaphoreGiveFromISR(xSemaphoreStart, 0);
  402ac6:	2100      	movs	r1, #0
  402ac8:	4b02      	ldr	r3, [pc, #8]	; (402ad4 <but1_callback+0x10>)
  402aca:	6818      	ldr	r0, [r3, #0]
  402acc:	4b02      	ldr	r3, [pc, #8]	; (402ad8 <but1_callback+0x14>)
  402ace:	4798      	blx	r3
  402ad0:	bd08      	pop	{r3, pc}
  402ad2:	bf00      	nop
  402ad4:	20400c18 	.word	0x20400c18
  402ad8:	004017ed 	.word	0x004017ed

00402adc <task_music>:
}

/************************************************************************/
/* TASKS                                                                */
/************************************************************************/
static void task_music(void *pvParameters) {
  402adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  402ae0:	b082      	sub	sp, #8
	// Rotina principal
	for(;;){
		int divider;
		int noteDuration;
		int thisNote;
		if (xSemaphoreTake(xSemaphoreStart, 500 / portTICK_PERIOD_MS) == pdTRUE){
  402ae2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 402b74 <task_music+0x98>
				divider = melody[thisNote + 1];
				if (divider > 0) {
					noteDuration = (wholenote) / divider;
					} else if (divider < 0) {
					noteDuration = (wholenote) / abs(divider);
					noteDuration *= 1.5;
  402ae6:	f8df a090 	ldr.w	sl, [pc, #144]	; 402b78 <task_music+0x9c>
  402aea:	f8df 9090 	ldr.w	r9, [pc, #144]	; 402b7c <task_music+0xa0>
		if (xSemaphoreTake(xSemaphoreStart, 500 / portTICK_PERIOD_MS) == pdTRUE){
  402aee:	2600      	movs	r6, #0
  402af0:	4c1a      	ldr	r4, [pc, #104]	; (402b5c <task_music+0x80>)
  402af2:	4633      	mov	r3, r6
  402af4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402af8:	4631      	mov	r1, r6
  402afa:	f8d8 0000 	ldr.w	r0, [r8]
  402afe:	47a0      	blx	r4
  402b00:	2801      	cmp	r0, #1
  402b02:	d1f6      	bne.n	402af2 <task_music+0x16>
  402b04:	4c16      	ldr	r4, [pc, #88]	; (402b60 <task_music+0x84>)
  402b06:	f504 57aa 	add.w	r7, r4, #5440	; 0x1540
  402b0a:	e00f      	b.n	402b2c <task_music+0x50>
					} else if (divider < 0) {
  402b0c:	2800      	cmp	r0, #0
  402b0e:	db16      	blt.n	402b3e <task_music+0x62>
				}
				notas.tone = melody[thisNote];
  402b10:	6833      	ldr	r3, [r6, #0]
  402b12:	9300      	str	r3, [sp, #0]
				notas.duration = noteDuration;
  402b14:	9501      	str	r5, [sp, #4]
				xQueueSend(xQueueNote, &notas,portMAX_DELAY);
  402b16:	2300      	movs	r3, #0
  402b18:	f04f 32ff 	mov.w	r2, #4294967295
  402b1c:	4669      	mov	r1, sp
  402b1e:	4811      	ldr	r0, [pc, #68]	; (402b64 <task_music+0x88>)
  402b20:	6800      	ldr	r0, [r0, #0]
  402b22:	4e11      	ldr	r6, [pc, #68]	; (402b68 <task_music+0x8c>)
  402b24:	47b0      	blx	r6
  402b26:	3408      	adds	r4, #8
			for (thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
  402b28:	42bc      	cmp	r4, r7
  402b2a:	d0e0      	beq.n	402aee <task_music+0x12>
  402b2c:	4626      	mov	r6, r4
				divider = melody[thisNote + 1];
  402b2e:	6860      	ldr	r0, [r4, #4]
				if (divider > 0) {
  402b30:	2800      	cmp	r0, #0
  402b32:	ddeb      	ble.n	402b0c <task_music+0x30>
					noteDuration = (wholenote) / divider;
  402b34:	f240 452a 	movw	r5, #1066	; 0x42a
  402b38:	fb95 f5f0 	sdiv	r5, r5, r0
  402b3c:	e7e8      	b.n	402b10 <task_music+0x34>
					noteDuration = (wholenote) / abs(divider);
  402b3e:	2800      	cmp	r0, #0
  402b40:	bfb8      	it	lt
  402b42:	4240      	neglt	r0, r0
					noteDuration *= 1.5;
  402b44:	f240 432a 	movw	r3, #1066	; 0x42a
  402b48:	fb93 f0f0 	sdiv	r0, r3, r0
  402b4c:	47d0      	blx	sl
  402b4e:	2200      	movs	r2, #0
  402b50:	4b06      	ldr	r3, [pc, #24]	; (402b6c <task_music+0x90>)
  402b52:	47c8      	blx	r9
  402b54:	4b06      	ldr	r3, [pc, #24]	; (402b70 <task_music+0x94>)
  402b56:	4798      	blx	r3
  402b58:	4605      	mov	r5, r0
  402b5a:	e7d9      	b.n	402b10 <task_music+0x34>
  402b5c:	004018cd 	.word	0x004018cd
  402b60:	0040699c 	.word	0x0040699c
  402b64:	20400c1c 	.word	0x20400c1c
  402b68:	00401509 	.word	0x00401509
  402b6c:	3ff80000 	.word	0x3ff80000
  402b70:	0040393d 	.word	0x0040393d
  402b74:	20400c18 	.word	0x20400c18
  402b78:	0040344d 	.word	0x0040344d
  402b7c:	00403519 	.word	0x00403519

00402b80 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  402b80:	b5f0      	push	{r4, r5, r6, r7, lr}
  402b82:	b083      	sub	sp, #12
  402b84:	4605      	mov	r5, r0
  402b86:	460c      	mov	r4, r1
	uint32_t val = 0;
  402b88:	2300      	movs	r3, #0
  402b8a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  402b8c:	4b2a      	ldr	r3, [pc, #168]	; (402c38 <usart_serial_getchar+0xb8>)
  402b8e:	4298      	cmp	r0, r3
  402b90:	d013      	beq.n	402bba <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  402b92:	4b2a      	ldr	r3, [pc, #168]	; (402c3c <usart_serial_getchar+0xbc>)
  402b94:	4298      	cmp	r0, r3
  402b96:	d018      	beq.n	402bca <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  402b98:	4b29      	ldr	r3, [pc, #164]	; (402c40 <usart_serial_getchar+0xc0>)
  402b9a:	4298      	cmp	r0, r3
  402b9c:	d01d      	beq.n	402bda <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  402b9e:	4b29      	ldr	r3, [pc, #164]	; (402c44 <usart_serial_getchar+0xc4>)
  402ba0:	429d      	cmp	r5, r3
  402ba2:	d022      	beq.n	402bea <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  402ba4:	4b28      	ldr	r3, [pc, #160]	; (402c48 <usart_serial_getchar+0xc8>)
  402ba6:	429d      	cmp	r5, r3
  402ba8:	d027      	beq.n	402bfa <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  402baa:	4b28      	ldr	r3, [pc, #160]	; (402c4c <usart_serial_getchar+0xcc>)
  402bac:	429d      	cmp	r5, r3
  402bae:	d02e      	beq.n	402c0e <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  402bb0:	4b27      	ldr	r3, [pc, #156]	; (402c50 <usart_serial_getchar+0xd0>)
  402bb2:	429d      	cmp	r5, r3
  402bb4:	d035      	beq.n	402c22 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  402bb6:	b003      	add	sp, #12
  402bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  402bba:	461f      	mov	r7, r3
  402bbc:	4e25      	ldr	r6, [pc, #148]	; (402c54 <usart_serial_getchar+0xd4>)
  402bbe:	4621      	mov	r1, r4
  402bc0:	4638      	mov	r0, r7
  402bc2:	47b0      	blx	r6
  402bc4:	2800      	cmp	r0, #0
  402bc6:	d1fa      	bne.n	402bbe <usart_serial_getchar+0x3e>
  402bc8:	e7e9      	b.n	402b9e <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  402bca:	461f      	mov	r7, r3
  402bcc:	4e21      	ldr	r6, [pc, #132]	; (402c54 <usart_serial_getchar+0xd4>)
  402bce:	4621      	mov	r1, r4
  402bd0:	4638      	mov	r0, r7
  402bd2:	47b0      	blx	r6
  402bd4:	2800      	cmp	r0, #0
  402bd6:	d1fa      	bne.n	402bce <usart_serial_getchar+0x4e>
  402bd8:	e7e4      	b.n	402ba4 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  402bda:	461f      	mov	r7, r3
  402bdc:	4e1d      	ldr	r6, [pc, #116]	; (402c54 <usart_serial_getchar+0xd4>)
  402bde:	4621      	mov	r1, r4
  402be0:	4638      	mov	r0, r7
  402be2:	47b0      	blx	r6
  402be4:	2800      	cmp	r0, #0
  402be6:	d1fa      	bne.n	402bde <usart_serial_getchar+0x5e>
  402be8:	e7df      	b.n	402baa <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  402bea:	461f      	mov	r7, r3
  402bec:	4e19      	ldr	r6, [pc, #100]	; (402c54 <usart_serial_getchar+0xd4>)
  402bee:	4621      	mov	r1, r4
  402bf0:	4638      	mov	r0, r7
  402bf2:	47b0      	blx	r6
  402bf4:	2800      	cmp	r0, #0
  402bf6:	d1fa      	bne.n	402bee <usart_serial_getchar+0x6e>
  402bf8:	e7da      	b.n	402bb0 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  402bfa:	461e      	mov	r6, r3
  402bfc:	4d16      	ldr	r5, [pc, #88]	; (402c58 <usart_serial_getchar+0xd8>)
  402bfe:	a901      	add	r1, sp, #4
  402c00:	4630      	mov	r0, r6
  402c02:	47a8      	blx	r5
  402c04:	2800      	cmp	r0, #0
  402c06:	d1fa      	bne.n	402bfe <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  402c08:	9b01      	ldr	r3, [sp, #4]
  402c0a:	7023      	strb	r3, [r4, #0]
  402c0c:	e7d3      	b.n	402bb6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402c0e:	461e      	mov	r6, r3
  402c10:	4d11      	ldr	r5, [pc, #68]	; (402c58 <usart_serial_getchar+0xd8>)
  402c12:	a901      	add	r1, sp, #4
  402c14:	4630      	mov	r0, r6
  402c16:	47a8      	blx	r5
  402c18:	2800      	cmp	r0, #0
  402c1a:	d1fa      	bne.n	402c12 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  402c1c:	9b01      	ldr	r3, [sp, #4]
  402c1e:	7023      	strb	r3, [r4, #0]
  402c20:	e7c9      	b.n	402bb6 <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  402c22:	461e      	mov	r6, r3
  402c24:	4d0c      	ldr	r5, [pc, #48]	; (402c58 <usart_serial_getchar+0xd8>)
  402c26:	a901      	add	r1, sp, #4
  402c28:	4630      	mov	r0, r6
  402c2a:	47a8      	blx	r5
  402c2c:	2800      	cmp	r0, #0
  402c2e:	d1fa      	bne.n	402c26 <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  402c30:	9b01      	ldr	r3, [sp, #4]
  402c32:	7023      	strb	r3, [r4, #0]
}
  402c34:	e7bf      	b.n	402bb6 <usart_serial_getchar+0x36>
  402c36:	bf00      	nop
  402c38:	400e0800 	.word	0x400e0800
  402c3c:	400e0a00 	.word	0x400e0a00
  402c40:	400e1a00 	.word	0x400e1a00
  402c44:	400e1c00 	.word	0x400e1c00
  402c48:	40024000 	.word	0x40024000
  402c4c:	40028000 	.word	0x40028000
  402c50:	4002c000 	.word	0x4002c000
  402c54:	00400a4b 	.word	0x00400a4b
  402c58:	00400b57 	.word	0x00400b57

00402c5c <usart_serial_putchar>:
{
  402c5c:	b570      	push	{r4, r5, r6, lr}
  402c5e:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  402c60:	4b2a      	ldr	r3, [pc, #168]	; (402d0c <usart_serial_putchar+0xb0>)
  402c62:	4298      	cmp	r0, r3
  402c64:	d013      	beq.n	402c8e <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  402c66:	4b2a      	ldr	r3, [pc, #168]	; (402d10 <usart_serial_putchar+0xb4>)
  402c68:	4298      	cmp	r0, r3
  402c6a:	d019      	beq.n	402ca0 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  402c6c:	4b29      	ldr	r3, [pc, #164]	; (402d14 <usart_serial_putchar+0xb8>)
  402c6e:	4298      	cmp	r0, r3
  402c70:	d01f      	beq.n	402cb2 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  402c72:	4b29      	ldr	r3, [pc, #164]	; (402d18 <usart_serial_putchar+0xbc>)
  402c74:	4298      	cmp	r0, r3
  402c76:	d025      	beq.n	402cc4 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  402c78:	4b28      	ldr	r3, [pc, #160]	; (402d1c <usart_serial_putchar+0xc0>)
  402c7a:	4298      	cmp	r0, r3
  402c7c:	d02b      	beq.n	402cd6 <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  402c7e:	4b28      	ldr	r3, [pc, #160]	; (402d20 <usart_serial_putchar+0xc4>)
  402c80:	4298      	cmp	r0, r3
  402c82:	d031      	beq.n	402ce8 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  402c84:	4b27      	ldr	r3, [pc, #156]	; (402d24 <usart_serial_putchar+0xc8>)
  402c86:	4298      	cmp	r0, r3
  402c88:	d037      	beq.n	402cfa <usart_serial_putchar+0x9e>
	return 0;
  402c8a:	2000      	movs	r0, #0
}
  402c8c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402c8e:	461e      	mov	r6, r3
  402c90:	4d25      	ldr	r5, [pc, #148]	; (402d28 <usart_serial_putchar+0xcc>)
  402c92:	4621      	mov	r1, r4
  402c94:	4630      	mov	r0, r6
  402c96:	47a8      	blx	r5
  402c98:	2800      	cmp	r0, #0
  402c9a:	d1fa      	bne.n	402c92 <usart_serial_putchar+0x36>
		return 1;
  402c9c:	2001      	movs	r0, #1
  402c9e:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402ca0:	461e      	mov	r6, r3
  402ca2:	4d21      	ldr	r5, [pc, #132]	; (402d28 <usart_serial_putchar+0xcc>)
  402ca4:	4621      	mov	r1, r4
  402ca6:	4630      	mov	r0, r6
  402ca8:	47a8      	blx	r5
  402caa:	2800      	cmp	r0, #0
  402cac:	d1fa      	bne.n	402ca4 <usart_serial_putchar+0x48>
		return 1;
  402cae:	2001      	movs	r0, #1
  402cb0:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402cb2:	461e      	mov	r6, r3
  402cb4:	4d1c      	ldr	r5, [pc, #112]	; (402d28 <usart_serial_putchar+0xcc>)
  402cb6:	4621      	mov	r1, r4
  402cb8:	4630      	mov	r0, r6
  402cba:	47a8      	blx	r5
  402cbc:	2800      	cmp	r0, #0
  402cbe:	d1fa      	bne.n	402cb6 <usart_serial_putchar+0x5a>
		return 1;
  402cc0:	2001      	movs	r0, #1
  402cc2:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  402cc4:	461e      	mov	r6, r3
  402cc6:	4d18      	ldr	r5, [pc, #96]	; (402d28 <usart_serial_putchar+0xcc>)
  402cc8:	4621      	mov	r1, r4
  402cca:	4630      	mov	r0, r6
  402ccc:	47a8      	blx	r5
  402cce:	2800      	cmp	r0, #0
  402cd0:	d1fa      	bne.n	402cc8 <usart_serial_putchar+0x6c>
		return 1;
  402cd2:	2001      	movs	r0, #1
  402cd4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402cd6:	461e      	mov	r6, r3
  402cd8:	4d14      	ldr	r5, [pc, #80]	; (402d2c <usart_serial_putchar+0xd0>)
  402cda:	4621      	mov	r1, r4
  402cdc:	4630      	mov	r0, r6
  402cde:	47a8      	blx	r5
  402ce0:	2800      	cmp	r0, #0
  402ce2:	d1fa      	bne.n	402cda <usart_serial_putchar+0x7e>
		return 1;
  402ce4:	2001      	movs	r0, #1
  402ce6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402ce8:	461e      	mov	r6, r3
  402cea:	4d10      	ldr	r5, [pc, #64]	; (402d2c <usart_serial_putchar+0xd0>)
  402cec:	4621      	mov	r1, r4
  402cee:	4630      	mov	r0, r6
  402cf0:	47a8      	blx	r5
  402cf2:	2800      	cmp	r0, #0
  402cf4:	d1fa      	bne.n	402cec <usart_serial_putchar+0x90>
		return 1;
  402cf6:	2001      	movs	r0, #1
  402cf8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  402cfa:	461e      	mov	r6, r3
  402cfc:	4d0b      	ldr	r5, [pc, #44]	; (402d2c <usart_serial_putchar+0xd0>)
  402cfe:	4621      	mov	r1, r4
  402d00:	4630      	mov	r0, r6
  402d02:	47a8      	blx	r5
  402d04:	2800      	cmp	r0, #0
  402d06:	d1fa      	bne.n	402cfe <usart_serial_putchar+0xa2>
		return 1;
  402d08:	2001      	movs	r0, #1
  402d0a:	bd70      	pop	{r4, r5, r6, pc}
  402d0c:	400e0800 	.word	0x400e0800
  402d10:	400e0a00 	.word	0x400e0a00
  402d14:	400e1a00 	.word	0x400e1a00
  402d18:	400e1c00 	.word	0x400e1c00
  402d1c:	40024000 	.word	0x40024000
  402d20:	40028000 	.word	0x40028000
  402d24:	4002c000 	.word	0x4002c000
  402d28:	00400a39 	.word	0x00400a39
  402d2c:	00400b41 	.word	0x00400b41

00402d30 <vApplicationStackOverflowHook>:
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask, signed char *pcTaskName) {
  402d30:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  402d32:	460a      	mov	r2, r1
  402d34:	4601      	mov	r1, r0
  402d36:	4802      	ldr	r0, [pc, #8]	; (402d40 <vApplicationStackOverflowHook+0x10>)
  402d38:	4b02      	ldr	r3, [pc, #8]	; (402d44 <vApplicationStackOverflowHook+0x14>)
  402d3a:	4798      	blx	r3
  402d3c:	e7fe      	b.n	402d3c <vApplicationStackOverflowHook+0xc>
  402d3e:	bf00      	nop
  402d40:	00407edc 	.word	0x00407edc
  402d44:	004039dd 	.word	0x004039dd

00402d48 <vApplicationTickHook>:
extern void vApplicationTickHook(void) { }
  402d48:	4770      	bx	lr

00402d4a <vApplicationMallocFailedHook>:
  402d4a:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d4e:	b672      	cpsid	i
  402d50:	f383 8811 	msr	BASEPRI, r3
  402d54:	f3bf 8f6f 	isb	sy
  402d58:	f3bf 8f4f 	dsb	sy
  402d5c:	b662      	cpsie	i
  402d5e:	e7fe      	b.n	402d5e <vApplicationMallocFailedHook+0x14>

00402d60 <RTT_Handler>:
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);

}

void RTT_Handler(void) {
  402d60:	b508      	push	{r3, lr}
	uint32_t ul_status;
	ul_status = rtt_get_status(RTT);
  402d62:	4808      	ldr	r0, [pc, #32]	; (402d84 <RTT_Handler+0x24>)
  402d64:	4b08      	ldr	r3, [pc, #32]	; (402d88 <RTT_Handler+0x28>)
  402d66:	4798      	blx	r3

	/* IRQ due to Alarm */
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  402d68:	f010 0f01 	tst.w	r0, #1
  402d6c:	d100      	bne.n	402d70 <RTT_Handler+0x10>
  402d6e:	bd08      	pop	{r3, pc}
		tc_stop(TC0,1);
  402d70:	2101      	movs	r1, #1
  402d72:	4806      	ldr	r0, [pc, #24]	; (402d8c <RTT_Handler+0x2c>)
  402d74:	4b06      	ldr	r3, [pc, #24]	; (402d90 <RTT_Handler+0x30>)
  402d76:	4798      	blx	r3
		xSemaphoreGiveFromISR(xSemaphoreRTT, 0);
  402d78:	2100      	movs	r1, #0
  402d7a:	4b06      	ldr	r3, [pc, #24]	; (402d94 <RTT_Handler+0x34>)
  402d7c:	6818      	ldr	r0, [r3, #0]
  402d7e:	4b06      	ldr	r3, [pc, #24]	; (402d98 <RTT_Handler+0x38>)
  402d80:	4798      	blx	r3
	}
}
  402d82:	e7f4      	b.n	402d6e <RTT_Handler+0xe>
  402d84:	400e1830 	.word	0x400e1830
  402d88:	00400229 	.word	0x00400229
  402d8c:	4000c000 	.word	0x4000c000
  402d90:	00400293 	.word	0x00400293
  402d94:	20400c14 	.word	0x20400c14
  402d98:	004017ed 	.word	0x004017ed

00402d9c <TC_init>:

void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq) {
  402d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  402da0:	b084      	sub	sp, #16
  402da2:	4605      	mov	r5, r0
  402da4:	460c      	mov	r4, r1
  402da6:	4616      	mov	r6, r2
  402da8:	461f      	mov	r7, r3
	uint32_t ul_div;
	uint32_t ul_tcclks;
	uint32_t ul_sysclk = sysclk_get_cpu_hz();

	/* Configura o PMC */
	pmc_enable_periph_clk(ID_TC);
  402daa:	4608      	mov	r0, r1
  402dac:	4b1f      	ldr	r3, [pc, #124]	; (402e2c <TC_init+0x90>)
  402dae:	4798      	blx	r3

	/** Configura o TC para operar em  freq hz e interrupçcão no RC compare */
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  402db0:	491f      	ldr	r1, [pc, #124]	; (402e30 <TC_init+0x94>)
  402db2:	9100      	str	r1, [sp, #0]
  402db4:	ab02      	add	r3, sp, #8
  402db6:	aa03      	add	r2, sp, #12
  402db8:	4638      	mov	r0, r7
  402dba:	f8df 8094 	ldr.w	r8, [pc, #148]	; 402e50 <TC_init+0xb4>
  402dbe:	47c0      	blx	r8

	/** ATIVA clock canal 0 TC */
	if(ul_tcclks == 0 )
  402dc0:	9b02      	ldr	r3, [sp, #8]
  402dc2:	b33b      	cbz	r3, 402e14 <TC_init+0x78>
		pmc_enable_pck(PMC_PCK_6);

	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  402dc4:	9a02      	ldr	r2, [sp, #8]
  402dc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  402dca:	4631      	mov	r1, r6
  402dcc:	4628      	mov	r0, r5
  402dce:	4b19      	ldr	r3, [pc, #100]	; (402e34 <TC_init+0x98>)
  402dd0:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  402dd2:	9b03      	ldr	r3, [sp, #12]
  402dd4:	4a16      	ldr	r2, [pc, #88]	; (402e30 <TC_init+0x94>)
  402dd6:	fbb2 f2f3 	udiv	r2, r2, r3
  402dda:	fbb2 f2f7 	udiv	r2, r2, r7
  402dde:	4631      	mov	r1, r6
  402de0:	4628      	mov	r0, r5
  402de2:	4b15      	ldr	r3, [pc, #84]	; (402e38 <TC_init+0x9c>)
  402de4:	4798      	blx	r3

	/* Configura NVIC*/
	NVIC_SetPriority(ID_TC, 4);
  402de6:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  402de8:	2b00      	cmp	r3, #0
  402dea:	db17      	blt.n	402e1c <TC_init+0x80>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402dec:	4a13      	ldr	r2, [pc, #76]	; (402e3c <TC_init+0xa0>)
  402dee:	2180      	movs	r1, #128	; 0x80
  402df0:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402df2:	095b      	lsrs	r3, r3, #5
  402df4:	f004 041f 	and.w	r4, r4, #31
  402df8:	2201      	movs	r2, #1
  402dfa:	fa02 f404 	lsl.w	r4, r2, r4
  402dfe:	4a10      	ldr	r2, [pc, #64]	; (402e40 <TC_init+0xa4>)
  402e00:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	NVIC_EnableIRQ((IRQn_Type) ID_TC);
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  402e04:	2210      	movs	r2, #16
  402e06:	4631      	mov	r1, r6
  402e08:	4628      	mov	r0, r5
  402e0a:	4b0e      	ldr	r3, [pc, #56]	; (402e44 <TC_init+0xa8>)
  402e0c:	4798      	blx	r3
}
  402e0e:	b004      	add	sp, #16
  402e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pmc_enable_pck(PMC_PCK_6);
  402e14:	2006      	movs	r0, #6
  402e16:	4b0c      	ldr	r3, [pc, #48]	; (402e48 <TC_init+0xac>)
  402e18:	4798      	blx	r3
  402e1a:	e7d3      	b.n	402dc4 <TC_init+0x28>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402e1c:	f004 010f 	and.w	r1, r4, #15
  402e20:	4a0a      	ldr	r2, [pc, #40]	; (402e4c <TC_init+0xb0>)
  402e22:	440a      	add	r2, r1
  402e24:	2180      	movs	r1, #128	; 0x80
  402e26:	7611      	strb	r1, [r2, #24]
  402e28:	e7e3      	b.n	402df2 <TC_init+0x56>
  402e2a:	bf00      	nop
  402e2c:	004009d1 	.word	0x004009d1
  402e30:	11e1a300 	.word	0x11e1a300
  402e34:	00400271 	.word	0x00400271
  402e38:	0040029b 	.word	0x0040029b
  402e3c:	e000e400 	.word	0xe000e400
  402e40:	e000e100 	.word	0xe000e100
  402e44:	004002a3 	.word	0x004002a3
  402e48:	00400a25 	.word	0x00400a25
  402e4c:	e000ecfc 	.word	0xe000ecfc
  402e50:	004002b3 	.word	0x004002b3

00402e54 <task_note>:
static void task_note(void *pvParameters) {
  402e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402e58:	b083      	sub	sp, #12
		if (xQueueReceive(xQueueNote, &notas, (TickType_t)500)) {
  402e5a:	4e25      	ldr	r6, [pc, #148]	; (402ef0 <task_note+0x9c>)
  402e5c:	4d25      	ldr	r5, [pc, #148]	; (402ef4 <task_note+0xa0>)
  402e5e:	2400      	movs	r4, #0
			TC_init(TC0, ID_TC1, 1, freq);
  402e60:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 402f18 <task_note+0xc4>
	rtt_sel_source(RTT, false);
  402e64:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 402f1c <task_note+0xc8>
		ul_previous_time = rtt_read_timer_value(RTT);
  402e68:	4f23      	ldr	r7, [pc, #140]	; (402ef8 <task_note+0xa4>)
  402e6a:	e01a      	b.n	402ea2 <task_note+0x4e>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  402e6c:	eb0b 0108 	add.w	r1, fp, r8
  402e70:	4648      	mov	r0, r9
  402e72:	4b22      	ldr	r3, [pc, #136]	; (402efc <task_note+0xa8>)
  402e74:	4798      	blx	r3
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  402e76:	4b22      	ldr	r3, [pc, #136]	; (402f00 <task_note+0xac>)
  402e78:	2208      	movs	r2, #8
  402e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  402e7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402e82:	2180      	movs	r1, #128	; 0x80
  402e84:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402e88:	601a      	str	r2, [r3, #0]
	rtt_enable_interrupt(RTT, rttIRQSource);
  402e8a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  402e8e:	4648      	mov	r0, r9
  402e90:	4b1c      	ldr	r3, [pc, #112]	; (402f04 <task_note+0xb0>)
  402e92:	4798      	blx	r3
			if (xSemaphoreTake(xSemaphoreRTT,portMAX_DELAY) == pdTRUE){
  402e94:	4623      	mov	r3, r4
  402e96:	f04f 32ff 	mov.w	r2, #4294967295
  402e9a:	4621      	mov	r1, r4
  402e9c:	481a      	ldr	r0, [pc, #104]	; (402f08 <task_note+0xb4>)
  402e9e:	6800      	ldr	r0, [r0, #0]
  402ea0:	47a8      	blx	r5
		if (xQueueReceive(xQueueNote, &notas, (TickType_t)500)) {
  402ea2:	4623      	mov	r3, r4
  402ea4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  402ea8:	4669      	mov	r1, sp
  402eaa:	6830      	ldr	r0, [r6, #0]
  402eac:	47a8      	blx	r5
  402eae:	2800      	cmp	r0, #0
  402eb0:	d0f7      	beq.n	402ea2 <task_note+0x4e>
			tempo = notas.duration;
  402eb2:	f8dd b004 	ldr.w	fp, [sp, #4]
			TC_init(TC0, ID_TC1, 1, freq);
  402eb6:	9b00      	ldr	r3, [sp, #0]
  402eb8:	009b      	lsls	r3, r3, #2
  402eba:	2201      	movs	r2, #1
  402ebc:	2118      	movs	r1, #24
  402ebe:	4650      	mov	r0, sl
  402ec0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 402f20 <task_note+0xcc>
  402ec4:	47c0      	blx	r8
			tc_start(TC0, 1);
  402ec6:	2101      	movs	r1, #1
  402ec8:	4650      	mov	r0, sl
  402eca:	4b10      	ldr	r3, [pc, #64]	; (402f0c <task_note+0xb8>)
  402ecc:	4798      	blx	r3
	rtt_sel_source(RTT, false);
  402ece:	4621      	mov	r1, r4
  402ed0:	4648      	mov	r0, r9
  402ed2:	4b0f      	ldr	r3, [pc, #60]	; (402f10 <task_note+0xbc>)
  402ed4:	4798      	blx	r3
	rtt_init(RTT, pllPreScale);
  402ed6:	2120      	movs	r1, #32
  402ed8:	4648      	mov	r0, r9
  402eda:	4b0e      	ldr	r3, [pc, #56]	; (402f14 <task_note+0xc0>)
  402edc:	4798      	blx	r3
		ul_previous_time = rtt_read_timer_value(RTT);
  402ede:	4648      	mov	r0, r9
  402ee0:	47b8      	blx	r7
  402ee2:	4680      	mov	r8, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  402ee4:	4648      	mov	r0, r9
  402ee6:	47b8      	blx	r7
  402ee8:	4580      	cmp	r8, r0
  402eea:	d0fb      	beq.n	402ee4 <task_note+0x90>
  402eec:	e7be      	b.n	402e6c <task_note+0x18>
  402eee:	bf00      	nop
  402ef0:	20400c1c 	.word	0x20400c1c
  402ef4:	004018cd 	.word	0x004018cd
  402ef8:	00400215 	.word	0x00400215
  402efc:	0040022d 	.word	0x0040022d
  402f00:	e000e100 	.word	0xe000e100
  402f04:	004001ed 	.word	0x004001ed
  402f08:	20400c14 	.word	0x20400c14
  402f0c:	0040028b 	.word	0x0040028b
  402f10:	004001c1 	.word	0x004001c1
  402f14:	004001ad 	.word	0x004001ad
  402f18:	4000c000 	.word	0x4000c000
  402f1c:	400e1830 	.word	0x400e1830
  402f20:	00402d9d 	.word	0x00402d9d

00402f24 <pin_toggle>:

	/* Specify that stdout should not be buffered. */
	setbuf(stdout, NULL);
}

void pin_toggle(Pio *pio, uint32_t mask) {
  402f24:	b538      	push	{r3, r4, r5, lr}
  402f26:	4604      	mov	r4, r0
  402f28:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  402f2a:	4b06      	ldr	r3, [pc, #24]	; (402f44 <pin_toggle+0x20>)
  402f2c:	4798      	blx	r3
  402f2e:	b920      	cbnz	r0, 402f3a <pin_toggle+0x16>
	pio_clear(pio, mask);
	else
	pio_set(pio,mask);
  402f30:	4629      	mov	r1, r5
  402f32:	4620      	mov	r0, r4
  402f34:	4b04      	ldr	r3, [pc, #16]	; (402f48 <pin_toggle+0x24>)
  402f36:	4798      	blx	r3
  402f38:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  402f3a:	4629      	mov	r1, r5
  402f3c:	4620      	mov	r0, r4
  402f3e:	4b03      	ldr	r3, [pc, #12]	; (402f4c <pin_toggle+0x28>)
  402f40:	4798      	blx	r3
  402f42:	bd38      	pop	{r3, r4, r5, pc}
  402f44:	00400741 	.word	0x00400741
  402f48:	004005b9 	.word	0x004005b9
  402f4c:	004005bd 	.word	0x004005bd

00402f50 <TC1_Handler>:
void TC1_Handler(void) {
  402f50:	b500      	push	{lr}
  402f52:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  402f54:	2101      	movs	r1, #1
  402f56:	4806      	ldr	r0, [pc, #24]	; (402f70 <TC1_Handler+0x20>)
  402f58:	4b06      	ldr	r3, [pc, #24]	; (402f74 <TC1_Handler+0x24>)
  402f5a:	4798      	blx	r3
  402f5c:	9001      	str	r0, [sp, #4]
	pin_toggle(BUZZER, BUZZER_IDX_MASK);
  402f5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402f62:	4805      	ldr	r0, [pc, #20]	; (402f78 <TC1_Handler+0x28>)
  402f64:	4b05      	ldr	r3, [pc, #20]	; (402f7c <TC1_Handler+0x2c>)
  402f66:	4798      	blx	r3
}
  402f68:	b003      	add	sp, #12
  402f6a:	f85d fb04 	ldr.w	pc, [sp], #4
  402f6e:	bf00      	nop
  402f70:	4000c000 	.word	0x4000c000
  402f74:	004002ab 	.word	0x004002ab
  402f78:	400e1400 	.word	0x400e1400
  402f7c:	00402f25 	.word	0x00402f25

00402f80 <io_init>:
}

void io_init(void){
  402f80:	b5f0      	push	{r4, r5, r6, r7, lr}
  402f82:	b083      	sub	sp, #12
	pmc_enable_periph_clk(BUT_1_PIO_ID);
  402f84:	2010      	movs	r0, #16
  402f86:	4d1b      	ldr	r5, [pc, #108]	; (402ff4 <io_init+0x74>)
  402f88:	47a8      	blx	r5
	pio_configure(BUT_1_PIO, PIO_INPUT, BUT_1_IDX_MASK, PIO_PULLUP| PIO_DEBOUNCE);
  402f8a:	4c1b      	ldr	r4, [pc, #108]	; (402ff8 <io_init+0x78>)
  402f8c:	2309      	movs	r3, #9
  402f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402f92:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402f96:	4620      	mov	r0, r4
  402f98:	4e18      	ldr	r6, [pc, #96]	; (402ffc <io_init+0x7c>)
  402f9a:	47b0      	blx	r6
	pio_handler_set(BUT_1_PIO, BUT_1_PIO_ID, BUT_1_IDX_MASK, PIO_IT_FALL_EDGE,
  402f9c:	4b18      	ldr	r3, [pc, #96]	; (403000 <io_init+0x80>)
  402f9e:	9300      	str	r3, [sp, #0]
  402fa0:	2350      	movs	r3, #80	; 0x50
  402fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402fa6:	2110      	movs	r1, #16
  402fa8:	4620      	mov	r0, r4
  402faa:	4f16      	ldr	r7, [pc, #88]	; (403004 <io_init+0x84>)
  402fac:	47b8      	blx	r7
	but1_callback);
	pio_enable_interrupt(BUT_1_PIO, BUT_1_IDX_MASK);
  402fae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  402fb2:	4620      	mov	r0, r4
  402fb4:	4b14      	ldr	r3, [pc, #80]	; (403008 <io_init+0x88>)
  402fb6:	4798      	blx	r3
	pio_get_interrupt_status(BUT_1_PIO);
  402fb8:	4620      	mov	r0, r4
  402fba:	4b14      	ldr	r3, [pc, #80]	; (40300c <io_init+0x8c>)
  402fbc:	4798      	blx	r3
  402fbe:	4b14      	ldr	r3, [pc, #80]	; (403010 <io_init+0x90>)
  402fc0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  402fc4:	601a      	str	r2, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402fc6:	2280      	movs	r2, #128	; 0x80
  402fc8:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
	NVIC_EnableIRQ(BUT_1_PIO_ID);
	NVIC_SetPriority(BUT_1_PIO_ID, 4);
	
	pmc_enable_periph_clk(BUZZER_ID);
  402fcc:	2010      	movs	r0, #16
  402fce:	47a8      	blx	r5
	pio_set_output(BUZZER,BUZZER_IDX_MASK,0,0,0);
  402fd0:	2500      	movs	r5, #0
  402fd2:	9500      	str	r5, [sp, #0]
  402fd4:	462b      	mov	r3, r5
  402fd6:	462a      	mov	r2, r5
  402fd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  402fdc:	4620      	mov	r0, r4
  402fde:	4f0d      	ldr	r7, [pc, #52]	; (403014 <io_init+0x94>)
  402fe0:	47b8      	blx	r7
	pio_configure(BUZZER, PIO_OUTPUT_0, BUZZER_IDX_MASK, PIO_DEFAULT);
  402fe2:	462b      	mov	r3, r5
  402fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  402fe8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402fec:	4620      	mov	r0, r4
  402fee:	47b0      	blx	r6
}
  402ff0:	b003      	add	sp, #12
  402ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  402ff4:	004009d1 	.word	0x004009d1
  402ff8:	400e1400 	.word	0x400e1400
  402ffc:	004006b1 	.word	0x004006b1
  403000:	00402ac5 	.word	0x00402ac5
  403004:	004007dd 	.word	0x004007dd
  403008:	0040077f 	.word	0x0040077f
  40300c:	00400783 	.word	0x00400783
  403010:	e000e100 	.word	0xe000e100
  403014:	00400689 	.word	0x00400689

00403018 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/
int main(void) {
  403018:	b500      	push	{lr}
  40301a:	b08b      	sub	sp, #44	; 0x2c
	sysclk_init();
  40301c:	4b43      	ldr	r3, [pc, #268]	; (40312c <main+0x114>)
  40301e:	4798      	blx	r3
	board_init();
  403020:	4b43      	ldr	r3, [pc, #268]	; (403130 <main+0x118>)
  403022:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403024:	4d43      	ldr	r5, [pc, #268]	; (403134 <main+0x11c>)
  403026:	4b44      	ldr	r3, [pc, #272]	; (403138 <main+0x120>)
  403028:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  40302a:	4a44      	ldr	r2, [pc, #272]	; (40313c <main+0x124>)
  40302c:	4b44      	ldr	r3, [pc, #272]	; (403140 <main+0x128>)
  40302e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403030:	4a44      	ldr	r2, [pc, #272]	; (403144 <main+0x12c>)
  403032:	4b45      	ldr	r3, [pc, #276]	; (403148 <main+0x130>)
  403034:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403036:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  40303a:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  40303c:	23c0      	movs	r3, #192	; 0xc0
  40303e:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  403040:	f44f 6300 	mov.w	r3, #2048	; 0x800
  403044:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  403046:	2400      	movs	r4, #0
  403048:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40304a:	9408      	str	r4, [sp, #32]
  40304c:	200e      	movs	r0, #14
  40304e:	4b3f      	ldr	r3, [pc, #252]	; (40314c <main+0x134>)
  403050:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  403052:	4a3f      	ldr	r2, [pc, #252]	; (403150 <main+0x138>)
  403054:	a904      	add	r1, sp, #16
  403056:	4628      	mov	r0, r5
  403058:	4b3e      	ldr	r3, [pc, #248]	; (403154 <main+0x13c>)
  40305a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40305c:	4628      	mov	r0, r5
  40305e:	4b3e      	ldr	r3, [pc, #248]	; (403158 <main+0x140>)
  403060:	4798      	blx	r3
		usart_enable_rx(p_usart);
  403062:	4628      	mov	r0, r5
  403064:	4b3d      	ldr	r3, [pc, #244]	; (40315c <main+0x144>)
  403066:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  403068:	4e3d      	ldr	r6, [pc, #244]	; (403160 <main+0x148>)
  40306a:	6833      	ldr	r3, [r6, #0]
  40306c:	4621      	mov	r1, r4
  40306e:	6898      	ldr	r0, [r3, #8]
  403070:	4d3c      	ldr	r5, [pc, #240]	; (403164 <main+0x14c>)
  403072:	47a8      	blx	r5
	setbuf(stdin, NULL);
  403074:	6833      	ldr	r3, [r6, #0]
  403076:	4621      	mov	r1, r4
  403078:	6858      	ldr	r0, [r3, #4]
  40307a:	47a8      	blx	r5
	setbuf(stdout, NULL);
  40307c:	6833      	ldr	r3, [r6, #0]
  40307e:	4621      	mov	r1, r4
  403080:	6898      	ldr	r0, [r3, #8]
  403082:	47a8      	blx	r5
	configure_console();
	io_init();
  403084:	4b38      	ldr	r3, [pc, #224]	; (403168 <main+0x150>)
  403086:	4798      	blx	r3
	
	WDT->WDT_MR = WDT_MR_WDDIS;
  403088:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40308c:	4b37      	ldr	r3, [pc, #220]	; (40316c <main+0x154>)
  40308e:	605a      	str	r2, [r3, #4]
	
	xQueueNote= xQueueCreate(32, sizeof(Note));
  403090:	4622      	mov	r2, r4
  403092:	2108      	movs	r1, #8
  403094:	2020      	movs	r0, #32
  403096:	4d36      	ldr	r5, [pc, #216]	; (403170 <main+0x158>)
  403098:	47a8      	blx	r5
  40309a:	4b36      	ldr	r3, [pc, #216]	; (403174 <main+0x15c>)
  40309c:	6018      	str	r0, [r3, #0]
	xSemaphoreRTT = xSemaphoreCreateBinary();
  40309e:	2203      	movs	r2, #3
  4030a0:	4621      	mov	r1, r4
  4030a2:	2001      	movs	r0, #1
  4030a4:	47a8      	blx	r5
  4030a6:	4e34      	ldr	r6, [pc, #208]	; (403178 <main+0x160>)
  4030a8:	6030      	str	r0, [r6, #0]
	xSemaphoreStart = xSemaphoreCreateBinary();
  4030aa:	2203      	movs	r2, #3
  4030ac:	4621      	mov	r1, r4
  4030ae:	2001      	movs	r0, #1
  4030b0:	47a8      	blx	r5
  4030b2:	4b32      	ldr	r3, [pc, #200]	; (40317c <main+0x164>)
  4030b4:	6018      	str	r0, [r3, #0]
	
	if (xSemaphoreRTT == NULL) {
  4030b6:	6833      	ldr	r3, [r6, #0]
  4030b8:	2b00      	cmp	r3, #0
  4030ba:	d02a      	beq.n	403112 <main+0xfa>
		printf("Falha em criar xSemaphore \n");
	}
	
	if (xSemaphoreStart == NULL) {
  4030bc:	4b2f      	ldr	r3, [pc, #188]	; (40317c <main+0x164>)
  4030be:	681b      	ldr	r3, [r3, #0]
  4030c0:	2b00      	cmp	r3, #0
  4030c2:	d02a      	beq.n	40311a <main+0x102>
		printf("Falha em criar xSemaphore \n");
	}
	
	if (xQueueNote == NULL) {
  4030c4:	4b2b      	ldr	r3, [pc, #172]	; (403174 <main+0x15c>)
  4030c6:	681b      	ldr	r3, [r3, #0]
  4030c8:	2b00      	cmp	r3, #0
  4030ca:	d02a      	beq.n	403122 <main+0x10a>
		printf("Falha em criar xQueue Note \n");
	}

	/* Create task to control oled */
	if (xTaskCreate(task_music, "music", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4030cc:	2300      	movs	r3, #0
  4030ce:	9303      	str	r3, [sp, #12]
  4030d0:	9302      	str	r3, [sp, #8]
  4030d2:	9301      	str	r3, [sp, #4]
  4030d4:	9300      	str	r3, [sp, #0]
  4030d6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4030da:	4929      	ldr	r1, [pc, #164]	; (403180 <main+0x168>)
  4030dc:	4829      	ldr	r0, [pc, #164]	; (403184 <main+0x16c>)
  4030de:	4c2a      	ldr	r4, [pc, #168]	; (403188 <main+0x170>)
  4030e0:	47a0      	blx	r4
  4030e2:	2801      	cmp	r0, #1
  4030e4:	d002      	beq.n	4030ec <main+0xd4>
		printf("Failed to create game task\r\n");
  4030e6:	4829      	ldr	r0, [pc, #164]	; (40318c <main+0x174>)
  4030e8:	4b29      	ldr	r3, [pc, #164]	; (403190 <main+0x178>)
  4030ea:	4798      	blx	r3
	}
	
	if (xTaskCreate(task_note, "note", TASK_OLED_STACK_SIZE, NULL, TASK_OLED_STACK_PRIORITY, NULL) != pdPASS) {
  4030ec:	2300      	movs	r3, #0
  4030ee:	9303      	str	r3, [sp, #12]
  4030f0:	9302      	str	r3, [sp, #8]
  4030f2:	9301      	str	r3, [sp, #4]
  4030f4:	9300      	str	r3, [sp, #0]
  4030f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
  4030fa:	4926      	ldr	r1, [pc, #152]	; (403194 <main+0x17c>)
  4030fc:	4826      	ldr	r0, [pc, #152]	; (403198 <main+0x180>)
  4030fe:	4c22      	ldr	r4, [pc, #136]	; (403188 <main+0x170>)
  403100:	47a0      	blx	r4
  403102:	2801      	cmp	r0, #1
  403104:	d002      	beq.n	40310c <main+0xf4>
		printf("Failed to create game task\r\n");
  403106:	4821      	ldr	r0, [pc, #132]	; (40318c <main+0x174>)
  403108:	4b21      	ldr	r3, [pc, #132]	; (403190 <main+0x178>)
  40310a:	4798      	blx	r3
	}

	vTaskStartScheduler();
  40310c:	4b23      	ldr	r3, [pc, #140]	; (40319c <main+0x184>)
  40310e:	4798      	blx	r3
  403110:	e7fe      	b.n	403110 <main+0xf8>
		printf("Falha em criar xSemaphore \n");
  403112:	4823      	ldr	r0, [pc, #140]	; (4031a0 <main+0x188>)
  403114:	4b1e      	ldr	r3, [pc, #120]	; (403190 <main+0x178>)
  403116:	4798      	blx	r3
  403118:	e7d0      	b.n	4030bc <main+0xa4>
		printf("Falha em criar xSemaphore \n");
  40311a:	4821      	ldr	r0, [pc, #132]	; (4031a0 <main+0x188>)
  40311c:	4b1c      	ldr	r3, [pc, #112]	; (403190 <main+0x178>)
  40311e:	4798      	blx	r3
  403120:	e7d0      	b.n	4030c4 <main+0xac>
		printf("Falha em criar xQueue Note \n");
  403122:	4820      	ldr	r0, [pc, #128]	; (4031a4 <main+0x18c>)
  403124:	4b1a      	ldr	r3, [pc, #104]	; (403190 <main+0x178>)
  403126:	4798      	blx	r3
  403128:	e7d0      	b.n	4030cc <main+0xb4>
  40312a:	bf00      	nop
  40312c:	00400325 	.word	0x00400325
  403130:	00400421 	.word	0x00400421
  403134:	40028000 	.word	0x40028000
  403138:	20400bd0 	.word	0x20400bd0
  40313c:	00402c5d 	.word	0x00402c5d
  403140:	20400bcc 	.word	0x20400bcc
  403144:	00402b81 	.word	0x00402b81
  403148:	20400bc8 	.word	0x20400bc8
  40314c:	004009d1 	.word	0x004009d1
  403150:	08f0d180 	.word	0x08f0d180
  403154:	00400ae1 	.word	0x00400ae1
  403158:	00400b35 	.word	0x00400b35
  40315c:	00400b3b 	.word	0x00400b3b
  403160:	2040000c 	.word	0x2040000c
  403164:	00404191 	.word	0x00404191
  403168:	00402f81 	.word	0x00402f81
  40316c:	400e1850 	.word	0x400e1850
  403170:	0040148d 	.word	0x0040148d
  403174:	20400c1c 	.word	0x20400c1c
  403178:	20400c14 	.word	0x20400c14
  40317c:	20400c18 	.word	0x20400c18
  403180:	0040696c 	.word	0x0040696c
  403184:	00402add 	.word	0x00402add
  403188:	00401bad 	.word	0x00401bad
  40318c:	00406974 	.word	0x00406974
  403190:	004039dd 	.word	0x004039dd
  403194:	00406994 	.word	0x00406994
  403198:	00402e55 	.word	0x00402e55
  40319c:	00401de1 	.word	0x00401de1
  4031a0:	00406930 	.word	0x00406930
  4031a4:	0040694c 	.word	0x0040694c

004031a8 <__aeabi_drsub>:
  4031a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4031ac:	e002      	b.n	4031b4 <__adddf3>
  4031ae:	bf00      	nop

004031b0 <__aeabi_dsub>:
  4031b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004031b4 <__adddf3>:
  4031b4:	b530      	push	{r4, r5, lr}
  4031b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4031ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4031be:	ea94 0f05 	teq	r4, r5
  4031c2:	bf08      	it	eq
  4031c4:	ea90 0f02 	teqeq	r0, r2
  4031c8:	bf1f      	itttt	ne
  4031ca:	ea54 0c00 	orrsne.w	ip, r4, r0
  4031ce:	ea55 0c02 	orrsne.w	ip, r5, r2
  4031d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4031d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4031da:	f000 80e2 	beq.w	4033a2 <__adddf3+0x1ee>
  4031de:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4031e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4031e6:	bfb8      	it	lt
  4031e8:	426d      	neglt	r5, r5
  4031ea:	dd0c      	ble.n	403206 <__adddf3+0x52>
  4031ec:	442c      	add	r4, r5
  4031ee:	ea80 0202 	eor.w	r2, r0, r2
  4031f2:	ea81 0303 	eor.w	r3, r1, r3
  4031f6:	ea82 0000 	eor.w	r0, r2, r0
  4031fa:	ea83 0101 	eor.w	r1, r3, r1
  4031fe:	ea80 0202 	eor.w	r2, r0, r2
  403202:	ea81 0303 	eor.w	r3, r1, r3
  403206:	2d36      	cmp	r5, #54	; 0x36
  403208:	bf88      	it	hi
  40320a:	bd30      	pophi	{r4, r5, pc}
  40320c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403210:	ea4f 3101 	mov.w	r1, r1, lsl #12
  403214:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  403218:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  40321c:	d002      	beq.n	403224 <__adddf3+0x70>
  40321e:	4240      	negs	r0, r0
  403220:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  403224:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  403228:	ea4f 3303 	mov.w	r3, r3, lsl #12
  40322c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  403230:	d002      	beq.n	403238 <__adddf3+0x84>
  403232:	4252      	negs	r2, r2
  403234:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  403238:	ea94 0f05 	teq	r4, r5
  40323c:	f000 80a7 	beq.w	40338e <__adddf3+0x1da>
  403240:	f1a4 0401 	sub.w	r4, r4, #1
  403244:	f1d5 0e20 	rsbs	lr, r5, #32
  403248:	db0d      	blt.n	403266 <__adddf3+0xb2>
  40324a:	fa02 fc0e 	lsl.w	ip, r2, lr
  40324e:	fa22 f205 	lsr.w	r2, r2, r5
  403252:	1880      	adds	r0, r0, r2
  403254:	f141 0100 	adc.w	r1, r1, #0
  403258:	fa03 f20e 	lsl.w	r2, r3, lr
  40325c:	1880      	adds	r0, r0, r2
  40325e:	fa43 f305 	asr.w	r3, r3, r5
  403262:	4159      	adcs	r1, r3
  403264:	e00e      	b.n	403284 <__adddf3+0xd0>
  403266:	f1a5 0520 	sub.w	r5, r5, #32
  40326a:	f10e 0e20 	add.w	lr, lr, #32
  40326e:	2a01      	cmp	r2, #1
  403270:	fa03 fc0e 	lsl.w	ip, r3, lr
  403274:	bf28      	it	cs
  403276:	f04c 0c02 	orrcs.w	ip, ip, #2
  40327a:	fa43 f305 	asr.w	r3, r3, r5
  40327e:	18c0      	adds	r0, r0, r3
  403280:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  403284:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  403288:	d507      	bpl.n	40329a <__adddf3+0xe6>
  40328a:	f04f 0e00 	mov.w	lr, #0
  40328e:	f1dc 0c00 	rsbs	ip, ip, #0
  403292:	eb7e 0000 	sbcs.w	r0, lr, r0
  403296:	eb6e 0101 	sbc.w	r1, lr, r1
  40329a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  40329e:	d31b      	bcc.n	4032d8 <__adddf3+0x124>
  4032a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4032a4:	d30c      	bcc.n	4032c0 <__adddf3+0x10c>
  4032a6:	0849      	lsrs	r1, r1, #1
  4032a8:	ea5f 0030 	movs.w	r0, r0, rrx
  4032ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4032b0:	f104 0401 	add.w	r4, r4, #1
  4032b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4032b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4032bc:	f080 809a 	bcs.w	4033f4 <__adddf3+0x240>
  4032c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4032c4:	bf08      	it	eq
  4032c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4032ca:	f150 0000 	adcs.w	r0, r0, #0
  4032ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4032d2:	ea41 0105 	orr.w	r1, r1, r5
  4032d6:	bd30      	pop	{r4, r5, pc}
  4032d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4032dc:	4140      	adcs	r0, r0
  4032de:	eb41 0101 	adc.w	r1, r1, r1
  4032e2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4032e6:	f1a4 0401 	sub.w	r4, r4, #1
  4032ea:	d1e9      	bne.n	4032c0 <__adddf3+0x10c>
  4032ec:	f091 0f00 	teq	r1, #0
  4032f0:	bf04      	itt	eq
  4032f2:	4601      	moveq	r1, r0
  4032f4:	2000      	moveq	r0, #0
  4032f6:	fab1 f381 	clz	r3, r1
  4032fa:	bf08      	it	eq
  4032fc:	3320      	addeq	r3, #32
  4032fe:	f1a3 030b 	sub.w	r3, r3, #11
  403302:	f1b3 0220 	subs.w	r2, r3, #32
  403306:	da0c      	bge.n	403322 <__adddf3+0x16e>
  403308:	320c      	adds	r2, #12
  40330a:	dd08      	ble.n	40331e <__adddf3+0x16a>
  40330c:	f102 0c14 	add.w	ip, r2, #20
  403310:	f1c2 020c 	rsb	r2, r2, #12
  403314:	fa01 f00c 	lsl.w	r0, r1, ip
  403318:	fa21 f102 	lsr.w	r1, r1, r2
  40331c:	e00c      	b.n	403338 <__adddf3+0x184>
  40331e:	f102 0214 	add.w	r2, r2, #20
  403322:	bfd8      	it	le
  403324:	f1c2 0c20 	rsble	ip, r2, #32
  403328:	fa01 f102 	lsl.w	r1, r1, r2
  40332c:	fa20 fc0c 	lsr.w	ip, r0, ip
  403330:	bfdc      	itt	le
  403332:	ea41 010c 	orrle.w	r1, r1, ip
  403336:	4090      	lslle	r0, r2
  403338:	1ae4      	subs	r4, r4, r3
  40333a:	bfa2      	ittt	ge
  40333c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  403340:	4329      	orrge	r1, r5
  403342:	bd30      	popge	{r4, r5, pc}
  403344:	ea6f 0404 	mvn.w	r4, r4
  403348:	3c1f      	subs	r4, #31
  40334a:	da1c      	bge.n	403386 <__adddf3+0x1d2>
  40334c:	340c      	adds	r4, #12
  40334e:	dc0e      	bgt.n	40336e <__adddf3+0x1ba>
  403350:	f104 0414 	add.w	r4, r4, #20
  403354:	f1c4 0220 	rsb	r2, r4, #32
  403358:	fa20 f004 	lsr.w	r0, r0, r4
  40335c:	fa01 f302 	lsl.w	r3, r1, r2
  403360:	ea40 0003 	orr.w	r0, r0, r3
  403364:	fa21 f304 	lsr.w	r3, r1, r4
  403368:	ea45 0103 	orr.w	r1, r5, r3
  40336c:	bd30      	pop	{r4, r5, pc}
  40336e:	f1c4 040c 	rsb	r4, r4, #12
  403372:	f1c4 0220 	rsb	r2, r4, #32
  403376:	fa20 f002 	lsr.w	r0, r0, r2
  40337a:	fa01 f304 	lsl.w	r3, r1, r4
  40337e:	ea40 0003 	orr.w	r0, r0, r3
  403382:	4629      	mov	r1, r5
  403384:	bd30      	pop	{r4, r5, pc}
  403386:	fa21 f004 	lsr.w	r0, r1, r4
  40338a:	4629      	mov	r1, r5
  40338c:	bd30      	pop	{r4, r5, pc}
  40338e:	f094 0f00 	teq	r4, #0
  403392:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  403396:	bf06      	itte	eq
  403398:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  40339c:	3401      	addeq	r4, #1
  40339e:	3d01      	subne	r5, #1
  4033a0:	e74e      	b.n	403240 <__adddf3+0x8c>
  4033a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4033a6:	bf18      	it	ne
  4033a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4033ac:	d029      	beq.n	403402 <__adddf3+0x24e>
  4033ae:	ea94 0f05 	teq	r4, r5
  4033b2:	bf08      	it	eq
  4033b4:	ea90 0f02 	teqeq	r0, r2
  4033b8:	d005      	beq.n	4033c6 <__adddf3+0x212>
  4033ba:	ea54 0c00 	orrs.w	ip, r4, r0
  4033be:	bf04      	itt	eq
  4033c0:	4619      	moveq	r1, r3
  4033c2:	4610      	moveq	r0, r2
  4033c4:	bd30      	pop	{r4, r5, pc}
  4033c6:	ea91 0f03 	teq	r1, r3
  4033ca:	bf1e      	ittt	ne
  4033cc:	2100      	movne	r1, #0
  4033ce:	2000      	movne	r0, #0
  4033d0:	bd30      	popne	{r4, r5, pc}
  4033d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4033d6:	d105      	bne.n	4033e4 <__adddf3+0x230>
  4033d8:	0040      	lsls	r0, r0, #1
  4033da:	4149      	adcs	r1, r1
  4033dc:	bf28      	it	cs
  4033de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4033e2:	bd30      	pop	{r4, r5, pc}
  4033e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4033e8:	bf3c      	itt	cc
  4033ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4033ee:	bd30      	popcc	{r4, r5, pc}
  4033f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4033f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  4033f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4033fc:	f04f 0000 	mov.w	r0, #0
  403400:	bd30      	pop	{r4, r5, pc}
  403402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  403406:	bf1a      	itte	ne
  403408:	4619      	movne	r1, r3
  40340a:	4610      	movne	r0, r2
  40340c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  403410:	bf1c      	itt	ne
  403412:	460b      	movne	r3, r1
  403414:	4602      	movne	r2, r0
  403416:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  40341a:	bf06      	itte	eq
  40341c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  403420:	ea91 0f03 	teqeq	r1, r3
  403424:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  403428:	bd30      	pop	{r4, r5, pc}
  40342a:	bf00      	nop

0040342c <__aeabi_ui2d>:
  40342c:	f090 0f00 	teq	r0, #0
  403430:	bf04      	itt	eq
  403432:	2100      	moveq	r1, #0
  403434:	4770      	bxeq	lr
  403436:	b530      	push	{r4, r5, lr}
  403438:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40343c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403440:	f04f 0500 	mov.w	r5, #0
  403444:	f04f 0100 	mov.w	r1, #0
  403448:	e750      	b.n	4032ec <__adddf3+0x138>
  40344a:	bf00      	nop

0040344c <__aeabi_i2d>:
  40344c:	f090 0f00 	teq	r0, #0
  403450:	bf04      	itt	eq
  403452:	2100      	moveq	r1, #0
  403454:	4770      	bxeq	lr
  403456:	b530      	push	{r4, r5, lr}
  403458:	f44f 6480 	mov.w	r4, #1024	; 0x400
  40345c:	f104 0432 	add.w	r4, r4, #50	; 0x32
  403460:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  403464:	bf48      	it	mi
  403466:	4240      	negmi	r0, r0
  403468:	f04f 0100 	mov.w	r1, #0
  40346c:	e73e      	b.n	4032ec <__adddf3+0x138>
  40346e:	bf00      	nop

00403470 <__aeabi_f2d>:
  403470:	0042      	lsls	r2, r0, #1
  403472:	ea4f 01e2 	mov.w	r1, r2, asr #3
  403476:	ea4f 0131 	mov.w	r1, r1, rrx
  40347a:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40347e:	bf1f      	itttt	ne
  403480:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  403484:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403488:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  40348c:	4770      	bxne	lr
  40348e:	f092 0f00 	teq	r2, #0
  403492:	bf14      	ite	ne
  403494:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  403498:	4770      	bxeq	lr
  40349a:	b530      	push	{r4, r5, lr}
  40349c:	f44f 7460 	mov.w	r4, #896	; 0x380
  4034a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4034a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4034a8:	e720      	b.n	4032ec <__adddf3+0x138>
  4034aa:	bf00      	nop

004034ac <__aeabi_ul2d>:
  4034ac:	ea50 0201 	orrs.w	r2, r0, r1
  4034b0:	bf08      	it	eq
  4034b2:	4770      	bxeq	lr
  4034b4:	b530      	push	{r4, r5, lr}
  4034b6:	f04f 0500 	mov.w	r5, #0
  4034ba:	e00a      	b.n	4034d2 <__aeabi_l2d+0x16>

004034bc <__aeabi_l2d>:
  4034bc:	ea50 0201 	orrs.w	r2, r0, r1
  4034c0:	bf08      	it	eq
  4034c2:	4770      	bxeq	lr
  4034c4:	b530      	push	{r4, r5, lr}
  4034c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4034ca:	d502      	bpl.n	4034d2 <__aeabi_l2d+0x16>
  4034cc:	4240      	negs	r0, r0
  4034ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4034d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4034d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4034da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4034de:	f43f aedc 	beq.w	40329a <__adddf3+0xe6>
  4034e2:	f04f 0203 	mov.w	r2, #3
  4034e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4034ea:	bf18      	it	ne
  4034ec:	3203      	addne	r2, #3
  4034ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4034f2:	bf18      	it	ne
  4034f4:	3203      	addne	r2, #3
  4034f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  4034fa:	f1c2 0320 	rsb	r3, r2, #32
  4034fe:	fa00 fc03 	lsl.w	ip, r0, r3
  403502:	fa20 f002 	lsr.w	r0, r0, r2
  403506:	fa01 fe03 	lsl.w	lr, r1, r3
  40350a:	ea40 000e 	orr.w	r0, r0, lr
  40350e:	fa21 f102 	lsr.w	r1, r1, r2
  403512:	4414      	add	r4, r2
  403514:	e6c1      	b.n	40329a <__adddf3+0xe6>
  403516:	bf00      	nop

00403518 <__aeabi_dmul>:
  403518:	b570      	push	{r4, r5, r6, lr}
  40351a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40351e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  403526:	bf1d      	ittte	ne
  403528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40352c:	ea94 0f0c 	teqne	r4, ip
  403530:	ea95 0f0c 	teqne	r5, ip
  403534:	f000 f8de 	bleq	4036f4 <__aeabi_dmul+0x1dc>
  403538:	442c      	add	r4, r5
  40353a:	ea81 0603 	eor.w	r6, r1, r3
  40353e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  403542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  403546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  40354a:	bf18      	it	ne
  40354c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  403550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  403554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  403558:	d038      	beq.n	4035cc <__aeabi_dmul+0xb4>
  40355a:	fba0 ce02 	umull	ip, lr, r0, r2
  40355e:	f04f 0500 	mov.w	r5, #0
  403562:	fbe1 e502 	umlal	lr, r5, r1, r2
  403566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  40356a:	fbe0 e503 	umlal	lr, r5, r0, r3
  40356e:	f04f 0600 	mov.w	r6, #0
  403572:	fbe1 5603 	umlal	r5, r6, r1, r3
  403576:	f09c 0f00 	teq	ip, #0
  40357a:	bf18      	it	ne
  40357c:	f04e 0e01 	orrne.w	lr, lr, #1
  403580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  403584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  403588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  40358c:	d204      	bcs.n	403598 <__aeabi_dmul+0x80>
  40358e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  403592:	416d      	adcs	r5, r5
  403594:	eb46 0606 	adc.w	r6, r6, r6
  403598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  40359c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4035a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4035a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4035a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4035ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4035b0:	bf88      	it	hi
  4035b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4035b6:	d81e      	bhi.n	4035f6 <__aeabi_dmul+0xde>
  4035b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4035bc:	bf08      	it	eq
  4035be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4035c2:	f150 0000 	adcs.w	r0, r0, #0
  4035c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4035ca:	bd70      	pop	{r4, r5, r6, pc}
  4035cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4035d0:	ea46 0101 	orr.w	r1, r6, r1
  4035d4:	ea40 0002 	orr.w	r0, r0, r2
  4035d8:	ea81 0103 	eor.w	r1, r1, r3
  4035dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4035e0:	bfc2      	ittt	gt
  4035e2:	ebd4 050c 	rsbsgt	r5, r4, ip
  4035e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4035ea:	bd70      	popgt	{r4, r5, r6, pc}
  4035ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4035f0:	f04f 0e00 	mov.w	lr, #0
  4035f4:	3c01      	subs	r4, #1
  4035f6:	f300 80ab 	bgt.w	403750 <__aeabi_dmul+0x238>
  4035fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
  4035fe:	bfde      	ittt	le
  403600:	2000      	movle	r0, #0
  403602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  403606:	bd70      	pople	{r4, r5, r6, pc}
  403608:	f1c4 0400 	rsb	r4, r4, #0
  40360c:	3c20      	subs	r4, #32
  40360e:	da35      	bge.n	40367c <__aeabi_dmul+0x164>
  403610:	340c      	adds	r4, #12
  403612:	dc1b      	bgt.n	40364c <__aeabi_dmul+0x134>
  403614:	f104 0414 	add.w	r4, r4, #20
  403618:	f1c4 0520 	rsb	r5, r4, #32
  40361c:	fa00 f305 	lsl.w	r3, r0, r5
  403620:	fa20 f004 	lsr.w	r0, r0, r4
  403624:	fa01 f205 	lsl.w	r2, r1, r5
  403628:	ea40 0002 	orr.w	r0, r0, r2
  40362c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  403630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  403634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  403638:	fa21 f604 	lsr.w	r6, r1, r4
  40363c:	eb42 0106 	adc.w	r1, r2, r6
  403640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403644:	bf08      	it	eq
  403646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40364a:	bd70      	pop	{r4, r5, r6, pc}
  40364c:	f1c4 040c 	rsb	r4, r4, #12
  403650:	f1c4 0520 	rsb	r5, r4, #32
  403654:	fa00 f304 	lsl.w	r3, r0, r4
  403658:	fa20 f005 	lsr.w	r0, r0, r5
  40365c:	fa01 f204 	lsl.w	r2, r1, r4
  403660:	ea40 0002 	orr.w	r0, r0, r2
  403664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  40366c:	f141 0100 	adc.w	r1, r1, #0
  403670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  403674:	bf08      	it	eq
  403676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40367a:	bd70      	pop	{r4, r5, r6, pc}
  40367c:	f1c4 0520 	rsb	r5, r4, #32
  403680:	fa00 f205 	lsl.w	r2, r0, r5
  403684:	ea4e 0e02 	orr.w	lr, lr, r2
  403688:	fa20 f304 	lsr.w	r3, r0, r4
  40368c:	fa01 f205 	lsl.w	r2, r1, r5
  403690:	ea43 0302 	orr.w	r3, r3, r2
  403694:	fa21 f004 	lsr.w	r0, r1, r4
  403698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  40369c:	fa21 f204 	lsr.w	r2, r1, r4
  4036a0:	ea20 0002 	bic.w	r0, r0, r2
  4036a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4036a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4036ac:	bf08      	it	eq
  4036ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4036b2:	bd70      	pop	{r4, r5, r6, pc}
  4036b4:	f094 0f00 	teq	r4, #0
  4036b8:	d10f      	bne.n	4036da <__aeabi_dmul+0x1c2>
  4036ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4036be:	0040      	lsls	r0, r0, #1
  4036c0:	eb41 0101 	adc.w	r1, r1, r1
  4036c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4036c8:	bf08      	it	eq
  4036ca:	3c01      	subeq	r4, #1
  4036cc:	d0f7      	beq.n	4036be <__aeabi_dmul+0x1a6>
  4036ce:	ea41 0106 	orr.w	r1, r1, r6
  4036d2:	f095 0f00 	teq	r5, #0
  4036d6:	bf18      	it	ne
  4036d8:	4770      	bxne	lr
  4036da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4036de:	0052      	lsls	r2, r2, #1
  4036e0:	eb43 0303 	adc.w	r3, r3, r3
  4036e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4036e8:	bf08      	it	eq
  4036ea:	3d01      	subeq	r5, #1
  4036ec:	d0f7      	beq.n	4036de <__aeabi_dmul+0x1c6>
  4036ee:	ea43 0306 	orr.w	r3, r3, r6
  4036f2:	4770      	bx	lr
  4036f4:	ea94 0f0c 	teq	r4, ip
  4036f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4036fc:	bf18      	it	ne
  4036fe:	ea95 0f0c 	teqne	r5, ip
  403702:	d00c      	beq.n	40371e <__aeabi_dmul+0x206>
  403704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403708:	bf18      	it	ne
  40370a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40370e:	d1d1      	bne.n	4036b4 <__aeabi_dmul+0x19c>
  403710:	ea81 0103 	eor.w	r1, r1, r3
  403714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403718:	f04f 0000 	mov.w	r0, #0
  40371c:	bd70      	pop	{r4, r5, r6, pc}
  40371e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403722:	bf06      	itte	eq
  403724:	4610      	moveq	r0, r2
  403726:	4619      	moveq	r1, r3
  403728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40372c:	d019      	beq.n	403762 <__aeabi_dmul+0x24a>
  40372e:	ea94 0f0c 	teq	r4, ip
  403732:	d102      	bne.n	40373a <__aeabi_dmul+0x222>
  403734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  403738:	d113      	bne.n	403762 <__aeabi_dmul+0x24a>
  40373a:	ea95 0f0c 	teq	r5, ip
  40373e:	d105      	bne.n	40374c <__aeabi_dmul+0x234>
  403740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  403744:	bf1c      	itt	ne
  403746:	4610      	movne	r0, r2
  403748:	4619      	movne	r1, r3
  40374a:	d10a      	bne.n	403762 <__aeabi_dmul+0x24a>
  40374c:	ea81 0103 	eor.w	r1, r1, r3
  403750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  403754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  40375c:	f04f 0000 	mov.w	r0, #0
  403760:	bd70      	pop	{r4, r5, r6, pc}
  403762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  403766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  40376a:	bd70      	pop	{r4, r5, r6, pc}

0040376c <__aeabi_ddiv>:
  40376c:	b570      	push	{r4, r5, r6, lr}
  40376e:	f04f 0cff 	mov.w	ip, #255	; 0xff
  403772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  403776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  40377a:	bf1d      	ittte	ne
  40377c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  403780:	ea94 0f0c 	teqne	r4, ip
  403784:	ea95 0f0c 	teqne	r5, ip
  403788:	f000 f8a7 	bleq	4038da <__aeabi_ddiv+0x16e>
  40378c:	eba4 0405 	sub.w	r4, r4, r5
  403790:	ea81 0e03 	eor.w	lr, r1, r3
  403794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403798:	ea4f 3101 	mov.w	r1, r1, lsl #12
  40379c:	f000 8088 	beq.w	4038b0 <__aeabi_ddiv+0x144>
  4037a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4037a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4037a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4037ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4037b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4037b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4037b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4037bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4037c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4037c4:	429d      	cmp	r5, r3
  4037c6:	bf08      	it	eq
  4037c8:	4296      	cmpeq	r6, r2
  4037ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4037ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4037d2:	d202      	bcs.n	4037da <__aeabi_ddiv+0x6e>
  4037d4:	085b      	lsrs	r3, r3, #1
  4037d6:	ea4f 0232 	mov.w	r2, r2, rrx
  4037da:	1ab6      	subs	r6, r6, r2
  4037dc:	eb65 0503 	sbc.w	r5, r5, r3
  4037e0:	085b      	lsrs	r3, r3, #1
  4037e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4037e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4037ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4037ee:	ebb6 0e02 	subs.w	lr, r6, r2
  4037f2:	eb75 0e03 	sbcs.w	lr, r5, r3
  4037f6:	bf22      	ittt	cs
  4037f8:	1ab6      	subcs	r6, r6, r2
  4037fa:	4675      	movcs	r5, lr
  4037fc:	ea40 000c 	orrcs.w	r0, r0, ip
  403800:	085b      	lsrs	r3, r3, #1
  403802:	ea4f 0232 	mov.w	r2, r2, rrx
  403806:	ebb6 0e02 	subs.w	lr, r6, r2
  40380a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40380e:	bf22      	ittt	cs
  403810:	1ab6      	subcs	r6, r6, r2
  403812:	4675      	movcs	r5, lr
  403814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  403818:	085b      	lsrs	r3, r3, #1
  40381a:	ea4f 0232 	mov.w	r2, r2, rrx
  40381e:	ebb6 0e02 	subs.w	lr, r6, r2
  403822:	eb75 0e03 	sbcs.w	lr, r5, r3
  403826:	bf22      	ittt	cs
  403828:	1ab6      	subcs	r6, r6, r2
  40382a:	4675      	movcs	r5, lr
  40382c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  403830:	085b      	lsrs	r3, r3, #1
  403832:	ea4f 0232 	mov.w	r2, r2, rrx
  403836:	ebb6 0e02 	subs.w	lr, r6, r2
  40383a:	eb75 0e03 	sbcs.w	lr, r5, r3
  40383e:	bf22      	ittt	cs
  403840:	1ab6      	subcs	r6, r6, r2
  403842:	4675      	movcs	r5, lr
  403844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  403848:	ea55 0e06 	orrs.w	lr, r5, r6
  40384c:	d018      	beq.n	403880 <__aeabi_ddiv+0x114>
  40384e:	ea4f 1505 	mov.w	r5, r5, lsl #4
  403852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  403856:	ea4f 1606 	mov.w	r6, r6, lsl #4
  40385a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40385e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  403862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  403866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  40386a:	d1c0      	bne.n	4037ee <__aeabi_ddiv+0x82>
  40386c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403870:	d10b      	bne.n	40388a <__aeabi_ddiv+0x11e>
  403872:	ea41 0100 	orr.w	r1, r1, r0
  403876:	f04f 0000 	mov.w	r0, #0
  40387a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40387e:	e7b6      	b.n	4037ee <__aeabi_ddiv+0x82>
  403880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  403884:	bf04      	itt	eq
  403886:	4301      	orreq	r1, r0
  403888:	2000      	moveq	r0, #0
  40388a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40388e:	bf88      	it	hi
  403890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  403894:	f63f aeaf 	bhi.w	4035f6 <__aeabi_dmul+0xde>
  403898:	ebb5 0c03 	subs.w	ip, r5, r3
  40389c:	bf04      	itt	eq
  40389e:	ebb6 0c02 	subseq.w	ip, r6, r2
  4038a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4038a6:	f150 0000 	adcs.w	r0, r0, #0
  4038aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4038ae:	bd70      	pop	{r4, r5, r6, pc}
  4038b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4038b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4038b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4038bc:	bfc2      	ittt	gt
  4038be:	ebd4 050c 	rsbsgt	r5, r4, ip
  4038c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4038c6:	bd70      	popgt	{r4, r5, r6, pc}
  4038c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4038cc:	f04f 0e00 	mov.w	lr, #0
  4038d0:	3c01      	subs	r4, #1
  4038d2:	e690      	b.n	4035f6 <__aeabi_dmul+0xde>
  4038d4:	ea45 0e06 	orr.w	lr, r5, r6
  4038d8:	e68d      	b.n	4035f6 <__aeabi_dmul+0xde>
  4038da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4038de:	ea94 0f0c 	teq	r4, ip
  4038e2:	bf08      	it	eq
  4038e4:	ea95 0f0c 	teqeq	r5, ip
  4038e8:	f43f af3b 	beq.w	403762 <__aeabi_dmul+0x24a>
  4038ec:	ea94 0f0c 	teq	r4, ip
  4038f0:	d10a      	bne.n	403908 <__aeabi_ddiv+0x19c>
  4038f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  4038f6:	f47f af34 	bne.w	403762 <__aeabi_dmul+0x24a>
  4038fa:	ea95 0f0c 	teq	r5, ip
  4038fe:	f47f af25 	bne.w	40374c <__aeabi_dmul+0x234>
  403902:	4610      	mov	r0, r2
  403904:	4619      	mov	r1, r3
  403906:	e72c      	b.n	403762 <__aeabi_dmul+0x24a>
  403908:	ea95 0f0c 	teq	r5, ip
  40390c:	d106      	bne.n	40391c <__aeabi_ddiv+0x1b0>
  40390e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  403912:	f43f aefd 	beq.w	403710 <__aeabi_dmul+0x1f8>
  403916:	4610      	mov	r0, r2
  403918:	4619      	mov	r1, r3
  40391a:	e722      	b.n	403762 <__aeabi_dmul+0x24a>
  40391c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  403920:	bf18      	it	ne
  403922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  403926:	f47f aec5 	bne.w	4036b4 <__aeabi_dmul+0x19c>
  40392a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40392e:	f47f af0d 	bne.w	40374c <__aeabi_dmul+0x234>
  403932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  403936:	f47f aeeb 	bne.w	403710 <__aeabi_dmul+0x1f8>
  40393a:	e712      	b.n	403762 <__aeabi_dmul+0x24a>

0040393c <__aeabi_d2iz>:
  40393c:	ea4f 0241 	mov.w	r2, r1, lsl #1
  403940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  403944:	d215      	bcs.n	403972 <__aeabi_d2iz+0x36>
  403946:	d511      	bpl.n	40396c <__aeabi_d2iz+0x30>
  403948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  40394c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  403950:	d912      	bls.n	403978 <__aeabi_d2iz+0x3c>
  403952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  403956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  40395a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40395e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  403962:	fa23 f002 	lsr.w	r0, r3, r2
  403966:	bf18      	it	ne
  403968:	4240      	negne	r0, r0
  40396a:	4770      	bx	lr
  40396c:	f04f 0000 	mov.w	r0, #0
  403970:	4770      	bx	lr
  403972:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  403976:	d105      	bne.n	403984 <__aeabi_d2iz+0x48>
  403978:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  40397c:	bf08      	it	eq
  40397e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  403982:	4770      	bx	lr
  403984:	f04f 0000 	mov.w	r0, #0
  403988:	4770      	bx	lr
  40398a:	bf00      	nop

0040398c <__libc_init_array>:
  40398c:	b570      	push	{r4, r5, r6, lr}
  40398e:	4e0f      	ldr	r6, [pc, #60]	; (4039cc <__libc_init_array+0x40>)
  403990:	4d0f      	ldr	r5, [pc, #60]	; (4039d0 <__libc_init_array+0x44>)
  403992:	1b76      	subs	r6, r6, r5
  403994:	10b6      	asrs	r6, r6, #2
  403996:	bf18      	it	ne
  403998:	2400      	movne	r4, #0
  40399a:	d005      	beq.n	4039a8 <__libc_init_array+0x1c>
  40399c:	3401      	adds	r4, #1
  40399e:	f855 3b04 	ldr.w	r3, [r5], #4
  4039a2:	4798      	blx	r3
  4039a4:	42a6      	cmp	r6, r4
  4039a6:	d1f9      	bne.n	40399c <__libc_init_array+0x10>
  4039a8:	4e0a      	ldr	r6, [pc, #40]	; (4039d4 <__libc_init_array+0x48>)
  4039aa:	4d0b      	ldr	r5, [pc, #44]	; (4039d8 <__libc_init_array+0x4c>)
  4039ac:	1b76      	subs	r6, r6, r5
  4039ae:	f004 fb55 	bl	40805c <_init>
  4039b2:	10b6      	asrs	r6, r6, #2
  4039b4:	bf18      	it	ne
  4039b6:	2400      	movne	r4, #0
  4039b8:	d006      	beq.n	4039c8 <__libc_init_array+0x3c>
  4039ba:	3401      	adds	r4, #1
  4039bc:	f855 3b04 	ldr.w	r3, [r5], #4
  4039c0:	4798      	blx	r3
  4039c2:	42a6      	cmp	r6, r4
  4039c4:	d1f9      	bne.n	4039ba <__libc_init_array+0x2e>
  4039c6:	bd70      	pop	{r4, r5, r6, pc}
  4039c8:	bd70      	pop	{r4, r5, r6, pc}
  4039ca:	bf00      	nop
  4039cc:	00408068 	.word	0x00408068
  4039d0:	00408068 	.word	0x00408068
  4039d4:	00408070 	.word	0x00408070
  4039d8:	00408068 	.word	0x00408068

004039dc <iprintf>:
  4039dc:	b40f      	push	{r0, r1, r2, r3}
  4039de:	b500      	push	{lr}
  4039e0:	4907      	ldr	r1, [pc, #28]	; (403a00 <iprintf+0x24>)
  4039e2:	b083      	sub	sp, #12
  4039e4:	ab04      	add	r3, sp, #16
  4039e6:	6808      	ldr	r0, [r1, #0]
  4039e8:	f853 2b04 	ldr.w	r2, [r3], #4
  4039ec:	6881      	ldr	r1, [r0, #8]
  4039ee:	9301      	str	r3, [sp, #4]
  4039f0:	f000 fd54 	bl	40449c <_vfiprintf_r>
  4039f4:	b003      	add	sp, #12
  4039f6:	f85d eb04 	ldr.w	lr, [sp], #4
  4039fa:	b004      	add	sp, #16
  4039fc:	4770      	bx	lr
  4039fe:	bf00      	nop
  403a00:	2040000c 	.word	0x2040000c

00403a04 <malloc>:
  403a04:	4b02      	ldr	r3, [pc, #8]	; (403a10 <malloc+0xc>)
  403a06:	4601      	mov	r1, r0
  403a08:	6818      	ldr	r0, [r3, #0]
  403a0a:	f000 b80b 	b.w	403a24 <_malloc_r>
  403a0e:	bf00      	nop
  403a10:	2040000c 	.word	0x2040000c

00403a14 <free>:
  403a14:	4b02      	ldr	r3, [pc, #8]	; (403a20 <free+0xc>)
  403a16:	4601      	mov	r1, r0
  403a18:	6818      	ldr	r0, [r3, #0]
  403a1a:	f001 be5b 	b.w	4056d4 <_free_r>
  403a1e:	bf00      	nop
  403a20:	2040000c 	.word	0x2040000c

00403a24 <_malloc_r>:
  403a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403a28:	f101 060b 	add.w	r6, r1, #11
  403a2c:	2e16      	cmp	r6, #22
  403a2e:	b083      	sub	sp, #12
  403a30:	4605      	mov	r5, r0
  403a32:	f240 809e 	bls.w	403b72 <_malloc_r+0x14e>
  403a36:	f036 0607 	bics.w	r6, r6, #7
  403a3a:	f100 80bd 	bmi.w	403bb8 <_malloc_r+0x194>
  403a3e:	42b1      	cmp	r1, r6
  403a40:	f200 80ba 	bhi.w	403bb8 <_malloc_r+0x194>
  403a44:	f000 fb86 	bl	404154 <__malloc_lock>
  403a48:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  403a4c:	f0c0 8293 	bcc.w	403f76 <_malloc_r+0x552>
  403a50:	0a73      	lsrs	r3, r6, #9
  403a52:	f000 80b8 	beq.w	403bc6 <_malloc_r+0x1a2>
  403a56:	2b04      	cmp	r3, #4
  403a58:	f200 8179 	bhi.w	403d4e <_malloc_r+0x32a>
  403a5c:	09b3      	lsrs	r3, r6, #6
  403a5e:	f103 0039 	add.w	r0, r3, #57	; 0x39
  403a62:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  403a66:	00c3      	lsls	r3, r0, #3
  403a68:	4fbf      	ldr	r7, [pc, #764]	; (403d68 <_malloc_r+0x344>)
  403a6a:	443b      	add	r3, r7
  403a6c:	f1a3 0108 	sub.w	r1, r3, #8
  403a70:	685c      	ldr	r4, [r3, #4]
  403a72:	42a1      	cmp	r1, r4
  403a74:	d106      	bne.n	403a84 <_malloc_r+0x60>
  403a76:	e00c      	b.n	403a92 <_malloc_r+0x6e>
  403a78:	2a00      	cmp	r2, #0
  403a7a:	f280 80aa 	bge.w	403bd2 <_malloc_r+0x1ae>
  403a7e:	68e4      	ldr	r4, [r4, #12]
  403a80:	42a1      	cmp	r1, r4
  403a82:	d006      	beq.n	403a92 <_malloc_r+0x6e>
  403a84:	6863      	ldr	r3, [r4, #4]
  403a86:	f023 0303 	bic.w	r3, r3, #3
  403a8a:	1b9a      	subs	r2, r3, r6
  403a8c:	2a0f      	cmp	r2, #15
  403a8e:	ddf3      	ble.n	403a78 <_malloc_r+0x54>
  403a90:	4670      	mov	r0, lr
  403a92:	693c      	ldr	r4, [r7, #16]
  403a94:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 403d7c <_malloc_r+0x358>
  403a98:	4574      	cmp	r4, lr
  403a9a:	f000 81ab 	beq.w	403df4 <_malloc_r+0x3d0>
  403a9e:	6863      	ldr	r3, [r4, #4]
  403aa0:	f023 0303 	bic.w	r3, r3, #3
  403aa4:	1b9a      	subs	r2, r3, r6
  403aa6:	2a0f      	cmp	r2, #15
  403aa8:	f300 8190 	bgt.w	403dcc <_malloc_r+0x3a8>
  403aac:	2a00      	cmp	r2, #0
  403aae:	f8c7 e014 	str.w	lr, [r7, #20]
  403ab2:	f8c7 e010 	str.w	lr, [r7, #16]
  403ab6:	f280 809d 	bge.w	403bf4 <_malloc_r+0x1d0>
  403aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403abe:	f080 8161 	bcs.w	403d84 <_malloc_r+0x360>
  403ac2:	08db      	lsrs	r3, r3, #3
  403ac4:	f103 0c01 	add.w	ip, r3, #1
  403ac8:	1099      	asrs	r1, r3, #2
  403aca:	687a      	ldr	r2, [r7, #4]
  403acc:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  403ad0:	f8c4 8008 	str.w	r8, [r4, #8]
  403ad4:	2301      	movs	r3, #1
  403ad6:	408b      	lsls	r3, r1
  403ad8:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  403adc:	4313      	orrs	r3, r2
  403ade:	3908      	subs	r1, #8
  403ae0:	60e1      	str	r1, [r4, #12]
  403ae2:	607b      	str	r3, [r7, #4]
  403ae4:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  403ae8:	f8c8 400c 	str.w	r4, [r8, #12]
  403aec:	1082      	asrs	r2, r0, #2
  403aee:	2401      	movs	r4, #1
  403af0:	4094      	lsls	r4, r2
  403af2:	429c      	cmp	r4, r3
  403af4:	f200 808b 	bhi.w	403c0e <_malloc_r+0x1ea>
  403af8:	421c      	tst	r4, r3
  403afa:	d106      	bne.n	403b0a <_malloc_r+0xe6>
  403afc:	f020 0003 	bic.w	r0, r0, #3
  403b00:	0064      	lsls	r4, r4, #1
  403b02:	421c      	tst	r4, r3
  403b04:	f100 0004 	add.w	r0, r0, #4
  403b08:	d0fa      	beq.n	403b00 <_malloc_r+0xdc>
  403b0a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  403b0e:	46cc      	mov	ip, r9
  403b10:	4680      	mov	r8, r0
  403b12:	f8dc 300c 	ldr.w	r3, [ip, #12]
  403b16:	459c      	cmp	ip, r3
  403b18:	d107      	bne.n	403b2a <_malloc_r+0x106>
  403b1a:	e16d      	b.n	403df8 <_malloc_r+0x3d4>
  403b1c:	2a00      	cmp	r2, #0
  403b1e:	f280 817b 	bge.w	403e18 <_malloc_r+0x3f4>
  403b22:	68db      	ldr	r3, [r3, #12]
  403b24:	459c      	cmp	ip, r3
  403b26:	f000 8167 	beq.w	403df8 <_malloc_r+0x3d4>
  403b2a:	6859      	ldr	r1, [r3, #4]
  403b2c:	f021 0103 	bic.w	r1, r1, #3
  403b30:	1b8a      	subs	r2, r1, r6
  403b32:	2a0f      	cmp	r2, #15
  403b34:	ddf2      	ble.n	403b1c <_malloc_r+0xf8>
  403b36:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  403b3a:	f8d3 8008 	ldr.w	r8, [r3, #8]
  403b3e:	9300      	str	r3, [sp, #0]
  403b40:	199c      	adds	r4, r3, r6
  403b42:	4628      	mov	r0, r5
  403b44:	f046 0601 	orr.w	r6, r6, #1
  403b48:	f042 0501 	orr.w	r5, r2, #1
  403b4c:	605e      	str	r6, [r3, #4]
  403b4e:	f8c8 c00c 	str.w	ip, [r8, #12]
  403b52:	f8cc 8008 	str.w	r8, [ip, #8]
  403b56:	617c      	str	r4, [r7, #20]
  403b58:	613c      	str	r4, [r7, #16]
  403b5a:	f8c4 e00c 	str.w	lr, [r4, #12]
  403b5e:	f8c4 e008 	str.w	lr, [r4, #8]
  403b62:	6065      	str	r5, [r4, #4]
  403b64:	505a      	str	r2, [r3, r1]
  403b66:	f000 fafb 	bl	404160 <__malloc_unlock>
  403b6a:	9b00      	ldr	r3, [sp, #0]
  403b6c:	f103 0408 	add.w	r4, r3, #8
  403b70:	e01e      	b.n	403bb0 <_malloc_r+0x18c>
  403b72:	2910      	cmp	r1, #16
  403b74:	d820      	bhi.n	403bb8 <_malloc_r+0x194>
  403b76:	f000 faed 	bl	404154 <__malloc_lock>
  403b7a:	2610      	movs	r6, #16
  403b7c:	2318      	movs	r3, #24
  403b7e:	2002      	movs	r0, #2
  403b80:	4f79      	ldr	r7, [pc, #484]	; (403d68 <_malloc_r+0x344>)
  403b82:	443b      	add	r3, r7
  403b84:	f1a3 0208 	sub.w	r2, r3, #8
  403b88:	685c      	ldr	r4, [r3, #4]
  403b8a:	4294      	cmp	r4, r2
  403b8c:	f000 813d 	beq.w	403e0a <_malloc_r+0x3e6>
  403b90:	6863      	ldr	r3, [r4, #4]
  403b92:	68e1      	ldr	r1, [r4, #12]
  403b94:	68a6      	ldr	r6, [r4, #8]
  403b96:	f023 0303 	bic.w	r3, r3, #3
  403b9a:	4423      	add	r3, r4
  403b9c:	4628      	mov	r0, r5
  403b9e:	685a      	ldr	r2, [r3, #4]
  403ba0:	60f1      	str	r1, [r6, #12]
  403ba2:	f042 0201 	orr.w	r2, r2, #1
  403ba6:	608e      	str	r6, [r1, #8]
  403ba8:	605a      	str	r2, [r3, #4]
  403baa:	f000 fad9 	bl	404160 <__malloc_unlock>
  403bae:	3408      	adds	r4, #8
  403bb0:	4620      	mov	r0, r4
  403bb2:	b003      	add	sp, #12
  403bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bb8:	2400      	movs	r4, #0
  403bba:	230c      	movs	r3, #12
  403bbc:	4620      	mov	r0, r4
  403bbe:	602b      	str	r3, [r5, #0]
  403bc0:	b003      	add	sp, #12
  403bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bc6:	2040      	movs	r0, #64	; 0x40
  403bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
  403bcc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  403bd0:	e74a      	b.n	403a68 <_malloc_r+0x44>
  403bd2:	4423      	add	r3, r4
  403bd4:	68e1      	ldr	r1, [r4, #12]
  403bd6:	685a      	ldr	r2, [r3, #4]
  403bd8:	68a6      	ldr	r6, [r4, #8]
  403bda:	f042 0201 	orr.w	r2, r2, #1
  403bde:	60f1      	str	r1, [r6, #12]
  403be0:	4628      	mov	r0, r5
  403be2:	608e      	str	r6, [r1, #8]
  403be4:	605a      	str	r2, [r3, #4]
  403be6:	f000 fabb 	bl	404160 <__malloc_unlock>
  403bea:	3408      	adds	r4, #8
  403bec:	4620      	mov	r0, r4
  403bee:	b003      	add	sp, #12
  403bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403bf4:	4423      	add	r3, r4
  403bf6:	4628      	mov	r0, r5
  403bf8:	685a      	ldr	r2, [r3, #4]
  403bfa:	f042 0201 	orr.w	r2, r2, #1
  403bfe:	605a      	str	r2, [r3, #4]
  403c00:	f000 faae 	bl	404160 <__malloc_unlock>
  403c04:	3408      	adds	r4, #8
  403c06:	4620      	mov	r0, r4
  403c08:	b003      	add	sp, #12
  403c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403c0e:	68bc      	ldr	r4, [r7, #8]
  403c10:	6863      	ldr	r3, [r4, #4]
  403c12:	f023 0803 	bic.w	r8, r3, #3
  403c16:	45b0      	cmp	r8, r6
  403c18:	d304      	bcc.n	403c24 <_malloc_r+0x200>
  403c1a:	eba8 0306 	sub.w	r3, r8, r6
  403c1e:	2b0f      	cmp	r3, #15
  403c20:	f300 8085 	bgt.w	403d2e <_malloc_r+0x30a>
  403c24:	f8df 9158 	ldr.w	r9, [pc, #344]	; 403d80 <_malloc_r+0x35c>
  403c28:	4b50      	ldr	r3, [pc, #320]	; (403d6c <_malloc_r+0x348>)
  403c2a:	f8d9 2000 	ldr.w	r2, [r9]
  403c2e:	681b      	ldr	r3, [r3, #0]
  403c30:	3201      	adds	r2, #1
  403c32:	4433      	add	r3, r6
  403c34:	eb04 0a08 	add.w	sl, r4, r8
  403c38:	f000 8155 	beq.w	403ee6 <_malloc_r+0x4c2>
  403c3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  403c40:	330f      	adds	r3, #15
  403c42:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  403c46:	f02b 0b0f 	bic.w	fp, fp, #15
  403c4a:	4659      	mov	r1, fp
  403c4c:	4628      	mov	r0, r5
  403c4e:	f000 fa8d 	bl	40416c <_sbrk_r>
  403c52:	1c41      	adds	r1, r0, #1
  403c54:	4602      	mov	r2, r0
  403c56:	f000 80fc 	beq.w	403e52 <_malloc_r+0x42e>
  403c5a:	4582      	cmp	sl, r0
  403c5c:	f200 80f7 	bhi.w	403e4e <_malloc_r+0x42a>
  403c60:	4b43      	ldr	r3, [pc, #268]	; (403d70 <_malloc_r+0x34c>)
  403c62:	6819      	ldr	r1, [r3, #0]
  403c64:	4459      	add	r1, fp
  403c66:	6019      	str	r1, [r3, #0]
  403c68:	f000 814d 	beq.w	403f06 <_malloc_r+0x4e2>
  403c6c:	f8d9 0000 	ldr.w	r0, [r9]
  403c70:	3001      	adds	r0, #1
  403c72:	bf1b      	ittet	ne
  403c74:	eba2 0a0a 	subne.w	sl, r2, sl
  403c78:	4451      	addne	r1, sl
  403c7a:	f8c9 2000 	streq.w	r2, [r9]
  403c7e:	6019      	strne	r1, [r3, #0]
  403c80:	f012 0107 	ands.w	r1, r2, #7
  403c84:	f000 8115 	beq.w	403eb2 <_malloc_r+0x48e>
  403c88:	f1c1 0008 	rsb	r0, r1, #8
  403c8c:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  403c90:	4402      	add	r2, r0
  403c92:	3108      	adds	r1, #8
  403c94:	eb02 090b 	add.w	r9, r2, fp
  403c98:	f3c9 090b 	ubfx	r9, r9, #0, #12
  403c9c:	eba1 0909 	sub.w	r9, r1, r9
  403ca0:	4649      	mov	r1, r9
  403ca2:	4628      	mov	r0, r5
  403ca4:	9301      	str	r3, [sp, #4]
  403ca6:	9200      	str	r2, [sp, #0]
  403ca8:	f000 fa60 	bl	40416c <_sbrk_r>
  403cac:	1c43      	adds	r3, r0, #1
  403cae:	e89d 000c 	ldmia.w	sp, {r2, r3}
  403cb2:	f000 8143 	beq.w	403f3c <_malloc_r+0x518>
  403cb6:	1a80      	subs	r0, r0, r2
  403cb8:	4448      	add	r0, r9
  403cba:	f040 0001 	orr.w	r0, r0, #1
  403cbe:	6819      	ldr	r1, [r3, #0]
  403cc0:	60ba      	str	r2, [r7, #8]
  403cc2:	4449      	add	r1, r9
  403cc4:	42bc      	cmp	r4, r7
  403cc6:	6050      	str	r0, [r2, #4]
  403cc8:	6019      	str	r1, [r3, #0]
  403cca:	d017      	beq.n	403cfc <_malloc_r+0x2d8>
  403ccc:	f1b8 0f0f 	cmp.w	r8, #15
  403cd0:	f240 80fb 	bls.w	403eca <_malloc_r+0x4a6>
  403cd4:	6860      	ldr	r0, [r4, #4]
  403cd6:	f1a8 020c 	sub.w	r2, r8, #12
  403cda:	f022 0207 	bic.w	r2, r2, #7
  403cde:	eb04 0e02 	add.w	lr, r4, r2
  403ce2:	f000 0001 	and.w	r0, r0, #1
  403ce6:	f04f 0c05 	mov.w	ip, #5
  403cea:	4310      	orrs	r0, r2
  403cec:	2a0f      	cmp	r2, #15
  403cee:	6060      	str	r0, [r4, #4]
  403cf0:	f8ce c004 	str.w	ip, [lr, #4]
  403cf4:	f8ce c008 	str.w	ip, [lr, #8]
  403cf8:	f200 8117 	bhi.w	403f2a <_malloc_r+0x506>
  403cfc:	4b1d      	ldr	r3, [pc, #116]	; (403d74 <_malloc_r+0x350>)
  403cfe:	68bc      	ldr	r4, [r7, #8]
  403d00:	681a      	ldr	r2, [r3, #0]
  403d02:	4291      	cmp	r1, r2
  403d04:	bf88      	it	hi
  403d06:	6019      	strhi	r1, [r3, #0]
  403d08:	4b1b      	ldr	r3, [pc, #108]	; (403d78 <_malloc_r+0x354>)
  403d0a:	681a      	ldr	r2, [r3, #0]
  403d0c:	4291      	cmp	r1, r2
  403d0e:	6862      	ldr	r2, [r4, #4]
  403d10:	bf88      	it	hi
  403d12:	6019      	strhi	r1, [r3, #0]
  403d14:	f022 0203 	bic.w	r2, r2, #3
  403d18:	4296      	cmp	r6, r2
  403d1a:	eba2 0306 	sub.w	r3, r2, r6
  403d1e:	d801      	bhi.n	403d24 <_malloc_r+0x300>
  403d20:	2b0f      	cmp	r3, #15
  403d22:	dc04      	bgt.n	403d2e <_malloc_r+0x30a>
  403d24:	4628      	mov	r0, r5
  403d26:	f000 fa1b 	bl	404160 <__malloc_unlock>
  403d2a:	2400      	movs	r4, #0
  403d2c:	e740      	b.n	403bb0 <_malloc_r+0x18c>
  403d2e:	19a2      	adds	r2, r4, r6
  403d30:	f043 0301 	orr.w	r3, r3, #1
  403d34:	f046 0601 	orr.w	r6, r6, #1
  403d38:	6066      	str	r6, [r4, #4]
  403d3a:	4628      	mov	r0, r5
  403d3c:	60ba      	str	r2, [r7, #8]
  403d3e:	6053      	str	r3, [r2, #4]
  403d40:	f000 fa0e 	bl	404160 <__malloc_unlock>
  403d44:	3408      	adds	r4, #8
  403d46:	4620      	mov	r0, r4
  403d48:	b003      	add	sp, #12
  403d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403d4e:	2b14      	cmp	r3, #20
  403d50:	d971      	bls.n	403e36 <_malloc_r+0x412>
  403d52:	2b54      	cmp	r3, #84	; 0x54
  403d54:	f200 80a3 	bhi.w	403e9e <_malloc_r+0x47a>
  403d58:	0b33      	lsrs	r3, r6, #12
  403d5a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  403d5e:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  403d62:	00c3      	lsls	r3, r0, #3
  403d64:	e680      	b.n	403a68 <_malloc_r+0x44>
  403d66:	bf00      	nop
  403d68:	20400438 	.word	0x20400438
  403d6c:	20400bc4 	.word	0x20400bc4
  403d70:	20400b94 	.word	0x20400b94
  403d74:	20400bbc 	.word	0x20400bbc
  403d78:	20400bc0 	.word	0x20400bc0
  403d7c:	20400440 	.word	0x20400440
  403d80:	20400840 	.word	0x20400840
  403d84:	0a5a      	lsrs	r2, r3, #9
  403d86:	2a04      	cmp	r2, #4
  403d88:	d95b      	bls.n	403e42 <_malloc_r+0x41e>
  403d8a:	2a14      	cmp	r2, #20
  403d8c:	f200 80ae 	bhi.w	403eec <_malloc_r+0x4c8>
  403d90:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  403d94:	00c9      	lsls	r1, r1, #3
  403d96:	325b      	adds	r2, #91	; 0x5b
  403d98:	eb07 0c01 	add.w	ip, r7, r1
  403d9c:	5879      	ldr	r1, [r7, r1]
  403d9e:	f1ac 0c08 	sub.w	ip, ip, #8
  403da2:	458c      	cmp	ip, r1
  403da4:	f000 8088 	beq.w	403eb8 <_malloc_r+0x494>
  403da8:	684a      	ldr	r2, [r1, #4]
  403daa:	f022 0203 	bic.w	r2, r2, #3
  403dae:	4293      	cmp	r3, r2
  403db0:	d273      	bcs.n	403e9a <_malloc_r+0x476>
  403db2:	6889      	ldr	r1, [r1, #8]
  403db4:	458c      	cmp	ip, r1
  403db6:	d1f7      	bne.n	403da8 <_malloc_r+0x384>
  403db8:	f8dc 200c 	ldr.w	r2, [ip, #12]
  403dbc:	687b      	ldr	r3, [r7, #4]
  403dbe:	60e2      	str	r2, [r4, #12]
  403dc0:	f8c4 c008 	str.w	ip, [r4, #8]
  403dc4:	6094      	str	r4, [r2, #8]
  403dc6:	f8cc 400c 	str.w	r4, [ip, #12]
  403dca:	e68f      	b.n	403aec <_malloc_r+0xc8>
  403dcc:	19a1      	adds	r1, r4, r6
  403dce:	f046 0c01 	orr.w	ip, r6, #1
  403dd2:	f042 0601 	orr.w	r6, r2, #1
  403dd6:	f8c4 c004 	str.w	ip, [r4, #4]
  403dda:	4628      	mov	r0, r5
  403ddc:	6179      	str	r1, [r7, #20]
  403dde:	6139      	str	r1, [r7, #16]
  403de0:	f8c1 e00c 	str.w	lr, [r1, #12]
  403de4:	f8c1 e008 	str.w	lr, [r1, #8]
  403de8:	604e      	str	r6, [r1, #4]
  403dea:	50e2      	str	r2, [r4, r3]
  403dec:	f000 f9b8 	bl	404160 <__malloc_unlock>
  403df0:	3408      	adds	r4, #8
  403df2:	e6dd      	b.n	403bb0 <_malloc_r+0x18c>
  403df4:	687b      	ldr	r3, [r7, #4]
  403df6:	e679      	b.n	403aec <_malloc_r+0xc8>
  403df8:	f108 0801 	add.w	r8, r8, #1
  403dfc:	f018 0f03 	tst.w	r8, #3
  403e00:	f10c 0c08 	add.w	ip, ip, #8
  403e04:	f47f ae85 	bne.w	403b12 <_malloc_r+0xee>
  403e08:	e02d      	b.n	403e66 <_malloc_r+0x442>
  403e0a:	68dc      	ldr	r4, [r3, #12]
  403e0c:	42a3      	cmp	r3, r4
  403e0e:	bf08      	it	eq
  403e10:	3002      	addeq	r0, #2
  403e12:	f43f ae3e 	beq.w	403a92 <_malloc_r+0x6e>
  403e16:	e6bb      	b.n	403b90 <_malloc_r+0x16c>
  403e18:	4419      	add	r1, r3
  403e1a:	461c      	mov	r4, r3
  403e1c:	684a      	ldr	r2, [r1, #4]
  403e1e:	68db      	ldr	r3, [r3, #12]
  403e20:	f854 6f08 	ldr.w	r6, [r4, #8]!
  403e24:	f042 0201 	orr.w	r2, r2, #1
  403e28:	604a      	str	r2, [r1, #4]
  403e2a:	4628      	mov	r0, r5
  403e2c:	60f3      	str	r3, [r6, #12]
  403e2e:	609e      	str	r6, [r3, #8]
  403e30:	f000 f996 	bl	404160 <__malloc_unlock>
  403e34:	e6bc      	b.n	403bb0 <_malloc_r+0x18c>
  403e36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  403e3a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  403e3e:	00c3      	lsls	r3, r0, #3
  403e40:	e612      	b.n	403a68 <_malloc_r+0x44>
  403e42:	099a      	lsrs	r2, r3, #6
  403e44:	f102 0139 	add.w	r1, r2, #57	; 0x39
  403e48:	00c9      	lsls	r1, r1, #3
  403e4a:	3238      	adds	r2, #56	; 0x38
  403e4c:	e7a4      	b.n	403d98 <_malloc_r+0x374>
  403e4e:	42bc      	cmp	r4, r7
  403e50:	d054      	beq.n	403efc <_malloc_r+0x4d8>
  403e52:	68bc      	ldr	r4, [r7, #8]
  403e54:	6862      	ldr	r2, [r4, #4]
  403e56:	f022 0203 	bic.w	r2, r2, #3
  403e5a:	e75d      	b.n	403d18 <_malloc_r+0x2f4>
  403e5c:	f859 3908 	ldr.w	r3, [r9], #-8
  403e60:	4599      	cmp	r9, r3
  403e62:	f040 8086 	bne.w	403f72 <_malloc_r+0x54e>
  403e66:	f010 0f03 	tst.w	r0, #3
  403e6a:	f100 30ff 	add.w	r0, r0, #4294967295
  403e6e:	d1f5      	bne.n	403e5c <_malloc_r+0x438>
  403e70:	687b      	ldr	r3, [r7, #4]
  403e72:	ea23 0304 	bic.w	r3, r3, r4
  403e76:	607b      	str	r3, [r7, #4]
  403e78:	0064      	lsls	r4, r4, #1
  403e7a:	429c      	cmp	r4, r3
  403e7c:	f63f aec7 	bhi.w	403c0e <_malloc_r+0x1ea>
  403e80:	2c00      	cmp	r4, #0
  403e82:	f43f aec4 	beq.w	403c0e <_malloc_r+0x1ea>
  403e86:	421c      	tst	r4, r3
  403e88:	4640      	mov	r0, r8
  403e8a:	f47f ae3e 	bne.w	403b0a <_malloc_r+0xe6>
  403e8e:	0064      	lsls	r4, r4, #1
  403e90:	421c      	tst	r4, r3
  403e92:	f100 0004 	add.w	r0, r0, #4
  403e96:	d0fa      	beq.n	403e8e <_malloc_r+0x46a>
  403e98:	e637      	b.n	403b0a <_malloc_r+0xe6>
  403e9a:	468c      	mov	ip, r1
  403e9c:	e78c      	b.n	403db8 <_malloc_r+0x394>
  403e9e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  403ea2:	d815      	bhi.n	403ed0 <_malloc_r+0x4ac>
  403ea4:	0bf3      	lsrs	r3, r6, #15
  403ea6:	f103 0078 	add.w	r0, r3, #120	; 0x78
  403eaa:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  403eae:	00c3      	lsls	r3, r0, #3
  403eb0:	e5da      	b.n	403a68 <_malloc_r+0x44>
  403eb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  403eb6:	e6ed      	b.n	403c94 <_malloc_r+0x270>
  403eb8:	687b      	ldr	r3, [r7, #4]
  403eba:	1092      	asrs	r2, r2, #2
  403ebc:	2101      	movs	r1, #1
  403ebe:	fa01 f202 	lsl.w	r2, r1, r2
  403ec2:	4313      	orrs	r3, r2
  403ec4:	607b      	str	r3, [r7, #4]
  403ec6:	4662      	mov	r2, ip
  403ec8:	e779      	b.n	403dbe <_malloc_r+0x39a>
  403eca:	2301      	movs	r3, #1
  403ecc:	6053      	str	r3, [r2, #4]
  403ece:	e729      	b.n	403d24 <_malloc_r+0x300>
  403ed0:	f240 5254 	movw	r2, #1364	; 0x554
  403ed4:	4293      	cmp	r3, r2
  403ed6:	d822      	bhi.n	403f1e <_malloc_r+0x4fa>
  403ed8:	0cb3      	lsrs	r3, r6, #18
  403eda:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  403ede:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  403ee2:	00c3      	lsls	r3, r0, #3
  403ee4:	e5c0      	b.n	403a68 <_malloc_r+0x44>
  403ee6:	f103 0b10 	add.w	fp, r3, #16
  403eea:	e6ae      	b.n	403c4a <_malloc_r+0x226>
  403eec:	2a54      	cmp	r2, #84	; 0x54
  403eee:	d829      	bhi.n	403f44 <_malloc_r+0x520>
  403ef0:	0b1a      	lsrs	r2, r3, #12
  403ef2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  403ef6:	00c9      	lsls	r1, r1, #3
  403ef8:	326e      	adds	r2, #110	; 0x6e
  403efa:	e74d      	b.n	403d98 <_malloc_r+0x374>
  403efc:	4b20      	ldr	r3, [pc, #128]	; (403f80 <_malloc_r+0x55c>)
  403efe:	6819      	ldr	r1, [r3, #0]
  403f00:	4459      	add	r1, fp
  403f02:	6019      	str	r1, [r3, #0]
  403f04:	e6b2      	b.n	403c6c <_malloc_r+0x248>
  403f06:	f3ca 000b 	ubfx	r0, sl, #0, #12
  403f0a:	2800      	cmp	r0, #0
  403f0c:	f47f aeae 	bne.w	403c6c <_malloc_r+0x248>
  403f10:	eb08 030b 	add.w	r3, r8, fp
  403f14:	68ba      	ldr	r2, [r7, #8]
  403f16:	f043 0301 	orr.w	r3, r3, #1
  403f1a:	6053      	str	r3, [r2, #4]
  403f1c:	e6ee      	b.n	403cfc <_malloc_r+0x2d8>
  403f1e:	207f      	movs	r0, #127	; 0x7f
  403f20:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  403f24:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  403f28:	e59e      	b.n	403a68 <_malloc_r+0x44>
  403f2a:	f104 0108 	add.w	r1, r4, #8
  403f2e:	4628      	mov	r0, r5
  403f30:	9300      	str	r3, [sp, #0]
  403f32:	f001 fbcf 	bl	4056d4 <_free_r>
  403f36:	9b00      	ldr	r3, [sp, #0]
  403f38:	6819      	ldr	r1, [r3, #0]
  403f3a:	e6df      	b.n	403cfc <_malloc_r+0x2d8>
  403f3c:	2001      	movs	r0, #1
  403f3e:	f04f 0900 	mov.w	r9, #0
  403f42:	e6bc      	b.n	403cbe <_malloc_r+0x29a>
  403f44:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403f48:	d805      	bhi.n	403f56 <_malloc_r+0x532>
  403f4a:	0bda      	lsrs	r2, r3, #15
  403f4c:	f102 0178 	add.w	r1, r2, #120	; 0x78
  403f50:	00c9      	lsls	r1, r1, #3
  403f52:	3277      	adds	r2, #119	; 0x77
  403f54:	e720      	b.n	403d98 <_malloc_r+0x374>
  403f56:	f240 5154 	movw	r1, #1364	; 0x554
  403f5a:	428a      	cmp	r2, r1
  403f5c:	d805      	bhi.n	403f6a <_malloc_r+0x546>
  403f5e:	0c9a      	lsrs	r2, r3, #18
  403f60:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  403f64:	00c9      	lsls	r1, r1, #3
  403f66:	327c      	adds	r2, #124	; 0x7c
  403f68:	e716      	b.n	403d98 <_malloc_r+0x374>
  403f6a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  403f6e:	227e      	movs	r2, #126	; 0x7e
  403f70:	e712      	b.n	403d98 <_malloc_r+0x374>
  403f72:	687b      	ldr	r3, [r7, #4]
  403f74:	e780      	b.n	403e78 <_malloc_r+0x454>
  403f76:	08f0      	lsrs	r0, r6, #3
  403f78:	f106 0308 	add.w	r3, r6, #8
  403f7c:	e600      	b.n	403b80 <_malloc_r+0x15c>
  403f7e:	bf00      	nop
  403f80:	20400b94 	.word	0x20400b94

00403f84 <memcpy>:
  403f84:	4684      	mov	ip, r0
  403f86:	ea41 0300 	orr.w	r3, r1, r0
  403f8a:	f013 0303 	ands.w	r3, r3, #3
  403f8e:	d16d      	bne.n	40406c <memcpy+0xe8>
  403f90:	3a40      	subs	r2, #64	; 0x40
  403f92:	d341      	bcc.n	404018 <memcpy+0x94>
  403f94:	f851 3b04 	ldr.w	r3, [r1], #4
  403f98:	f840 3b04 	str.w	r3, [r0], #4
  403f9c:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa0:	f840 3b04 	str.w	r3, [r0], #4
  403fa4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fa8:	f840 3b04 	str.w	r3, [r0], #4
  403fac:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb0:	f840 3b04 	str.w	r3, [r0], #4
  403fb4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fb8:	f840 3b04 	str.w	r3, [r0], #4
  403fbc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fc0:	f840 3b04 	str.w	r3, [r0], #4
  403fc4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fc8:	f840 3b04 	str.w	r3, [r0], #4
  403fcc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd0:	f840 3b04 	str.w	r3, [r0], #4
  403fd4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fd8:	f840 3b04 	str.w	r3, [r0], #4
  403fdc:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe0:	f840 3b04 	str.w	r3, [r0], #4
  403fe4:	f851 3b04 	ldr.w	r3, [r1], #4
  403fe8:	f840 3b04 	str.w	r3, [r0], #4
  403fec:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff0:	f840 3b04 	str.w	r3, [r0], #4
  403ff4:	f851 3b04 	ldr.w	r3, [r1], #4
  403ff8:	f840 3b04 	str.w	r3, [r0], #4
  403ffc:	f851 3b04 	ldr.w	r3, [r1], #4
  404000:	f840 3b04 	str.w	r3, [r0], #4
  404004:	f851 3b04 	ldr.w	r3, [r1], #4
  404008:	f840 3b04 	str.w	r3, [r0], #4
  40400c:	f851 3b04 	ldr.w	r3, [r1], #4
  404010:	f840 3b04 	str.w	r3, [r0], #4
  404014:	3a40      	subs	r2, #64	; 0x40
  404016:	d2bd      	bcs.n	403f94 <memcpy+0x10>
  404018:	3230      	adds	r2, #48	; 0x30
  40401a:	d311      	bcc.n	404040 <memcpy+0xbc>
  40401c:	f851 3b04 	ldr.w	r3, [r1], #4
  404020:	f840 3b04 	str.w	r3, [r0], #4
  404024:	f851 3b04 	ldr.w	r3, [r1], #4
  404028:	f840 3b04 	str.w	r3, [r0], #4
  40402c:	f851 3b04 	ldr.w	r3, [r1], #4
  404030:	f840 3b04 	str.w	r3, [r0], #4
  404034:	f851 3b04 	ldr.w	r3, [r1], #4
  404038:	f840 3b04 	str.w	r3, [r0], #4
  40403c:	3a10      	subs	r2, #16
  40403e:	d2ed      	bcs.n	40401c <memcpy+0x98>
  404040:	320c      	adds	r2, #12
  404042:	d305      	bcc.n	404050 <memcpy+0xcc>
  404044:	f851 3b04 	ldr.w	r3, [r1], #4
  404048:	f840 3b04 	str.w	r3, [r0], #4
  40404c:	3a04      	subs	r2, #4
  40404e:	d2f9      	bcs.n	404044 <memcpy+0xc0>
  404050:	3204      	adds	r2, #4
  404052:	d008      	beq.n	404066 <memcpy+0xe2>
  404054:	07d2      	lsls	r2, r2, #31
  404056:	bf1c      	itt	ne
  404058:	f811 3b01 	ldrbne.w	r3, [r1], #1
  40405c:	f800 3b01 	strbne.w	r3, [r0], #1
  404060:	d301      	bcc.n	404066 <memcpy+0xe2>
  404062:	880b      	ldrh	r3, [r1, #0]
  404064:	8003      	strh	r3, [r0, #0]
  404066:	4660      	mov	r0, ip
  404068:	4770      	bx	lr
  40406a:	bf00      	nop
  40406c:	2a08      	cmp	r2, #8
  40406e:	d313      	bcc.n	404098 <memcpy+0x114>
  404070:	078b      	lsls	r3, r1, #30
  404072:	d08d      	beq.n	403f90 <memcpy+0xc>
  404074:	f010 0303 	ands.w	r3, r0, #3
  404078:	d08a      	beq.n	403f90 <memcpy+0xc>
  40407a:	f1c3 0304 	rsb	r3, r3, #4
  40407e:	1ad2      	subs	r2, r2, r3
  404080:	07db      	lsls	r3, r3, #31
  404082:	bf1c      	itt	ne
  404084:	f811 3b01 	ldrbne.w	r3, [r1], #1
  404088:	f800 3b01 	strbne.w	r3, [r0], #1
  40408c:	d380      	bcc.n	403f90 <memcpy+0xc>
  40408e:	f831 3b02 	ldrh.w	r3, [r1], #2
  404092:	f820 3b02 	strh.w	r3, [r0], #2
  404096:	e77b      	b.n	403f90 <memcpy+0xc>
  404098:	3a04      	subs	r2, #4
  40409a:	d3d9      	bcc.n	404050 <memcpy+0xcc>
  40409c:	3a01      	subs	r2, #1
  40409e:	f811 3b01 	ldrb.w	r3, [r1], #1
  4040a2:	f800 3b01 	strb.w	r3, [r0], #1
  4040a6:	d2f9      	bcs.n	40409c <memcpy+0x118>
  4040a8:	780b      	ldrb	r3, [r1, #0]
  4040aa:	7003      	strb	r3, [r0, #0]
  4040ac:	784b      	ldrb	r3, [r1, #1]
  4040ae:	7043      	strb	r3, [r0, #1]
  4040b0:	788b      	ldrb	r3, [r1, #2]
  4040b2:	7083      	strb	r3, [r0, #2]
  4040b4:	4660      	mov	r0, ip
  4040b6:	4770      	bx	lr

004040b8 <memset>:
  4040b8:	b470      	push	{r4, r5, r6}
  4040ba:	0786      	lsls	r6, r0, #30
  4040bc:	d046      	beq.n	40414c <memset+0x94>
  4040be:	1e54      	subs	r4, r2, #1
  4040c0:	2a00      	cmp	r2, #0
  4040c2:	d041      	beq.n	404148 <memset+0x90>
  4040c4:	b2ca      	uxtb	r2, r1
  4040c6:	4603      	mov	r3, r0
  4040c8:	e002      	b.n	4040d0 <memset+0x18>
  4040ca:	f114 34ff 	adds.w	r4, r4, #4294967295
  4040ce:	d33b      	bcc.n	404148 <memset+0x90>
  4040d0:	f803 2b01 	strb.w	r2, [r3], #1
  4040d4:	079d      	lsls	r5, r3, #30
  4040d6:	d1f8      	bne.n	4040ca <memset+0x12>
  4040d8:	2c03      	cmp	r4, #3
  4040da:	d92e      	bls.n	40413a <memset+0x82>
  4040dc:	b2cd      	uxtb	r5, r1
  4040de:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4040e2:	2c0f      	cmp	r4, #15
  4040e4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4040e8:	d919      	bls.n	40411e <memset+0x66>
  4040ea:	f103 0210 	add.w	r2, r3, #16
  4040ee:	4626      	mov	r6, r4
  4040f0:	3e10      	subs	r6, #16
  4040f2:	2e0f      	cmp	r6, #15
  4040f4:	f842 5c10 	str.w	r5, [r2, #-16]
  4040f8:	f842 5c0c 	str.w	r5, [r2, #-12]
  4040fc:	f842 5c08 	str.w	r5, [r2, #-8]
  404100:	f842 5c04 	str.w	r5, [r2, #-4]
  404104:	f102 0210 	add.w	r2, r2, #16
  404108:	d8f2      	bhi.n	4040f0 <memset+0x38>
  40410a:	f1a4 0210 	sub.w	r2, r4, #16
  40410e:	f022 020f 	bic.w	r2, r2, #15
  404112:	f004 040f 	and.w	r4, r4, #15
  404116:	3210      	adds	r2, #16
  404118:	2c03      	cmp	r4, #3
  40411a:	4413      	add	r3, r2
  40411c:	d90d      	bls.n	40413a <memset+0x82>
  40411e:	461e      	mov	r6, r3
  404120:	4622      	mov	r2, r4
  404122:	3a04      	subs	r2, #4
  404124:	2a03      	cmp	r2, #3
  404126:	f846 5b04 	str.w	r5, [r6], #4
  40412a:	d8fa      	bhi.n	404122 <memset+0x6a>
  40412c:	1f22      	subs	r2, r4, #4
  40412e:	f022 0203 	bic.w	r2, r2, #3
  404132:	3204      	adds	r2, #4
  404134:	4413      	add	r3, r2
  404136:	f004 0403 	and.w	r4, r4, #3
  40413a:	b12c      	cbz	r4, 404148 <memset+0x90>
  40413c:	b2c9      	uxtb	r1, r1
  40413e:	441c      	add	r4, r3
  404140:	f803 1b01 	strb.w	r1, [r3], #1
  404144:	429c      	cmp	r4, r3
  404146:	d1fb      	bne.n	404140 <memset+0x88>
  404148:	bc70      	pop	{r4, r5, r6}
  40414a:	4770      	bx	lr
  40414c:	4614      	mov	r4, r2
  40414e:	4603      	mov	r3, r0
  404150:	e7c2      	b.n	4040d8 <memset+0x20>
  404152:	bf00      	nop

00404154 <__malloc_lock>:
  404154:	4801      	ldr	r0, [pc, #4]	; (40415c <__malloc_lock+0x8>)
  404156:	f001 bd57 	b.w	405c08 <__retarget_lock_acquire_recursive>
  40415a:	bf00      	nop
  40415c:	20400c30 	.word	0x20400c30

00404160 <__malloc_unlock>:
  404160:	4801      	ldr	r0, [pc, #4]	; (404168 <__malloc_unlock+0x8>)
  404162:	f001 bd53 	b.w	405c0c <__retarget_lock_release_recursive>
  404166:	bf00      	nop
  404168:	20400c30 	.word	0x20400c30

0040416c <_sbrk_r>:
  40416c:	b538      	push	{r3, r4, r5, lr}
  40416e:	4c07      	ldr	r4, [pc, #28]	; (40418c <_sbrk_r+0x20>)
  404170:	2300      	movs	r3, #0
  404172:	4605      	mov	r5, r0
  404174:	4608      	mov	r0, r1
  404176:	6023      	str	r3, [r4, #0]
  404178:	f7fc fe2a 	bl	400dd0 <_sbrk>
  40417c:	1c43      	adds	r3, r0, #1
  40417e:	d000      	beq.n	404182 <_sbrk_r+0x16>
  404180:	bd38      	pop	{r3, r4, r5, pc}
  404182:	6823      	ldr	r3, [r4, #0]
  404184:	2b00      	cmp	r3, #0
  404186:	d0fb      	beq.n	404180 <_sbrk_r+0x14>
  404188:	602b      	str	r3, [r5, #0]
  40418a:	bd38      	pop	{r3, r4, r5, pc}
  40418c:	20400c44 	.word	0x20400c44

00404190 <setbuf>:
  404190:	2900      	cmp	r1, #0
  404192:	bf0c      	ite	eq
  404194:	2202      	moveq	r2, #2
  404196:	2200      	movne	r2, #0
  404198:	f44f 6380 	mov.w	r3, #1024	; 0x400
  40419c:	f000 b800 	b.w	4041a0 <setvbuf>

004041a0 <setvbuf>:
  4041a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4041a4:	4c61      	ldr	r4, [pc, #388]	; (40432c <setvbuf+0x18c>)
  4041a6:	6825      	ldr	r5, [r4, #0]
  4041a8:	b083      	sub	sp, #12
  4041aa:	4604      	mov	r4, r0
  4041ac:	460f      	mov	r7, r1
  4041ae:	4690      	mov	r8, r2
  4041b0:	461e      	mov	r6, r3
  4041b2:	b115      	cbz	r5, 4041ba <setvbuf+0x1a>
  4041b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4041b6:	2b00      	cmp	r3, #0
  4041b8:	d064      	beq.n	404284 <setvbuf+0xe4>
  4041ba:	f1b8 0f02 	cmp.w	r8, #2
  4041be:	d006      	beq.n	4041ce <setvbuf+0x2e>
  4041c0:	f1b8 0f01 	cmp.w	r8, #1
  4041c4:	f200 809f 	bhi.w	404306 <setvbuf+0x166>
  4041c8:	2e00      	cmp	r6, #0
  4041ca:	f2c0 809c 	blt.w	404306 <setvbuf+0x166>
  4041ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4041d0:	07d8      	lsls	r0, r3, #31
  4041d2:	d534      	bpl.n	40423e <setvbuf+0x9e>
  4041d4:	4621      	mov	r1, r4
  4041d6:	4628      	mov	r0, r5
  4041d8:	f001 f8fe 	bl	4053d8 <_fflush_r>
  4041dc:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4041de:	b141      	cbz	r1, 4041f2 <setvbuf+0x52>
  4041e0:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4041e4:	4299      	cmp	r1, r3
  4041e6:	d002      	beq.n	4041ee <setvbuf+0x4e>
  4041e8:	4628      	mov	r0, r5
  4041ea:	f001 fa73 	bl	4056d4 <_free_r>
  4041ee:	2300      	movs	r3, #0
  4041f0:	6323      	str	r3, [r4, #48]	; 0x30
  4041f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4041f6:	2200      	movs	r2, #0
  4041f8:	61a2      	str	r2, [r4, #24]
  4041fa:	6062      	str	r2, [r4, #4]
  4041fc:	061a      	lsls	r2, r3, #24
  4041fe:	d43a      	bmi.n	404276 <setvbuf+0xd6>
  404200:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404204:	f023 0303 	bic.w	r3, r3, #3
  404208:	f1b8 0f02 	cmp.w	r8, #2
  40420c:	81a3      	strh	r3, [r4, #12]
  40420e:	d01d      	beq.n	40424c <setvbuf+0xac>
  404210:	ab01      	add	r3, sp, #4
  404212:	466a      	mov	r2, sp
  404214:	4621      	mov	r1, r4
  404216:	4628      	mov	r0, r5
  404218:	f001 fcfa 	bl	405c10 <__swhatbuf_r>
  40421c:	89a3      	ldrh	r3, [r4, #12]
  40421e:	4318      	orrs	r0, r3
  404220:	81a0      	strh	r0, [r4, #12]
  404222:	2e00      	cmp	r6, #0
  404224:	d132      	bne.n	40428c <setvbuf+0xec>
  404226:	9e00      	ldr	r6, [sp, #0]
  404228:	4630      	mov	r0, r6
  40422a:	f7ff fbeb 	bl	403a04 <malloc>
  40422e:	4607      	mov	r7, r0
  404230:	2800      	cmp	r0, #0
  404232:	d06b      	beq.n	40430c <setvbuf+0x16c>
  404234:	89a3      	ldrh	r3, [r4, #12]
  404236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40423a:	81a3      	strh	r3, [r4, #12]
  40423c:	e028      	b.n	404290 <setvbuf+0xf0>
  40423e:	89a3      	ldrh	r3, [r4, #12]
  404240:	0599      	lsls	r1, r3, #22
  404242:	d4c7      	bmi.n	4041d4 <setvbuf+0x34>
  404244:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404246:	f001 fcdf 	bl	405c08 <__retarget_lock_acquire_recursive>
  40424a:	e7c3      	b.n	4041d4 <setvbuf+0x34>
  40424c:	2500      	movs	r5, #0
  40424e:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404250:	2600      	movs	r6, #0
  404252:	f104 0243 	add.w	r2, r4, #67	; 0x43
  404256:	f043 0302 	orr.w	r3, r3, #2
  40425a:	2001      	movs	r0, #1
  40425c:	60a6      	str	r6, [r4, #8]
  40425e:	07ce      	lsls	r6, r1, #31
  404260:	81a3      	strh	r3, [r4, #12]
  404262:	6022      	str	r2, [r4, #0]
  404264:	6122      	str	r2, [r4, #16]
  404266:	6160      	str	r0, [r4, #20]
  404268:	d401      	bmi.n	40426e <setvbuf+0xce>
  40426a:	0598      	lsls	r0, r3, #22
  40426c:	d53e      	bpl.n	4042ec <setvbuf+0x14c>
  40426e:	4628      	mov	r0, r5
  404270:	b003      	add	sp, #12
  404272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404276:	6921      	ldr	r1, [r4, #16]
  404278:	4628      	mov	r0, r5
  40427a:	f001 fa2b 	bl	4056d4 <_free_r>
  40427e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404282:	e7bd      	b.n	404200 <setvbuf+0x60>
  404284:	4628      	mov	r0, r5
  404286:	f001 f8ff 	bl	405488 <__sinit>
  40428a:	e796      	b.n	4041ba <setvbuf+0x1a>
  40428c:	2f00      	cmp	r7, #0
  40428e:	d0cb      	beq.n	404228 <setvbuf+0x88>
  404290:	6bab      	ldr	r3, [r5, #56]	; 0x38
  404292:	2b00      	cmp	r3, #0
  404294:	d033      	beq.n	4042fe <setvbuf+0x15e>
  404296:	9b00      	ldr	r3, [sp, #0]
  404298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40429c:	6027      	str	r7, [r4, #0]
  40429e:	429e      	cmp	r6, r3
  4042a0:	bf1c      	itt	ne
  4042a2:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4042a6:	81a2      	strhne	r2, [r4, #12]
  4042a8:	f1b8 0f01 	cmp.w	r8, #1
  4042ac:	bf04      	itt	eq
  4042ae:	f042 0201 	orreq.w	r2, r2, #1
  4042b2:	81a2      	strheq	r2, [r4, #12]
  4042b4:	b292      	uxth	r2, r2
  4042b6:	f012 0308 	ands.w	r3, r2, #8
  4042ba:	6127      	str	r7, [r4, #16]
  4042bc:	6166      	str	r6, [r4, #20]
  4042be:	d00e      	beq.n	4042de <setvbuf+0x13e>
  4042c0:	07d1      	lsls	r1, r2, #31
  4042c2:	d51a      	bpl.n	4042fa <setvbuf+0x15a>
  4042c4:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042c6:	4276      	negs	r6, r6
  4042c8:	2300      	movs	r3, #0
  4042ca:	f015 0501 	ands.w	r5, r5, #1
  4042ce:	61a6      	str	r6, [r4, #24]
  4042d0:	60a3      	str	r3, [r4, #8]
  4042d2:	d009      	beq.n	4042e8 <setvbuf+0x148>
  4042d4:	2500      	movs	r5, #0
  4042d6:	4628      	mov	r0, r5
  4042d8:	b003      	add	sp, #12
  4042da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042de:	60a3      	str	r3, [r4, #8]
  4042e0:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4042e2:	f015 0501 	ands.w	r5, r5, #1
  4042e6:	d1f5      	bne.n	4042d4 <setvbuf+0x134>
  4042e8:	0593      	lsls	r3, r2, #22
  4042ea:	d4c0      	bmi.n	40426e <setvbuf+0xce>
  4042ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4042ee:	f001 fc8d 	bl	405c0c <__retarget_lock_release_recursive>
  4042f2:	4628      	mov	r0, r5
  4042f4:	b003      	add	sp, #12
  4042f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4042fa:	60a6      	str	r6, [r4, #8]
  4042fc:	e7f0      	b.n	4042e0 <setvbuf+0x140>
  4042fe:	4628      	mov	r0, r5
  404300:	f001 f8c2 	bl	405488 <__sinit>
  404304:	e7c7      	b.n	404296 <setvbuf+0xf6>
  404306:	f04f 35ff 	mov.w	r5, #4294967295
  40430a:	e7b0      	b.n	40426e <setvbuf+0xce>
  40430c:	f8dd 9000 	ldr.w	r9, [sp]
  404310:	45b1      	cmp	r9, r6
  404312:	d004      	beq.n	40431e <setvbuf+0x17e>
  404314:	4648      	mov	r0, r9
  404316:	f7ff fb75 	bl	403a04 <malloc>
  40431a:	4607      	mov	r7, r0
  40431c:	b920      	cbnz	r0, 404328 <setvbuf+0x188>
  40431e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404322:	f04f 35ff 	mov.w	r5, #4294967295
  404326:	e792      	b.n	40424e <setvbuf+0xae>
  404328:	464e      	mov	r6, r9
  40432a:	e783      	b.n	404234 <setvbuf+0x94>
  40432c:	2040000c 	.word	0x2040000c
	...

00404340 <strlen>:
  404340:	f890 f000 	pld	[r0]
  404344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404348:	f020 0107 	bic.w	r1, r0, #7
  40434c:	f06f 0c00 	mvn.w	ip, #0
  404350:	f010 0407 	ands.w	r4, r0, #7
  404354:	f891 f020 	pld	[r1, #32]
  404358:	f040 8049 	bne.w	4043ee <strlen+0xae>
  40435c:	f04f 0400 	mov.w	r4, #0
  404360:	f06f 0007 	mvn.w	r0, #7
  404364:	e9d1 2300 	ldrd	r2, r3, [r1]
  404368:	f891 f040 	pld	[r1, #64]	; 0x40
  40436c:	f100 0008 	add.w	r0, r0, #8
  404370:	fa82 f24c 	uadd8	r2, r2, ip
  404374:	faa4 f28c 	sel	r2, r4, ip
  404378:	fa83 f34c 	uadd8	r3, r3, ip
  40437c:	faa2 f38c 	sel	r3, r2, ip
  404380:	bb4b      	cbnz	r3, 4043d6 <strlen+0x96>
  404382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404386:	fa82 f24c 	uadd8	r2, r2, ip
  40438a:	f100 0008 	add.w	r0, r0, #8
  40438e:	faa4 f28c 	sel	r2, r4, ip
  404392:	fa83 f34c 	uadd8	r3, r3, ip
  404396:	faa2 f38c 	sel	r3, r2, ip
  40439a:	b9e3      	cbnz	r3, 4043d6 <strlen+0x96>
  40439c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4043a0:	fa82 f24c 	uadd8	r2, r2, ip
  4043a4:	f100 0008 	add.w	r0, r0, #8
  4043a8:	faa4 f28c 	sel	r2, r4, ip
  4043ac:	fa83 f34c 	uadd8	r3, r3, ip
  4043b0:	faa2 f38c 	sel	r3, r2, ip
  4043b4:	b97b      	cbnz	r3, 4043d6 <strlen+0x96>
  4043b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4043ba:	f101 0120 	add.w	r1, r1, #32
  4043be:	fa82 f24c 	uadd8	r2, r2, ip
  4043c2:	f100 0008 	add.w	r0, r0, #8
  4043c6:	faa4 f28c 	sel	r2, r4, ip
  4043ca:	fa83 f34c 	uadd8	r3, r3, ip
  4043ce:	faa2 f38c 	sel	r3, r2, ip
  4043d2:	2b00      	cmp	r3, #0
  4043d4:	d0c6      	beq.n	404364 <strlen+0x24>
  4043d6:	2a00      	cmp	r2, #0
  4043d8:	bf04      	itt	eq
  4043da:	3004      	addeq	r0, #4
  4043dc:	461a      	moveq	r2, r3
  4043de:	ba12      	rev	r2, r2
  4043e0:	fab2 f282 	clz	r2, r2
  4043e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4043e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4043ec:	4770      	bx	lr
  4043ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4043f2:	f004 0503 	and.w	r5, r4, #3
  4043f6:	f1c4 0000 	rsb	r0, r4, #0
  4043fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4043fe:	f014 0f04 	tst.w	r4, #4
  404402:	f891 f040 	pld	[r1, #64]	; 0x40
  404406:	fa0c f505 	lsl.w	r5, ip, r5
  40440a:	ea62 0205 	orn	r2, r2, r5
  40440e:	bf1c      	itt	ne
  404410:	ea63 0305 	ornne	r3, r3, r5
  404414:	4662      	movne	r2, ip
  404416:	f04f 0400 	mov.w	r4, #0
  40441a:	e7a9      	b.n	404370 <strlen+0x30>

0040441c <__sprint_r.part.0>:
  40441c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404420:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404422:	049c      	lsls	r4, r3, #18
  404424:	4693      	mov	fp, r2
  404426:	d52f      	bpl.n	404488 <__sprint_r.part.0+0x6c>
  404428:	6893      	ldr	r3, [r2, #8]
  40442a:	6812      	ldr	r2, [r2, #0]
  40442c:	b353      	cbz	r3, 404484 <__sprint_r.part.0+0x68>
  40442e:	460e      	mov	r6, r1
  404430:	4607      	mov	r7, r0
  404432:	f102 0908 	add.w	r9, r2, #8
  404436:	e919 0420 	ldmdb	r9, {r5, sl}
  40443a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  40443e:	d017      	beq.n	404470 <__sprint_r.part.0+0x54>
  404440:	3d04      	subs	r5, #4
  404442:	2400      	movs	r4, #0
  404444:	e001      	b.n	40444a <__sprint_r.part.0+0x2e>
  404446:	45a0      	cmp	r8, r4
  404448:	d010      	beq.n	40446c <__sprint_r.part.0+0x50>
  40444a:	4632      	mov	r2, r6
  40444c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404450:	4638      	mov	r0, r7
  404452:	f001 f8bb 	bl	4055cc <_fputwc_r>
  404456:	1c43      	adds	r3, r0, #1
  404458:	f104 0401 	add.w	r4, r4, #1
  40445c:	d1f3      	bne.n	404446 <__sprint_r.part.0+0x2a>
  40445e:	2300      	movs	r3, #0
  404460:	f8cb 3008 	str.w	r3, [fp, #8]
  404464:	f8cb 3004 	str.w	r3, [fp, #4]
  404468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40446c:	f8db 3008 	ldr.w	r3, [fp, #8]
  404470:	f02a 0a03 	bic.w	sl, sl, #3
  404474:	eba3 030a 	sub.w	r3, r3, sl
  404478:	f8cb 3008 	str.w	r3, [fp, #8]
  40447c:	f109 0908 	add.w	r9, r9, #8
  404480:	2b00      	cmp	r3, #0
  404482:	d1d8      	bne.n	404436 <__sprint_r.part.0+0x1a>
  404484:	2000      	movs	r0, #0
  404486:	e7ea      	b.n	40445e <__sprint_r.part.0+0x42>
  404488:	f001 fa0a 	bl	4058a0 <__sfvwrite_r>
  40448c:	2300      	movs	r3, #0
  40448e:	f8cb 3008 	str.w	r3, [fp, #8]
  404492:	f8cb 3004 	str.w	r3, [fp, #4]
  404496:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40449a:	bf00      	nop

0040449c <_vfiprintf_r>:
  40449c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4044a0:	b0ad      	sub	sp, #180	; 0xb4
  4044a2:	461d      	mov	r5, r3
  4044a4:	468b      	mov	fp, r1
  4044a6:	4690      	mov	r8, r2
  4044a8:	9307      	str	r3, [sp, #28]
  4044aa:	9006      	str	r0, [sp, #24]
  4044ac:	b118      	cbz	r0, 4044b6 <_vfiprintf_r+0x1a>
  4044ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4044b0:	2b00      	cmp	r3, #0
  4044b2:	f000 80f3 	beq.w	40469c <_vfiprintf_r+0x200>
  4044b6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044ba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4044be:	07df      	lsls	r7, r3, #31
  4044c0:	b281      	uxth	r1, r0
  4044c2:	d402      	bmi.n	4044ca <_vfiprintf_r+0x2e>
  4044c4:	058e      	lsls	r6, r1, #22
  4044c6:	f140 80fc 	bpl.w	4046c2 <_vfiprintf_r+0x226>
  4044ca:	048c      	lsls	r4, r1, #18
  4044cc:	d40a      	bmi.n	4044e4 <_vfiprintf_r+0x48>
  4044ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4044d2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  4044d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  4044da:	f8ab 100c 	strh.w	r1, [fp, #12]
  4044de:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  4044e2:	b289      	uxth	r1, r1
  4044e4:	0708      	lsls	r0, r1, #28
  4044e6:	f140 80b3 	bpl.w	404650 <_vfiprintf_r+0x1b4>
  4044ea:	f8db 3010 	ldr.w	r3, [fp, #16]
  4044ee:	2b00      	cmp	r3, #0
  4044f0:	f000 80ae 	beq.w	404650 <_vfiprintf_r+0x1b4>
  4044f4:	f001 031a 	and.w	r3, r1, #26
  4044f8:	2b0a      	cmp	r3, #10
  4044fa:	f000 80b5 	beq.w	404668 <_vfiprintf_r+0x1cc>
  4044fe:	2300      	movs	r3, #0
  404500:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404504:	930b      	str	r3, [sp, #44]	; 0x2c
  404506:	9311      	str	r3, [sp, #68]	; 0x44
  404508:	9310      	str	r3, [sp, #64]	; 0x40
  40450a:	9303      	str	r3, [sp, #12]
  40450c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404510:	46ca      	mov	sl, r9
  404512:	f8cd b010 	str.w	fp, [sp, #16]
  404516:	f898 3000 	ldrb.w	r3, [r8]
  40451a:	4644      	mov	r4, r8
  40451c:	b1fb      	cbz	r3, 40455e <_vfiprintf_r+0xc2>
  40451e:	2b25      	cmp	r3, #37	; 0x25
  404520:	d102      	bne.n	404528 <_vfiprintf_r+0x8c>
  404522:	e01c      	b.n	40455e <_vfiprintf_r+0xc2>
  404524:	2b25      	cmp	r3, #37	; 0x25
  404526:	d003      	beq.n	404530 <_vfiprintf_r+0x94>
  404528:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  40452c:	2b00      	cmp	r3, #0
  40452e:	d1f9      	bne.n	404524 <_vfiprintf_r+0x88>
  404530:	eba4 0508 	sub.w	r5, r4, r8
  404534:	b19d      	cbz	r5, 40455e <_vfiprintf_r+0xc2>
  404536:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404538:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40453a:	f8ca 8000 	str.w	r8, [sl]
  40453e:	3301      	adds	r3, #1
  404540:	442a      	add	r2, r5
  404542:	2b07      	cmp	r3, #7
  404544:	f8ca 5004 	str.w	r5, [sl, #4]
  404548:	9211      	str	r2, [sp, #68]	; 0x44
  40454a:	9310      	str	r3, [sp, #64]	; 0x40
  40454c:	dd7a      	ble.n	404644 <_vfiprintf_r+0x1a8>
  40454e:	2a00      	cmp	r2, #0
  404550:	f040 84b0 	bne.w	404eb4 <_vfiprintf_r+0xa18>
  404554:	9b03      	ldr	r3, [sp, #12]
  404556:	9210      	str	r2, [sp, #64]	; 0x40
  404558:	442b      	add	r3, r5
  40455a:	46ca      	mov	sl, r9
  40455c:	9303      	str	r3, [sp, #12]
  40455e:	7823      	ldrb	r3, [r4, #0]
  404560:	2b00      	cmp	r3, #0
  404562:	f000 83e0 	beq.w	404d26 <_vfiprintf_r+0x88a>
  404566:	2000      	movs	r0, #0
  404568:	f04f 0300 	mov.w	r3, #0
  40456c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404570:	f104 0801 	add.w	r8, r4, #1
  404574:	7862      	ldrb	r2, [r4, #1]
  404576:	4605      	mov	r5, r0
  404578:	4606      	mov	r6, r0
  40457a:	4603      	mov	r3, r0
  40457c:	f04f 34ff 	mov.w	r4, #4294967295
  404580:	f108 0801 	add.w	r8, r8, #1
  404584:	f1a2 0120 	sub.w	r1, r2, #32
  404588:	2958      	cmp	r1, #88	; 0x58
  40458a:	f200 82de 	bhi.w	404b4a <_vfiprintf_r+0x6ae>
  40458e:	e8df f011 	tbh	[pc, r1, lsl #1]
  404592:	0221      	.short	0x0221
  404594:	02dc02dc 	.word	0x02dc02dc
  404598:	02dc0229 	.word	0x02dc0229
  40459c:	02dc02dc 	.word	0x02dc02dc
  4045a0:	02dc02dc 	.word	0x02dc02dc
  4045a4:	028902dc 	.word	0x028902dc
  4045a8:	02dc0295 	.word	0x02dc0295
  4045ac:	02bd00a2 	.word	0x02bd00a2
  4045b0:	019f02dc 	.word	0x019f02dc
  4045b4:	01a401a4 	.word	0x01a401a4
  4045b8:	01a401a4 	.word	0x01a401a4
  4045bc:	01a401a4 	.word	0x01a401a4
  4045c0:	01a401a4 	.word	0x01a401a4
  4045c4:	02dc01a4 	.word	0x02dc01a4
  4045c8:	02dc02dc 	.word	0x02dc02dc
  4045cc:	02dc02dc 	.word	0x02dc02dc
  4045d0:	02dc02dc 	.word	0x02dc02dc
  4045d4:	02dc02dc 	.word	0x02dc02dc
  4045d8:	01b202dc 	.word	0x01b202dc
  4045dc:	02dc02dc 	.word	0x02dc02dc
  4045e0:	02dc02dc 	.word	0x02dc02dc
  4045e4:	02dc02dc 	.word	0x02dc02dc
  4045e8:	02dc02dc 	.word	0x02dc02dc
  4045ec:	02dc02dc 	.word	0x02dc02dc
  4045f0:	02dc0197 	.word	0x02dc0197
  4045f4:	02dc02dc 	.word	0x02dc02dc
  4045f8:	02dc02dc 	.word	0x02dc02dc
  4045fc:	02dc019b 	.word	0x02dc019b
  404600:	025302dc 	.word	0x025302dc
  404604:	02dc02dc 	.word	0x02dc02dc
  404608:	02dc02dc 	.word	0x02dc02dc
  40460c:	02dc02dc 	.word	0x02dc02dc
  404610:	02dc02dc 	.word	0x02dc02dc
  404614:	02dc02dc 	.word	0x02dc02dc
  404618:	021b025a 	.word	0x021b025a
  40461c:	02dc02dc 	.word	0x02dc02dc
  404620:	026e02dc 	.word	0x026e02dc
  404624:	02dc021b 	.word	0x02dc021b
  404628:	027302dc 	.word	0x027302dc
  40462c:	01f502dc 	.word	0x01f502dc
  404630:	02090182 	.word	0x02090182
  404634:	02dc02d7 	.word	0x02dc02d7
  404638:	02dc029a 	.word	0x02dc029a
  40463c:	02dc00a7 	.word	0x02dc00a7
  404640:	022e02dc 	.word	0x022e02dc
  404644:	f10a 0a08 	add.w	sl, sl, #8
  404648:	9b03      	ldr	r3, [sp, #12]
  40464a:	442b      	add	r3, r5
  40464c:	9303      	str	r3, [sp, #12]
  40464e:	e786      	b.n	40455e <_vfiprintf_r+0xc2>
  404650:	4659      	mov	r1, fp
  404652:	9806      	ldr	r0, [sp, #24]
  404654:	f000 fdac 	bl	4051b0 <__swsetup_r>
  404658:	bb18      	cbnz	r0, 4046a2 <_vfiprintf_r+0x206>
  40465a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  40465e:	f001 031a 	and.w	r3, r1, #26
  404662:	2b0a      	cmp	r3, #10
  404664:	f47f af4b 	bne.w	4044fe <_vfiprintf_r+0x62>
  404668:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  40466c:	2b00      	cmp	r3, #0
  40466e:	f6ff af46 	blt.w	4044fe <_vfiprintf_r+0x62>
  404672:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404676:	07db      	lsls	r3, r3, #31
  404678:	d405      	bmi.n	404686 <_vfiprintf_r+0x1ea>
  40467a:	058f      	lsls	r7, r1, #22
  40467c:	d403      	bmi.n	404686 <_vfiprintf_r+0x1ea>
  40467e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404682:	f001 fac3 	bl	405c0c <__retarget_lock_release_recursive>
  404686:	462b      	mov	r3, r5
  404688:	4642      	mov	r2, r8
  40468a:	4659      	mov	r1, fp
  40468c:	9806      	ldr	r0, [sp, #24]
  40468e:	f000 fd4d 	bl	40512c <__sbprintf>
  404692:	9003      	str	r0, [sp, #12]
  404694:	9803      	ldr	r0, [sp, #12]
  404696:	b02d      	add	sp, #180	; 0xb4
  404698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40469c:	f000 fef4 	bl	405488 <__sinit>
  4046a0:	e709      	b.n	4044b6 <_vfiprintf_r+0x1a>
  4046a2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  4046a6:	07d9      	lsls	r1, r3, #31
  4046a8:	d404      	bmi.n	4046b4 <_vfiprintf_r+0x218>
  4046aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  4046ae:	059a      	lsls	r2, r3, #22
  4046b0:	f140 84aa 	bpl.w	405008 <_vfiprintf_r+0xb6c>
  4046b4:	f04f 33ff 	mov.w	r3, #4294967295
  4046b8:	9303      	str	r3, [sp, #12]
  4046ba:	9803      	ldr	r0, [sp, #12]
  4046bc:	b02d      	add	sp, #180	; 0xb4
  4046be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046c2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  4046c6:	f001 fa9f 	bl	405c08 <__retarget_lock_acquire_recursive>
  4046ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  4046ce:	b281      	uxth	r1, r0
  4046d0:	e6fb      	b.n	4044ca <_vfiprintf_r+0x2e>
  4046d2:	4276      	negs	r6, r6
  4046d4:	9207      	str	r2, [sp, #28]
  4046d6:	f043 0304 	orr.w	r3, r3, #4
  4046da:	f898 2000 	ldrb.w	r2, [r8]
  4046de:	e74f      	b.n	404580 <_vfiprintf_r+0xe4>
  4046e0:	9608      	str	r6, [sp, #32]
  4046e2:	069e      	lsls	r6, r3, #26
  4046e4:	f100 8450 	bmi.w	404f88 <_vfiprintf_r+0xaec>
  4046e8:	9907      	ldr	r1, [sp, #28]
  4046ea:	06dd      	lsls	r5, r3, #27
  4046ec:	460a      	mov	r2, r1
  4046ee:	f100 83ef 	bmi.w	404ed0 <_vfiprintf_r+0xa34>
  4046f2:	0658      	lsls	r0, r3, #25
  4046f4:	f140 83ec 	bpl.w	404ed0 <_vfiprintf_r+0xa34>
  4046f8:	880e      	ldrh	r6, [r1, #0]
  4046fa:	3104      	adds	r1, #4
  4046fc:	2700      	movs	r7, #0
  4046fe:	2201      	movs	r2, #1
  404700:	9107      	str	r1, [sp, #28]
  404702:	f04f 0100 	mov.w	r1, #0
  404706:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  40470a:	2500      	movs	r5, #0
  40470c:	1c61      	adds	r1, r4, #1
  40470e:	f000 8116 	beq.w	40493e <_vfiprintf_r+0x4a2>
  404712:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404716:	9102      	str	r1, [sp, #8]
  404718:	ea56 0107 	orrs.w	r1, r6, r7
  40471c:	f040 8114 	bne.w	404948 <_vfiprintf_r+0x4ac>
  404720:	2c00      	cmp	r4, #0
  404722:	f040 835c 	bne.w	404dde <_vfiprintf_r+0x942>
  404726:	2a00      	cmp	r2, #0
  404728:	f040 83b7 	bne.w	404e9a <_vfiprintf_r+0x9fe>
  40472c:	f013 0301 	ands.w	r3, r3, #1
  404730:	9305      	str	r3, [sp, #20]
  404732:	f000 8457 	beq.w	404fe4 <_vfiprintf_r+0xb48>
  404736:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40473a:	2330      	movs	r3, #48	; 0x30
  40473c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404740:	9b05      	ldr	r3, [sp, #20]
  404742:	42a3      	cmp	r3, r4
  404744:	bfb8      	it	lt
  404746:	4623      	movlt	r3, r4
  404748:	9301      	str	r3, [sp, #4]
  40474a:	b10d      	cbz	r5, 404750 <_vfiprintf_r+0x2b4>
  40474c:	3301      	adds	r3, #1
  40474e:	9301      	str	r3, [sp, #4]
  404750:	9b02      	ldr	r3, [sp, #8]
  404752:	f013 0302 	ands.w	r3, r3, #2
  404756:	9309      	str	r3, [sp, #36]	; 0x24
  404758:	d002      	beq.n	404760 <_vfiprintf_r+0x2c4>
  40475a:	9b01      	ldr	r3, [sp, #4]
  40475c:	3302      	adds	r3, #2
  40475e:	9301      	str	r3, [sp, #4]
  404760:	9b02      	ldr	r3, [sp, #8]
  404762:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404766:	930a      	str	r3, [sp, #40]	; 0x28
  404768:	f040 8217 	bne.w	404b9a <_vfiprintf_r+0x6fe>
  40476c:	9b08      	ldr	r3, [sp, #32]
  40476e:	9a01      	ldr	r2, [sp, #4]
  404770:	1a9d      	subs	r5, r3, r2
  404772:	2d00      	cmp	r5, #0
  404774:	f340 8211 	ble.w	404b9a <_vfiprintf_r+0x6fe>
  404778:	2d10      	cmp	r5, #16
  40477a:	f340 8490 	ble.w	40509e <_vfiprintf_r+0xc02>
  40477e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404780:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404782:	4ec4      	ldr	r6, [pc, #784]	; (404a94 <_vfiprintf_r+0x5f8>)
  404784:	46d6      	mov	lr, sl
  404786:	2710      	movs	r7, #16
  404788:	46a2      	mov	sl, r4
  40478a:	4619      	mov	r1, r3
  40478c:	9c06      	ldr	r4, [sp, #24]
  40478e:	e007      	b.n	4047a0 <_vfiprintf_r+0x304>
  404790:	f101 0c02 	add.w	ip, r1, #2
  404794:	f10e 0e08 	add.w	lr, lr, #8
  404798:	4601      	mov	r1, r0
  40479a:	3d10      	subs	r5, #16
  40479c:	2d10      	cmp	r5, #16
  40479e:	dd11      	ble.n	4047c4 <_vfiprintf_r+0x328>
  4047a0:	1c48      	adds	r0, r1, #1
  4047a2:	3210      	adds	r2, #16
  4047a4:	2807      	cmp	r0, #7
  4047a6:	9211      	str	r2, [sp, #68]	; 0x44
  4047a8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  4047ac:	9010      	str	r0, [sp, #64]	; 0x40
  4047ae:	ddef      	ble.n	404790 <_vfiprintf_r+0x2f4>
  4047b0:	2a00      	cmp	r2, #0
  4047b2:	f040 81e4 	bne.w	404b7e <_vfiprintf_r+0x6e2>
  4047b6:	3d10      	subs	r5, #16
  4047b8:	2d10      	cmp	r5, #16
  4047ba:	4611      	mov	r1, r2
  4047bc:	f04f 0c01 	mov.w	ip, #1
  4047c0:	46ce      	mov	lr, r9
  4047c2:	dced      	bgt.n	4047a0 <_vfiprintf_r+0x304>
  4047c4:	4654      	mov	r4, sl
  4047c6:	4661      	mov	r1, ip
  4047c8:	46f2      	mov	sl, lr
  4047ca:	442a      	add	r2, r5
  4047cc:	2907      	cmp	r1, #7
  4047ce:	9211      	str	r2, [sp, #68]	; 0x44
  4047d0:	f8ca 6000 	str.w	r6, [sl]
  4047d4:	f8ca 5004 	str.w	r5, [sl, #4]
  4047d8:	9110      	str	r1, [sp, #64]	; 0x40
  4047da:	f300 82ec 	bgt.w	404db6 <_vfiprintf_r+0x91a>
  4047de:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4047e2:	f10a 0a08 	add.w	sl, sl, #8
  4047e6:	1c48      	adds	r0, r1, #1
  4047e8:	2d00      	cmp	r5, #0
  4047ea:	f040 81de 	bne.w	404baa <_vfiprintf_r+0x70e>
  4047ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4047f0:	2b00      	cmp	r3, #0
  4047f2:	f000 81f8 	beq.w	404be6 <_vfiprintf_r+0x74a>
  4047f6:	3202      	adds	r2, #2
  4047f8:	a90e      	add	r1, sp, #56	; 0x38
  4047fa:	2302      	movs	r3, #2
  4047fc:	2807      	cmp	r0, #7
  4047fe:	9211      	str	r2, [sp, #68]	; 0x44
  404800:	9010      	str	r0, [sp, #64]	; 0x40
  404802:	e88a 000a 	stmia.w	sl, {r1, r3}
  404806:	f340 81ea 	ble.w	404bde <_vfiprintf_r+0x742>
  40480a:	2a00      	cmp	r2, #0
  40480c:	f040 838c 	bne.w	404f28 <_vfiprintf_r+0xa8c>
  404810:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404812:	2b80      	cmp	r3, #128	; 0x80
  404814:	f04f 0001 	mov.w	r0, #1
  404818:	4611      	mov	r1, r2
  40481a:	46ca      	mov	sl, r9
  40481c:	f040 81e7 	bne.w	404bee <_vfiprintf_r+0x752>
  404820:	9b08      	ldr	r3, [sp, #32]
  404822:	9d01      	ldr	r5, [sp, #4]
  404824:	1b5e      	subs	r6, r3, r5
  404826:	2e00      	cmp	r6, #0
  404828:	f340 81e1 	ble.w	404bee <_vfiprintf_r+0x752>
  40482c:	2e10      	cmp	r6, #16
  40482e:	4d9a      	ldr	r5, [pc, #616]	; (404a98 <_vfiprintf_r+0x5fc>)
  404830:	f340 8450 	ble.w	4050d4 <_vfiprintf_r+0xc38>
  404834:	46d4      	mov	ip, sl
  404836:	2710      	movs	r7, #16
  404838:	46a2      	mov	sl, r4
  40483a:	9c06      	ldr	r4, [sp, #24]
  40483c:	e007      	b.n	40484e <_vfiprintf_r+0x3b2>
  40483e:	f101 0e02 	add.w	lr, r1, #2
  404842:	f10c 0c08 	add.w	ip, ip, #8
  404846:	4601      	mov	r1, r0
  404848:	3e10      	subs	r6, #16
  40484a:	2e10      	cmp	r6, #16
  40484c:	dd11      	ble.n	404872 <_vfiprintf_r+0x3d6>
  40484e:	1c48      	adds	r0, r1, #1
  404850:	3210      	adds	r2, #16
  404852:	2807      	cmp	r0, #7
  404854:	9211      	str	r2, [sp, #68]	; 0x44
  404856:	e88c 00a0 	stmia.w	ip, {r5, r7}
  40485a:	9010      	str	r0, [sp, #64]	; 0x40
  40485c:	ddef      	ble.n	40483e <_vfiprintf_r+0x3a2>
  40485e:	2a00      	cmp	r2, #0
  404860:	f040 829d 	bne.w	404d9e <_vfiprintf_r+0x902>
  404864:	3e10      	subs	r6, #16
  404866:	2e10      	cmp	r6, #16
  404868:	f04f 0e01 	mov.w	lr, #1
  40486c:	4611      	mov	r1, r2
  40486e:	46cc      	mov	ip, r9
  404870:	dced      	bgt.n	40484e <_vfiprintf_r+0x3b2>
  404872:	4654      	mov	r4, sl
  404874:	46e2      	mov	sl, ip
  404876:	4432      	add	r2, r6
  404878:	f1be 0f07 	cmp.w	lr, #7
  40487c:	9211      	str	r2, [sp, #68]	; 0x44
  40487e:	e88a 0060 	stmia.w	sl, {r5, r6}
  404882:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404886:	f300 8369 	bgt.w	404f5c <_vfiprintf_r+0xac0>
  40488a:	f10a 0a08 	add.w	sl, sl, #8
  40488e:	f10e 0001 	add.w	r0, lr, #1
  404892:	4671      	mov	r1, lr
  404894:	e1ab      	b.n	404bee <_vfiprintf_r+0x752>
  404896:	9608      	str	r6, [sp, #32]
  404898:	f013 0220 	ands.w	r2, r3, #32
  40489c:	f040 838c 	bne.w	404fb8 <_vfiprintf_r+0xb1c>
  4048a0:	f013 0110 	ands.w	r1, r3, #16
  4048a4:	f040 831a 	bne.w	404edc <_vfiprintf_r+0xa40>
  4048a8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  4048ac:	f000 8316 	beq.w	404edc <_vfiprintf_r+0xa40>
  4048b0:	9807      	ldr	r0, [sp, #28]
  4048b2:	460a      	mov	r2, r1
  4048b4:	4601      	mov	r1, r0
  4048b6:	3104      	adds	r1, #4
  4048b8:	8806      	ldrh	r6, [r0, #0]
  4048ba:	9107      	str	r1, [sp, #28]
  4048bc:	2700      	movs	r7, #0
  4048be:	e720      	b.n	404702 <_vfiprintf_r+0x266>
  4048c0:	9608      	str	r6, [sp, #32]
  4048c2:	f043 0310 	orr.w	r3, r3, #16
  4048c6:	e7e7      	b.n	404898 <_vfiprintf_r+0x3fc>
  4048c8:	9608      	str	r6, [sp, #32]
  4048ca:	f043 0310 	orr.w	r3, r3, #16
  4048ce:	e708      	b.n	4046e2 <_vfiprintf_r+0x246>
  4048d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4048d4:	f898 2000 	ldrb.w	r2, [r8]
  4048d8:	e652      	b.n	404580 <_vfiprintf_r+0xe4>
  4048da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4048de:	2600      	movs	r6, #0
  4048e0:	f818 2b01 	ldrb.w	r2, [r8], #1
  4048e4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4048e8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  4048ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  4048f0:	2909      	cmp	r1, #9
  4048f2:	d9f5      	bls.n	4048e0 <_vfiprintf_r+0x444>
  4048f4:	e646      	b.n	404584 <_vfiprintf_r+0xe8>
  4048f6:	9608      	str	r6, [sp, #32]
  4048f8:	2800      	cmp	r0, #0
  4048fa:	f040 8408 	bne.w	40510e <_vfiprintf_r+0xc72>
  4048fe:	f043 0310 	orr.w	r3, r3, #16
  404902:	069e      	lsls	r6, r3, #26
  404904:	f100 834c 	bmi.w	404fa0 <_vfiprintf_r+0xb04>
  404908:	06dd      	lsls	r5, r3, #27
  40490a:	f100 82f3 	bmi.w	404ef4 <_vfiprintf_r+0xa58>
  40490e:	0658      	lsls	r0, r3, #25
  404910:	f140 82f0 	bpl.w	404ef4 <_vfiprintf_r+0xa58>
  404914:	9d07      	ldr	r5, [sp, #28]
  404916:	f9b5 6000 	ldrsh.w	r6, [r5]
  40491a:	462a      	mov	r2, r5
  40491c:	17f7      	asrs	r7, r6, #31
  40491e:	3204      	adds	r2, #4
  404920:	4630      	mov	r0, r6
  404922:	4639      	mov	r1, r7
  404924:	9207      	str	r2, [sp, #28]
  404926:	2800      	cmp	r0, #0
  404928:	f171 0200 	sbcs.w	r2, r1, #0
  40492c:	f2c0 835d 	blt.w	404fea <_vfiprintf_r+0xb4e>
  404930:	1c61      	adds	r1, r4, #1
  404932:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404936:	f04f 0201 	mov.w	r2, #1
  40493a:	f47f aeea 	bne.w	404712 <_vfiprintf_r+0x276>
  40493e:	ea56 0107 	orrs.w	r1, r6, r7
  404942:	f000 824d 	beq.w	404de0 <_vfiprintf_r+0x944>
  404946:	9302      	str	r3, [sp, #8]
  404948:	2a01      	cmp	r2, #1
  40494a:	f000 828c 	beq.w	404e66 <_vfiprintf_r+0x9ca>
  40494e:	2a02      	cmp	r2, #2
  404950:	f040 825c 	bne.w	404e0c <_vfiprintf_r+0x970>
  404954:	980b      	ldr	r0, [sp, #44]	; 0x2c
  404956:	46cb      	mov	fp, r9
  404958:	0933      	lsrs	r3, r6, #4
  40495a:	f006 010f 	and.w	r1, r6, #15
  40495e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  404962:	093a      	lsrs	r2, r7, #4
  404964:	461e      	mov	r6, r3
  404966:	4617      	mov	r7, r2
  404968:	5c43      	ldrb	r3, [r0, r1]
  40496a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  40496e:	ea56 0307 	orrs.w	r3, r6, r7
  404972:	d1f1      	bne.n	404958 <_vfiprintf_r+0x4bc>
  404974:	eba9 030b 	sub.w	r3, r9, fp
  404978:	9305      	str	r3, [sp, #20]
  40497a:	e6e1      	b.n	404740 <_vfiprintf_r+0x2a4>
  40497c:	2800      	cmp	r0, #0
  40497e:	f040 83c0 	bne.w	405102 <_vfiprintf_r+0xc66>
  404982:	0699      	lsls	r1, r3, #26
  404984:	f100 8367 	bmi.w	405056 <_vfiprintf_r+0xbba>
  404988:	06da      	lsls	r2, r3, #27
  40498a:	f100 80f1 	bmi.w	404b70 <_vfiprintf_r+0x6d4>
  40498e:	065b      	lsls	r3, r3, #25
  404990:	f140 80ee 	bpl.w	404b70 <_vfiprintf_r+0x6d4>
  404994:	9a07      	ldr	r2, [sp, #28]
  404996:	6813      	ldr	r3, [r2, #0]
  404998:	3204      	adds	r2, #4
  40499a:	9207      	str	r2, [sp, #28]
  40499c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4049a0:	801a      	strh	r2, [r3, #0]
  4049a2:	e5b8      	b.n	404516 <_vfiprintf_r+0x7a>
  4049a4:	9807      	ldr	r0, [sp, #28]
  4049a6:	4a3d      	ldr	r2, [pc, #244]	; (404a9c <_vfiprintf_r+0x600>)
  4049a8:	9608      	str	r6, [sp, #32]
  4049aa:	920b      	str	r2, [sp, #44]	; 0x2c
  4049ac:	6806      	ldr	r6, [r0, #0]
  4049ae:	2278      	movs	r2, #120	; 0x78
  4049b0:	2130      	movs	r1, #48	; 0x30
  4049b2:	3004      	adds	r0, #4
  4049b4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4049b8:	f043 0302 	orr.w	r3, r3, #2
  4049bc:	9007      	str	r0, [sp, #28]
  4049be:	2700      	movs	r7, #0
  4049c0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  4049c4:	2202      	movs	r2, #2
  4049c6:	e69c      	b.n	404702 <_vfiprintf_r+0x266>
  4049c8:	9608      	str	r6, [sp, #32]
  4049ca:	2800      	cmp	r0, #0
  4049cc:	d099      	beq.n	404902 <_vfiprintf_r+0x466>
  4049ce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4049d2:	e796      	b.n	404902 <_vfiprintf_r+0x466>
  4049d4:	f898 2000 	ldrb.w	r2, [r8]
  4049d8:	2d00      	cmp	r5, #0
  4049da:	f47f add1 	bne.w	404580 <_vfiprintf_r+0xe4>
  4049de:	2001      	movs	r0, #1
  4049e0:	2520      	movs	r5, #32
  4049e2:	e5cd      	b.n	404580 <_vfiprintf_r+0xe4>
  4049e4:	f043 0301 	orr.w	r3, r3, #1
  4049e8:	f898 2000 	ldrb.w	r2, [r8]
  4049ec:	e5c8      	b.n	404580 <_vfiprintf_r+0xe4>
  4049ee:	9608      	str	r6, [sp, #32]
  4049f0:	2800      	cmp	r0, #0
  4049f2:	f040 8393 	bne.w	40511c <_vfiprintf_r+0xc80>
  4049f6:	4929      	ldr	r1, [pc, #164]	; (404a9c <_vfiprintf_r+0x600>)
  4049f8:	910b      	str	r1, [sp, #44]	; 0x2c
  4049fa:	069f      	lsls	r7, r3, #26
  4049fc:	f100 82e8 	bmi.w	404fd0 <_vfiprintf_r+0xb34>
  404a00:	9807      	ldr	r0, [sp, #28]
  404a02:	06de      	lsls	r6, r3, #27
  404a04:	4601      	mov	r1, r0
  404a06:	f100 8270 	bmi.w	404eea <_vfiprintf_r+0xa4e>
  404a0a:	065d      	lsls	r5, r3, #25
  404a0c:	f140 826d 	bpl.w	404eea <_vfiprintf_r+0xa4e>
  404a10:	3104      	adds	r1, #4
  404a12:	8806      	ldrh	r6, [r0, #0]
  404a14:	9107      	str	r1, [sp, #28]
  404a16:	2700      	movs	r7, #0
  404a18:	07d8      	lsls	r0, r3, #31
  404a1a:	f140 8222 	bpl.w	404e62 <_vfiprintf_r+0x9c6>
  404a1e:	ea56 0107 	orrs.w	r1, r6, r7
  404a22:	f000 821e 	beq.w	404e62 <_vfiprintf_r+0x9c6>
  404a26:	2130      	movs	r1, #48	; 0x30
  404a28:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  404a2c:	f043 0302 	orr.w	r3, r3, #2
  404a30:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  404a34:	2202      	movs	r2, #2
  404a36:	e664      	b.n	404702 <_vfiprintf_r+0x266>
  404a38:	9608      	str	r6, [sp, #32]
  404a3a:	2800      	cmp	r0, #0
  404a3c:	f040 836b 	bne.w	405116 <_vfiprintf_r+0xc7a>
  404a40:	4917      	ldr	r1, [pc, #92]	; (404aa0 <_vfiprintf_r+0x604>)
  404a42:	910b      	str	r1, [sp, #44]	; 0x2c
  404a44:	e7d9      	b.n	4049fa <_vfiprintf_r+0x55e>
  404a46:	9907      	ldr	r1, [sp, #28]
  404a48:	9608      	str	r6, [sp, #32]
  404a4a:	680a      	ldr	r2, [r1, #0]
  404a4c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404a50:	f04f 0000 	mov.w	r0, #0
  404a54:	460a      	mov	r2, r1
  404a56:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  404a5a:	3204      	adds	r2, #4
  404a5c:	2001      	movs	r0, #1
  404a5e:	9001      	str	r0, [sp, #4]
  404a60:	9207      	str	r2, [sp, #28]
  404a62:	9005      	str	r0, [sp, #20]
  404a64:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404a68:	9302      	str	r3, [sp, #8]
  404a6a:	2400      	movs	r4, #0
  404a6c:	e670      	b.n	404750 <_vfiprintf_r+0x2b4>
  404a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  404a72:	f898 2000 	ldrb.w	r2, [r8]
  404a76:	e583      	b.n	404580 <_vfiprintf_r+0xe4>
  404a78:	f898 2000 	ldrb.w	r2, [r8]
  404a7c:	2a6c      	cmp	r2, #108	; 0x6c
  404a7e:	bf03      	ittte	eq
  404a80:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  404a84:	f043 0320 	orreq.w	r3, r3, #32
  404a88:	f108 0801 	addeq.w	r8, r8, #1
  404a8c:	f043 0310 	orrne.w	r3, r3, #16
  404a90:	e576      	b.n	404580 <_vfiprintf_r+0xe4>
  404a92:	bf00      	nop
  404a94:	00407f28 	.word	0x00407f28
  404a98:	00407f38 	.word	0x00407f38
  404a9c:	00407f0c 	.word	0x00407f0c
  404aa0:	00407ef8 	.word	0x00407ef8
  404aa4:	9907      	ldr	r1, [sp, #28]
  404aa6:	680e      	ldr	r6, [r1, #0]
  404aa8:	460a      	mov	r2, r1
  404aaa:	2e00      	cmp	r6, #0
  404aac:	f102 0204 	add.w	r2, r2, #4
  404ab0:	f6ff ae0f 	blt.w	4046d2 <_vfiprintf_r+0x236>
  404ab4:	9207      	str	r2, [sp, #28]
  404ab6:	f898 2000 	ldrb.w	r2, [r8]
  404aba:	e561      	b.n	404580 <_vfiprintf_r+0xe4>
  404abc:	f898 2000 	ldrb.w	r2, [r8]
  404ac0:	2001      	movs	r0, #1
  404ac2:	252b      	movs	r5, #43	; 0x2b
  404ac4:	e55c      	b.n	404580 <_vfiprintf_r+0xe4>
  404ac6:	9907      	ldr	r1, [sp, #28]
  404ac8:	9608      	str	r6, [sp, #32]
  404aca:	f8d1 b000 	ldr.w	fp, [r1]
  404ace:	f04f 0200 	mov.w	r2, #0
  404ad2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404ad6:	1d0e      	adds	r6, r1, #4
  404ad8:	f1bb 0f00 	cmp.w	fp, #0
  404adc:	f000 82e5 	beq.w	4050aa <_vfiprintf_r+0xc0e>
  404ae0:	1c67      	adds	r7, r4, #1
  404ae2:	f000 82c4 	beq.w	40506e <_vfiprintf_r+0xbd2>
  404ae6:	4622      	mov	r2, r4
  404ae8:	2100      	movs	r1, #0
  404aea:	4658      	mov	r0, fp
  404aec:	9301      	str	r3, [sp, #4]
  404aee:	f001 f91f 	bl	405d30 <memchr>
  404af2:	9b01      	ldr	r3, [sp, #4]
  404af4:	2800      	cmp	r0, #0
  404af6:	f000 82e5 	beq.w	4050c4 <_vfiprintf_r+0xc28>
  404afa:	eba0 020b 	sub.w	r2, r0, fp
  404afe:	9205      	str	r2, [sp, #20]
  404b00:	9607      	str	r6, [sp, #28]
  404b02:	9302      	str	r3, [sp, #8]
  404b04:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404b08:	2400      	movs	r4, #0
  404b0a:	e619      	b.n	404740 <_vfiprintf_r+0x2a4>
  404b0c:	f898 2000 	ldrb.w	r2, [r8]
  404b10:	2a2a      	cmp	r2, #42	; 0x2a
  404b12:	f108 0701 	add.w	r7, r8, #1
  404b16:	f000 82e9 	beq.w	4050ec <_vfiprintf_r+0xc50>
  404b1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b1e:	2909      	cmp	r1, #9
  404b20:	46b8      	mov	r8, r7
  404b22:	f04f 0400 	mov.w	r4, #0
  404b26:	f63f ad2d 	bhi.w	404584 <_vfiprintf_r+0xe8>
  404b2a:	f818 2b01 	ldrb.w	r2, [r8], #1
  404b2e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  404b32:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  404b36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  404b3a:	2909      	cmp	r1, #9
  404b3c:	d9f5      	bls.n	404b2a <_vfiprintf_r+0x68e>
  404b3e:	e521      	b.n	404584 <_vfiprintf_r+0xe8>
  404b40:	f043 0320 	orr.w	r3, r3, #32
  404b44:	f898 2000 	ldrb.w	r2, [r8]
  404b48:	e51a      	b.n	404580 <_vfiprintf_r+0xe4>
  404b4a:	9608      	str	r6, [sp, #32]
  404b4c:	2800      	cmp	r0, #0
  404b4e:	f040 82db 	bne.w	405108 <_vfiprintf_r+0xc6c>
  404b52:	2a00      	cmp	r2, #0
  404b54:	f000 80e7 	beq.w	404d26 <_vfiprintf_r+0x88a>
  404b58:	2101      	movs	r1, #1
  404b5a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  404b5e:	f04f 0200 	mov.w	r2, #0
  404b62:	9101      	str	r1, [sp, #4]
  404b64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  404b68:	9105      	str	r1, [sp, #20]
  404b6a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  404b6e:	e77b      	b.n	404a68 <_vfiprintf_r+0x5cc>
  404b70:	9a07      	ldr	r2, [sp, #28]
  404b72:	6813      	ldr	r3, [r2, #0]
  404b74:	3204      	adds	r2, #4
  404b76:	9207      	str	r2, [sp, #28]
  404b78:	9a03      	ldr	r2, [sp, #12]
  404b7a:	601a      	str	r2, [r3, #0]
  404b7c:	e4cb      	b.n	404516 <_vfiprintf_r+0x7a>
  404b7e:	aa0f      	add	r2, sp, #60	; 0x3c
  404b80:	9904      	ldr	r1, [sp, #16]
  404b82:	4620      	mov	r0, r4
  404b84:	f7ff fc4a 	bl	40441c <__sprint_r.part.0>
  404b88:	2800      	cmp	r0, #0
  404b8a:	f040 8139 	bne.w	404e00 <_vfiprintf_r+0x964>
  404b8e:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b92:	f101 0c01 	add.w	ip, r1, #1
  404b96:	46ce      	mov	lr, r9
  404b98:	e5ff      	b.n	40479a <_vfiprintf_r+0x2fe>
  404b9a:	9910      	ldr	r1, [sp, #64]	; 0x40
  404b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404b9e:	1c48      	adds	r0, r1, #1
  404ba0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404ba4:	2d00      	cmp	r5, #0
  404ba6:	f43f ae22 	beq.w	4047ee <_vfiprintf_r+0x352>
  404baa:	3201      	adds	r2, #1
  404bac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  404bb0:	2101      	movs	r1, #1
  404bb2:	2807      	cmp	r0, #7
  404bb4:	9211      	str	r2, [sp, #68]	; 0x44
  404bb6:	9010      	str	r0, [sp, #64]	; 0x40
  404bb8:	f8ca 5000 	str.w	r5, [sl]
  404bbc:	f8ca 1004 	str.w	r1, [sl, #4]
  404bc0:	f340 8108 	ble.w	404dd4 <_vfiprintf_r+0x938>
  404bc4:	2a00      	cmp	r2, #0
  404bc6:	f040 81bc 	bne.w	404f42 <_vfiprintf_r+0xaa6>
  404bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404bcc:	2b00      	cmp	r3, #0
  404bce:	f43f ae1f 	beq.w	404810 <_vfiprintf_r+0x374>
  404bd2:	ab0e      	add	r3, sp, #56	; 0x38
  404bd4:	2202      	movs	r2, #2
  404bd6:	4608      	mov	r0, r1
  404bd8:	931c      	str	r3, [sp, #112]	; 0x70
  404bda:	921d      	str	r2, [sp, #116]	; 0x74
  404bdc:	46ca      	mov	sl, r9
  404bde:	4601      	mov	r1, r0
  404be0:	f10a 0a08 	add.w	sl, sl, #8
  404be4:	3001      	adds	r0, #1
  404be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404be8:	2b80      	cmp	r3, #128	; 0x80
  404bea:	f43f ae19 	beq.w	404820 <_vfiprintf_r+0x384>
  404bee:	9b05      	ldr	r3, [sp, #20]
  404bf0:	1ae4      	subs	r4, r4, r3
  404bf2:	2c00      	cmp	r4, #0
  404bf4:	dd2e      	ble.n	404c54 <_vfiprintf_r+0x7b8>
  404bf6:	2c10      	cmp	r4, #16
  404bf8:	4db3      	ldr	r5, [pc, #716]	; (404ec8 <_vfiprintf_r+0xa2c>)
  404bfa:	dd1e      	ble.n	404c3a <_vfiprintf_r+0x79e>
  404bfc:	46d6      	mov	lr, sl
  404bfe:	2610      	movs	r6, #16
  404c00:	9f06      	ldr	r7, [sp, #24]
  404c02:	f8dd a010 	ldr.w	sl, [sp, #16]
  404c06:	e006      	b.n	404c16 <_vfiprintf_r+0x77a>
  404c08:	1c88      	adds	r0, r1, #2
  404c0a:	f10e 0e08 	add.w	lr, lr, #8
  404c0e:	4619      	mov	r1, r3
  404c10:	3c10      	subs	r4, #16
  404c12:	2c10      	cmp	r4, #16
  404c14:	dd10      	ble.n	404c38 <_vfiprintf_r+0x79c>
  404c16:	1c4b      	adds	r3, r1, #1
  404c18:	3210      	adds	r2, #16
  404c1a:	2b07      	cmp	r3, #7
  404c1c:	9211      	str	r2, [sp, #68]	; 0x44
  404c1e:	e88e 0060 	stmia.w	lr, {r5, r6}
  404c22:	9310      	str	r3, [sp, #64]	; 0x40
  404c24:	ddf0      	ble.n	404c08 <_vfiprintf_r+0x76c>
  404c26:	2a00      	cmp	r2, #0
  404c28:	d165      	bne.n	404cf6 <_vfiprintf_r+0x85a>
  404c2a:	3c10      	subs	r4, #16
  404c2c:	2c10      	cmp	r4, #16
  404c2e:	f04f 0001 	mov.w	r0, #1
  404c32:	4611      	mov	r1, r2
  404c34:	46ce      	mov	lr, r9
  404c36:	dcee      	bgt.n	404c16 <_vfiprintf_r+0x77a>
  404c38:	46f2      	mov	sl, lr
  404c3a:	4422      	add	r2, r4
  404c3c:	2807      	cmp	r0, #7
  404c3e:	9211      	str	r2, [sp, #68]	; 0x44
  404c40:	f8ca 5000 	str.w	r5, [sl]
  404c44:	f8ca 4004 	str.w	r4, [sl, #4]
  404c48:	9010      	str	r0, [sp, #64]	; 0x40
  404c4a:	f300 8085 	bgt.w	404d58 <_vfiprintf_r+0x8bc>
  404c4e:	f10a 0a08 	add.w	sl, sl, #8
  404c52:	3001      	adds	r0, #1
  404c54:	9905      	ldr	r1, [sp, #20]
  404c56:	f8ca b000 	str.w	fp, [sl]
  404c5a:	440a      	add	r2, r1
  404c5c:	2807      	cmp	r0, #7
  404c5e:	9211      	str	r2, [sp, #68]	; 0x44
  404c60:	f8ca 1004 	str.w	r1, [sl, #4]
  404c64:	9010      	str	r0, [sp, #64]	; 0x40
  404c66:	f340 8082 	ble.w	404d6e <_vfiprintf_r+0x8d2>
  404c6a:	2a00      	cmp	r2, #0
  404c6c:	f040 8118 	bne.w	404ea0 <_vfiprintf_r+0xa04>
  404c70:	9b02      	ldr	r3, [sp, #8]
  404c72:	9210      	str	r2, [sp, #64]	; 0x40
  404c74:	0758      	lsls	r0, r3, #29
  404c76:	d535      	bpl.n	404ce4 <_vfiprintf_r+0x848>
  404c78:	9b08      	ldr	r3, [sp, #32]
  404c7a:	9901      	ldr	r1, [sp, #4]
  404c7c:	1a5c      	subs	r4, r3, r1
  404c7e:	2c00      	cmp	r4, #0
  404c80:	f340 80e7 	ble.w	404e52 <_vfiprintf_r+0x9b6>
  404c84:	46ca      	mov	sl, r9
  404c86:	2c10      	cmp	r4, #16
  404c88:	f340 8218 	ble.w	4050bc <_vfiprintf_r+0xc20>
  404c8c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404c8e:	4e8f      	ldr	r6, [pc, #572]	; (404ecc <_vfiprintf_r+0xa30>)
  404c90:	9f06      	ldr	r7, [sp, #24]
  404c92:	f8dd b010 	ldr.w	fp, [sp, #16]
  404c96:	2510      	movs	r5, #16
  404c98:	e006      	b.n	404ca8 <_vfiprintf_r+0x80c>
  404c9a:	1c88      	adds	r0, r1, #2
  404c9c:	f10a 0a08 	add.w	sl, sl, #8
  404ca0:	4619      	mov	r1, r3
  404ca2:	3c10      	subs	r4, #16
  404ca4:	2c10      	cmp	r4, #16
  404ca6:	dd11      	ble.n	404ccc <_vfiprintf_r+0x830>
  404ca8:	1c4b      	adds	r3, r1, #1
  404caa:	3210      	adds	r2, #16
  404cac:	2b07      	cmp	r3, #7
  404cae:	9211      	str	r2, [sp, #68]	; 0x44
  404cb0:	f8ca 6000 	str.w	r6, [sl]
  404cb4:	f8ca 5004 	str.w	r5, [sl, #4]
  404cb8:	9310      	str	r3, [sp, #64]	; 0x40
  404cba:	ddee      	ble.n	404c9a <_vfiprintf_r+0x7fe>
  404cbc:	bb42      	cbnz	r2, 404d10 <_vfiprintf_r+0x874>
  404cbe:	3c10      	subs	r4, #16
  404cc0:	2c10      	cmp	r4, #16
  404cc2:	f04f 0001 	mov.w	r0, #1
  404cc6:	4611      	mov	r1, r2
  404cc8:	46ca      	mov	sl, r9
  404cca:	dced      	bgt.n	404ca8 <_vfiprintf_r+0x80c>
  404ccc:	4422      	add	r2, r4
  404cce:	2807      	cmp	r0, #7
  404cd0:	9211      	str	r2, [sp, #68]	; 0x44
  404cd2:	f8ca 6000 	str.w	r6, [sl]
  404cd6:	f8ca 4004 	str.w	r4, [sl, #4]
  404cda:	9010      	str	r0, [sp, #64]	; 0x40
  404cdc:	dd51      	ble.n	404d82 <_vfiprintf_r+0x8e6>
  404cde:	2a00      	cmp	r2, #0
  404ce0:	f040 819b 	bne.w	40501a <_vfiprintf_r+0xb7e>
  404ce4:	9b03      	ldr	r3, [sp, #12]
  404ce6:	9a08      	ldr	r2, [sp, #32]
  404ce8:	9901      	ldr	r1, [sp, #4]
  404cea:	428a      	cmp	r2, r1
  404cec:	bfac      	ite	ge
  404cee:	189b      	addge	r3, r3, r2
  404cf0:	185b      	addlt	r3, r3, r1
  404cf2:	9303      	str	r3, [sp, #12]
  404cf4:	e04e      	b.n	404d94 <_vfiprintf_r+0x8f8>
  404cf6:	aa0f      	add	r2, sp, #60	; 0x3c
  404cf8:	4651      	mov	r1, sl
  404cfa:	4638      	mov	r0, r7
  404cfc:	f7ff fb8e 	bl	40441c <__sprint_r.part.0>
  404d00:	2800      	cmp	r0, #0
  404d02:	f040 813f 	bne.w	404f84 <_vfiprintf_r+0xae8>
  404d06:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d08:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d0a:	1c48      	adds	r0, r1, #1
  404d0c:	46ce      	mov	lr, r9
  404d0e:	e77f      	b.n	404c10 <_vfiprintf_r+0x774>
  404d10:	aa0f      	add	r2, sp, #60	; 0x3c
  404d12:	4659      	mov	r1, fp
  404d14:	4638      	mov	r0, r7
  404d16:	f7ff fb81 	bl	40441c <__sprint_r.part.0>
  404d1a:	b960      	cbnz	r0, 404d36 <_vfiprintf_r+0x89a>
  404d1c:	9910      	ldr	r1, [sp, #64]	; 0x40
  404d1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404d20:	1c48      	adds	r0, r1, #1
  404d22:	46ca      	mov	sl, r9
  404d24:	e7bd      	b.n	404ca2 <_vfiprintf_r+0x806>
  404d26:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404d28:	f8dd b010 	ldr.w	fp, [sp, #16]
  404d2c:	2b00      	cmp	r3, #0
  404d2e:	f040 81d4 	bne.w	4050da <_vfiprintf_r+0xc3e>
  404d32:	2300      	movs	r3, #0
  404d34:	9310      	str	r3, [sp, #64]	; 0x40
  404d36:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404d3a:	f013 0f01 	tst.w	r3, #1
  404d3e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404d42:	d102      	bne.n	404d4a <_vfiprintf_r+0x8ae>
  404d44:	059a      	lsls	r2, r3, #22
  404d46:	f140 80de 	bpl.w	404f06 <_vfiprintf_r+0xa6a>
  404d4a:	065b      	lsls	r3, r3, #25
  404d4c:	f53f acb2 	bmi.w	4046b4 <_vfiprintf_r+0x218>
  404d50:	9803      	ldr	r0, [sp, #12]
  404d52:	b02d      	add	sp, #180	; 0xb4
  404d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404d58:	2a00      	cmp	r2, #0
  404d5a:	f040 8106 	bne.w	404f6a <_vfiprintf_r+0xace>
  404d5e:	9a05      	ldr	r2, [sp, #20]
  404d60:	921d      	str	r2, [sp, #116]	; 0x74
  404d62:	2301      	movs	r3, #1
  404d64:	9211      	str	r2, [sp, #68]	; 0x44
  404d66:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  404d6a:	9310      	str	r3, [sp, #64]	; 0x40
  404d6c:	46ca      	mov	sl, r9
  404d6e:	f10a 0a08 	add.w	sl, sl, #8
  404d72:	9b02      	ldr	r3, [sp, #8]
  404d74:	0759      	lsls	r1, r3, #29
  404d76:	d504      	bpl.n	404d82 <_vfiprintf_r+0x8e6>
  404d78:	9b08      	ldr	r3, [sp, #32]
  404d7a:	9901      	ldr	r1, [sp, #4]
  404d7c:	1a5c      	subs	r4, r3, r1
  404d7e:	2c00      	cmp	r4, #0
  404d80:	dc81      	bgt.n	404c86 <_vfiprintf_r+0x7ea>
  404d82:	9b03      	ldr	r3, [sp, #12]
  404d84:	9908      	ldr	r1, [sp, #32]
  404d86:	9801      	ldr	r0, [sp, #4]
  404d88:	4281      	cmp	r1, r0
  404d8a:	bfac      	ite	ge
  404d8c:	185b      	addge	r3, r3, r1
  404d8e:	181b      	addlt	r3, r3, r0
  404d90:	9303      	str	r3, [sp, #12]
  404d92:	bb72      	cbnz	r2, 404df2 <_vfiprintf_r+0x956>
  404d94:	2300      	movs	r3, #0
  404d96:	9310      	str	r3, [sp, #64]	; 0x40
  404d98:	46ca      	mov	sl, r9
  404d9a:	f7ff bbbc 	b.w	404516 <_vfiprintf_r+0x7a>
  404d9e:	aa0f      	add	r2, sp, #60	; 0x3c
  404da0:	9904      	ldr	r1, [sp, #16]
  404da2:	4620      	mov	r0, r4
  404da4:	f7ff fb3a 	bl	40441c <__sprint_r.part.0>
  404da8:	bb50      	cbnz	r0, 404e00 <_vfiprintf_r+0x964>
  404daa:	9910      	ldr	r1, [sp, #64]	; 0x40
  404dac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404dae:	f101 0e01 	add.w	lr, r1, #1
  404db2:	46cc      	mov	ip, r9
  404db4:	e548      	b.n	404848 <_vfiprintf_r+0x3ac>
  404db6:	2a00      	cmp	r2, #0
  404db8:	f040 8140 	bne.w	40503c <_vfiprintf_r+0xba0>
  404dbc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  404dc0:	2900      	cmp	r1, #0
  404dc2:	f000 811b 	beq.w	404ffc <_vfiprintf_r+0xb60>
  404dc6:	2201      	movs	r2, #1
  404dc8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  404dcc:	4610      	mov	r0, r2
  404dce:	921d      	str	r2, [sp, #116]	; 0x74
  404dd0:	911c      	str	r1, [sp, #112]	; 0x70
  404dd2:	46ca      	mov	sl, r9
  404dd4:	4601      	mov	r1, r0
  404dd6:	f10a 0a08 	add.w	sl, sl, #8
  404dda:	3001      	adds	r0, #1
  404ddc:	e507      	b.n	4047ee <_vfiprintf_r+0x352>
  404dde:	9b02      	ldr	r3, [sp, #8]
  404de0:	2a01      	cmp	r2, #1
  404de2:	f000 8098 	beq.w	404f16 <_vfiprintf_r+0xa7a>
  404de6:	2a02      	cmp	r2, #2
  404de8:	d10d      	bne.n	404e06 <_vfiprintf_r+0x96a>
  404dea:	9302      	str	r3, [sp, #8]
  404dec:	2600      	movs	r6, #0
  404dee:	2700      	movs	r7, #0
  404df0:	e5b0      	b.n	404954 <_vfiprintf_r+0x4b8>
  404df2:	aa0f      	add	r2, sp, #60	; 0x3c
  404df4:	9904      	ldr	r1, [sp, #16]
  404df6:	9806      	ldr	r0, [sp, #24]
  404df8:	f7ff fb10 	bl	40441c <__sprint_r.part.0>
  404dfc:	2800      	cmp	r0, #0
  404dfe:	d0c9      	beq.n	404d94 <_vfiprintf_r+0x8f8>
  404e00:	f8dd b010 	ldr.w	fp, [sp, #16]
  404e04:	e797      	b.n	404d36 <_vfiprintf_r+0x89a>
  404e06:	9302      	str	r3, [sp, #8]
  404e08:	2600      	movs	r6, #0
  404e0a:	2700      	movs	r7, #0
  404e0c:	4649      	mov	r1, r9
  404e0e:	e000      	b.n	404e12 <_vfiprintf_r+0x976>
  404e10:	4659      	mov	r1, fp
  404e12:	08f2      	lsrs	r2, r6, #3
  404e14:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  404e18:	08f8      	lsrs	r0, r7, #3
  404e1a:	f006 0307 	and.w	r3, r6, #7
  404e1e:	4607      	mov	r7, r0
  404e20:	4616      	mov	r6, r2
  404e22:	3330      	adds	r3, #48	; 0x30
  404e24:	ea56 0207 	orrs.w	r2, r6, r7
  404e28:	f801 3c01 	strb.w	r3, [r1, #-1]
  404e2c:	f101 3bff 	add.w	fp, r1, #4294967295
  404e30:	d1ee      	bne.n	404e10 <_vfiprintf_r+0x974>
  404e32:	9a02      	ldr	r2, [sp, #8]
  404e34:	07d6      	lsls	r6, r2, #31
  404e36:	f57f ad9d 	bpl.w	404974 <_vfiprintf_r+0x4d8>
  404e3a:	2b30      	cmp	r3, #48	; 0x30
  404e3c:	f43f ad9a 	beq.w	404974 <_vfiprintf_r+0x4d8>
  404e40:	3902      	subs	r1, #2
  404e42:	2330      	movs	r3, #48	; 0x30
  404e44:	f80b 3c01 	strb.w	r3, [fp, #-1]
  404e48:	eba9 0301 	sub.w	r3, r9, r1
  404e4c:	9305      	str	r3, [sp, #20]
  404e4e:	468b      	mov	fp, r1
  404e50:	e476      	b.n	404740 <_vfiprintf_r+0x2a4>
  404e52:	9b03      	ldr	r3, [sp, #12]
  404e54:	9a08      	ldr	r2, [sp, #32]
  404e56:	428a      	cmp	r2, r1
  404e58:	bfac      	ite	ge
  404e5a:	189b      	addge	r3, r3, r2
  404e5c:	185b      	addlt	r3, r3, r1
  404e5e:	9303      	str	r3, [sp, #12]
  404e60:	e798      	b.n	404d94 <_vfiprintf_r+0x8f8>
  404e62:	2202      	movs	r2, #2
  404e64:	e44d      	b.n	404702 <_vfiprintf_r+0x266>
  404e66:	2f00      	cmp	r7, #0
  404e68:	bf08      	it	eq
  404e6a:	2e0a      	cmpeq	r6, #10
  404e6c:	d352      	bcc.n	404f14 <_vfiprintf_r+0xa78>
  404e6e:	46cb      	mov	fp, r9
  404e70:	4630      	mov	r0, r6
  404e72:	4639      	mov	r1, r7
  404e74:	220a      	movs	r2, #10
  404e76:	2300      	movs	r3, #0
  404e78:	f001 fbc6 	bl	406608 <__aeabi_uldivmod>
  404e7c:	3230      	adds	r2, #48	; 0x30
  404e7e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  404e82:	4630      	mov	r0, r6
  404e84:	4639      	mov	r1, r7
  404e86:	2300      	movs	r3, #0
  404e88:	220a      	movs	r2, #10
  404e8a:	f001 fbbd 	bl	406608 <__aeabi_uldivmod>
  404e8e:	4606      	mov	r6, r0
  404e90:	460f      	mov	r7, r1
  404e92:	ea56 0307 	orrs.w	r3, r6, r7
  404e96:	d1eb      	bne.n	404e70 <_vfiprintf_r+0x9d4>
  404e98:	e56c      	b.n	404974 <_vfiprintf_r+0x4d8>
  404e9a:	9405      	str	r4, [sp, #20]
  404e9c:	46cb      	mov	fp, r9
  404e9e:	e44f      	b.n	404740 <_vfiprintf_r+0x2a4>
  404ea0:	aa0f      	add	r2, sp, #60	; 0x3c
  404ea2:	9904      	ldr	r1, [sp, #16]
  404ea4:	9806      	ldr	r0, [sp, #24]
  404ea6:	f7ff fab9 	bl	40441c <__sprint_r.part.0>
  404eaa:	2800      	cmp	r0, #0
  404eac:	d1a8      	bne.n	404e00 <_vfiprintf_r+0x964>
  404eae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404eb0:	46ca      	mov	sl, r9
  404eb2:	e75e      	b.n	404d72 <_vfiprintf_r+0x8d6>
  404eb4:	aa0f      	add	r2, sp, #60	; 0x3c
  404eb6:	9904      	ldr	r1, [sp, #16]
  404eb8:	9806      	ldr	r0, [sp, #24]
  404eba:	f7ff faaf 	bl	40441c <__sprint_r.part.0>
  404ebe:	2800      	cmp	r0, #0
  404ec0:	d19e      	bne.n	404e00 <_vfiprintf_r+0x964>
  404ec2:	46ca      	mov	sl, r9
  404ec4:	f7ff bbc0 	b.w	404648 <_vfiprintf_r+0x1ac>
  404ec8:	00407f38 	.word	0x00407f38
  404ecc:	00407f28 	.word	0x00407f28
  404ed0:	3104      	adds	r1, #4
  404ed2:	6816      	ldr	r6, [r2, #0]
  404ed4:	9107      	str	r1, [sp, #28]
  404ed6:	2201      	movs	r2, #1
  404ed8:	2700      	movs	r7, #0
  404eda:	e412      	b.n	404702 <_vfiprintf_r+0x266>
  404edc:	9807      	ldr	r0, [sp, #28]
  404ede:	4601      	mov	r1, r0
  404ee0:	3104      	adds	r1, #4
  404ee2:	6806      	ldr	r6, [r0, #0]
  404ee4:	9107      	str	r1, [sp, #28]
  404ee6:	2700      	movs	r7, #0
  404ee8:	e40b      	b.n	404702 <_vfiprintf_r+0x266>
  404eea:	680e      	ldr	r6, [r1, #0]
  404eec:	3104      	adds	r1, #4
  404eee:	9107      	str	r1, [sp, #28]
  404ef0:	2700      	movs	r7, #0
  404ef2:	e591      	b.n	404a18 <_vfiprintf_r+0x57c>
  404ef4:	9907      	ldr	r1, [sp, #28]
  404ef6:	680e      	ldr	r6, [r1, #0]
  404ef8:	460a      	mov	r2, r1
  404efa:	17f7      	asrs	r7, r6, #31
  404efc:	3204      	adds	r2, #4
  404efe:	9207      	str	r2, [sp, #28]
  404f00:	4630      	mov	r0, r6
  404f02:	4639      	mov	r1, r7
  404f04:	e50f      	b.n	404926 <_vfiprintf_r+0x48a>
  404f06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404f0a:	f000 fe7f 	bl	405c0c <__retarget_lock_release_recursive>
  404f0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404f12:	e71a      	b.n	404d4a <_vfiprintf_r+0x8ae>
  404f14:	9b02      	ldr	r3, [sp, #8]
  404f16:	9302      	str	r3, [sp, #8]
  404f18:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404f1c:	3630      	adds	r6, #48	; 0x30
  404f1e:	2301      	movs	r3, #1
  404f20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  404f24:	9305      	str	r3, [sp, #20]
  404f26:	e40b      	b.n	404740 <_vfiprintf_r+0x2a4>
  404f28:	aa0f      	add	r2, sp, #60	; 0x3c
  404f2a:	9904      	ldr	r1, [sp, #16]
  404f2c:	9806      	ldr	r0, [sp, #24]
  404f2e:	f7ff fa75 	bl	40441c <__sprint_r.part.0>
  404f32:	2800      	cmp	r0, #0
  404f34:	f47f af64 	bne.w	404e00 <_vfiprintf_r+0x964>
  404f38:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f3c:	1c48      	adds	r0, r1, #1
  404f3e:	46ca      	mov	sl, r9
  404f40:	e651      	b.n	404be6 <_vfiprintf_r+0x74a>
  404f42:	aa0f      	add	r2, sp, #60	; 0x3c
  404f44:	9904      	ldr	r1, [sp, #16]
  404f46:	9806      	ldr	r0, [sp, #24]
  404f48:	f7ff fa68 	bl	40441c <__sprint_r.part.0>
  404f4c:	2800      	cmp	r0, #0
  404f4e:	f47f af57 	bne.w	404e00 <_vfiprintf_r+0x964>
  404f52:	9910      	ldr	r1, [sp, #64]	; 0x40
  404f54:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f56:	1c48      	adds	r0, r1, #1
  404f58:	46ca      	mov	sl, r9
  404f5a:	e448      	b.n	4047ee <_vfiprintf_r+0x352>
  404f5c:	2a00      	cmp	r2, #0
  404f5e:	f040 8091 	bne.w	405084 <_vfiprintf_r+0xbe8>
  404f62:	2001      	movs	r0, #1
  404f64:	4611      	mov	r1, r2
  404f66:	46ca      	mov	sl, r9
  404f68:	e641      	b.n	404bee <_vfiprintf_r+0x752>
  404f6a:	aa0f      	add	r2, sp, #60	; 0x3c
  404f6c:	9904      	ldr	r1, [sp, #16]
  404f6e:	9806      	ldr	r0, [sp, #24]
  404f70:	f7ff fa54 	bl	40441c <__sprint_r.part.0>
  404f74:	2800      	cmp	r0, #0
  404f76:	f47f af43 	bne.w	404e00 <_vfiprintf_r+0x964>
  404f7a:	9810      	ldr	r0, [sp, #64]	; 0x40
  404f7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404f7e:	3001      	adds	r0, #1
  404f80:	46ca      	mov	sl, r9
  404f82:	e667      	b.n	404c54 <_vfiprintf_r+0x7b8>
  404f84:	46d3      	mov	fp, sl
  404f86:	e6d6      	b.n	404d36 <_vfiprintf_r+0x89a>
  404f88:	9e07      	ldr	r6, [sp, #28]
  404f8a:	3607      	adds	r6, #7
  404f8c:	f026 0207 	bic.w	r2, r6, #7
  404f90:	f102 0108 	add.w	r1, r2, #8
  404f94:	e9d2 6700 	ldrd	r6, r7, [r2]
  404f98:	9107      	str	r1, [sp, #28]
  404f9a:	2201      	movs	r2, #1
  404f9c:	f7ff bbb1 	b.w	404702 <_vfiprintf_r+0x266>
  404fa0:	9e07      	ldr	r6, [sp, #28]
  404fa2:	3607      	adds	r6, #7
  404fa4:	f026 0607 	bic.w	r6, r6, #7
  404fa8:	e9d6 0100 	ldrd	r0, r1, [r6]
  404fac:	f106 0208 	add.w	r2, r6, #8
  404fb0:	9207      	str	r2, [sp, #28]
  404fb2:	4606      	mov	r6, r0
  404fb4:	460f      	mov	r7, r1
  404fb6:	e4b6      	b.n	404926 <_vfiprintf_r+0x48a>
  404fb8:	9e07      	ldr	r6, [sp, #28]
  404fba:	3607      	adds	r6, #7
  404fbc:	f026 0207 	bic.w	r2, r6, #7
  404fc0:	f102 0108 	add.w	r1, r2, #8
  404fc4:	e9d2 6700 	ldrd	r6, r7, [r2]
  404fc8:	9107      	str	r1, [sp, #28]
  404fca:	2200      	movs	r2, #0
  404fcc:	f7ff bb99 	b.w	404702 <_vfiprintf_r+0x266>
  404fd0:	9e07      	ldr	r6, [sp, #28]
  404fd2:	3607      	adds	r6, #7
  404fd4:	f026 0107 	bic.w	r1, r6, #7
  404fd8:	f101 0008 	add.w	r0, r1, #8
  404fdc:	9007      	str	r0, [sp, #28]
  404fde:	e9d1 6700 	ldrd	r6, r7, [r1]
  404fe2:	e519      	b.n	404a18 <_vfiprintf_r+0x57c>
  404fe4:	46cb      	mov	fp, r9
  404fe6:	f7ff bbab 	b.w	404740 <_vfiprintf_r+0x2a4>
  404fea:	252d      	movs	r5, #45	; 0x2d
  404fec:	4276      	negs	r6, r6
  404fee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  404ff2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  404ff6:	2201      	movs	r2, #1
  404ff8:	f7ff bb88 	b.w	40470c <_vfiprintf_r+0x270>
  404ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404ffe:	b9b3      	cbnz	r3, 40502e <_vfiprintf_r+0xb92>
  405000:	4611      	mov	r1, r2
  405002:	2001      	movs	r0, #1
  405004:	46ca      	mov	sl, r9
  405006:	e5f2      	b.n	404bee <_vfiprintf_r+0x752>
  405008:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40500c:	f000 fdfe 	bl	405c0c <__retarget_lock_release_recursive>
  405010:	f04f 33ff 	mov.w	r3, #4294967295
  405014:	9303      	str	r3, [sp, #12]
  405016:	f7ff bb50 	b.w	4046ba <_vfiprintf_r+0x21e>
  40501a:	aa0f      	add	r2, sp, #60	; 0x3c
  40501c:	9904      	ldr	r1, [sp, #16]
  40501e:	9806      	ldr	r0, [sp, #24]
  405020:	f7ff f9fc 	bl	40441c <__sprint_r.part.0>
  405024:	2800      	cmp	r0, #0
  405026:	f47f aeeb 	bne.w	404e00 <_vfiprintf_r+0x964>
  40502a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40502c:	e6a9      	b.n	404d82 <_vfiprintf_r+0x8e6>
  40502e:	ab0e      	add	r3, sp, #56	; 0x38
  405030:	2202      	movs	r2, #2
  405032:	931c      	str	r3, [sp, #112]	; 0x70
  405034:	921d      	str	r2, [sp, #116]	; 0x74
  405036:	2001      	movs	r0, #1
  405038:	46ca      	mov	sl, r9
  40503a:	e5d0      	b.n	404bde <_vfiprintf_r+0x742>
  40503c:	aa0f      	add	r2, sp, #60	; 0x3c
  40503e:	9904      	ldr	r1, [sp, #16]
  405040:	9806      	ldr	r0, [sp, #24]
  405042:	f7ff f9eb 	bl	40441c <__sprint_r.part.0>
  405046:	2800      	cmp	r0, #0
  405048:	f47f aeda 	bne.w	404e00 <_vfiprintf_r+0x964>
  40504c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40504e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405050:	1c48      	adds	r0, r1, #1
  405052:	46ca      	mov	sl, r9
  405054:	e5a4      	b.n	404ba0 <_vfiprintf_r+0x704>
  405056:	9a07      	ldr	r2, [sp, #28]
  405058:	9903      	ldr	r1, [sp, #12]
  40505a:	6813      	ldr	r3, [r2, #0]
  40505c:	17cd      	asrs	r5, r1, #31
  40505e:	4608      	mov	r0, r1
  405060:	3204      	adds	r2, #4
  405062:	4629      	mov	r1, r5
  405064:	9207      	str	r2, [sp, #28]
  405066:	e9c3 0100 	strd	r0, r1, [r3]
  40506a:	f7ff ba54 	b.w	404516 <_vfiprintf_r+0x7a>
  40506e:	4658      	mov	r0, fp
  405070:	9607      	str	r6, [sp, #28]
  405072:	9302      	str	r3, [sp, #8]
  405074:	f7ff f964 	bl	404340 <strlen>
  405078:	2400      	movs	r4, #0
  40507a:	9005      	str	r0, [sp, #20]
  40507c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405080:	f7ff bb5e 	b.w	404740 <_vfiprintf_r+0x2a4>
  405084:	aa0f      	add	r2, sp, #60	; 0x3c
  405086:	9904      	ldr	r1, [sp, #16]
  405088:	9806      	ldr	r0, [sp, #24]
  40508a:	f7ff f9c7 	bl	40441c <__sprint_r.part.0>
  40508e:	2800      	cmp	r0, #0
  405090:	f47f aeb6 	bne.w	404e00 <_vfiprintf_r+0x964>
  405094:	9910      	ldr	r1, [sp, #64]	; 0x40
  405096:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405098:	1c48      	adds	r0, r1, #1
  40509a:	46ca      	mov	sl, r9
  40509c:	e5a7      	b.n	404bee <_vfiprintf_r+0x752>
  40509e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4050a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4050a2:	4e20      	ldr	r6, [pc, #128]	; (405124 <_vfiprintf_r+0xc88>)
  4050a4:	3101      	adds	r1, #1
  4050a6:	f7ff bb90 	b.w	4047ca <_vfiprintf_r+0x32e>
  4050aa:	2c06      	cmp	r4, #6
  4050ac:	bf28      	it	cs
  4050ae:	2406      	movcs	r4, #6
  4050b0:	9405      	str	r4, [sp, #20]
  4050b2:	9607      	str	r6, [sp, #28]
  4050b4:	9401      	str	r4, [sp, #4]
  4050b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405128 <_vfiprintf_r+0xc8c>
  4050ba:	e4d5      	b.n	404a68 <_vfiprintf_r+0x5cc>
  4050bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4050be:	4e19      	ldr	r6, [pc, #100]	; (405124 <_vfiprintf_r+0xc88>)
  4050c0:	3001      	adds	r0, #1
  4050c2:	e603      	b.n	404ccc <_vfiprintf_r+0x830>
  4050c4:	9405      	str	r4, [sp, #20]
  4050c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4050ca:	9607      	str	r6, [sp, #28]
  4050cc:	9302      	str	r3, [sp, #8]
  4050ce:	4604      	mov	r4, r0
  4050d0:	f7ff bb36 	b.w	404740 <_vfiprintf_r+0x2a4>
  4050d4:	4686      	mov	lr, r0
  4050d6:	f7ff bbce 	b.w	404876 <_vfiprintf_r+0x3da>
  4050da:	9806      	ldr	r0, [sp, #24]
  4050dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4050de:	4659      	mov	r1, fp
  4050e0:	f7ff f99c 	bl	40441c <__sprint_r.part.0>
  4050e4:	2800      	cmp	r0, #0
  4050e6:	f43f ae24 	beq.w	404d32 <_vfiprintf_r+0x896>
  4050ea:	e624      	b.n	404d36 <_vfiprintf_r+0x89a>
  4050ec:	9907      	ldr	r1, [sp, #28]
  4050ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4050f2:	680c      	ldr	r4, [r1, #0]
  4050f4:	3104      	adds	r1, #4
  4050f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4050fa:	46b8      	mov	r8, r7
  4050fc:	9107      	str	r1, [sp, #28]
  4050fe:	f7ff ba3f 	b.w	404580 <_vfiprintf_r+0xe4>
  405102:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405106:	e43c      	b.n	404982 <_vfiprintf_r+0x4e6>
  405108:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40510c:	e521      	b.n	404b52 <_vfiprintf_r+0x6b6>
  40510e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405112:	f7ff bbf4 	b.w	4048fe <_vfiprintf_r+0x462>
  405116:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40511a:	e491      	b.n	404a40 <_vfiprintf_r+0x5a4>
  40511c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405120:	e469      	b.n	4049f6 <_vfiprintf_r+0x55a>
  405122:	bf00      	nop
  405124:	00407f28 	.word	0x00407f28
  405128:	00407f20 	.word	0x00407f20

0040512c <__sbprintf>:
  40512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405130:	460c      	mov	r4, r1
  405132:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405136:	8989      	ldrh	r1, [r1, #12]
  405138:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40513a:	89e5      	ldrh	r5, [r4, #14]
  40513c:	9619      	str	r6, [sp, #100]	; 0x64
  40513e:	f021 0102 	bic.w	r1, r1, #2
  405142:	4606      	mov	r6, r0
  405144:	69e0      	ldr	r0, [r4, #28]
  405146:	f8ad 100c 	strh.w	r1, [sp, #12]
  40514a:	4617      	mov	r7, r2
  40514c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405150:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405152:	f8ad 500e 	strh.w	r5, [sp, #14]
  405156:	4698      	mov	r8, r3
  405158:	ad1a      	add	r5, sp, #104	; 0x68
  40515a:	2300      	movs	r3, #0
  40515c:	9007      	str	r0, [sp, #28]
  40515e:	a816      	add	r0, sp, #88	; 0x58
  405160:	9209      	str	r2, [sp, #36]	; 0x24
  405162:	9306      	str	r3, [sp, #24]
  405164:	9500      	str	r5, [sp, #0]
  405166:	9504      	str	r5, [sp, #16]
  405168:	9102      	str	r1, [sp, #8]
  40516a:	9105      	str	r1, [sp, #20]
  40516c:	f000 fd48 	bl	405c00 <__retarget_lock_init_recursive>
  405170:	4643      	mov	r3, r8
  405172:	463a      	mov	r2, r7
  405174:	4669      	mov	r1, sp
  405176:	4630      	mov	r0, r6
  405178:	f7ff f990 	bl	40449c <_vfiprintf_r>
  40517c:	1e05      	subs	r5, r0, #0
  40517e:	db07      	blt.n	405190 <__sbprintf+0x64>
  405180:	4630      	mov	r0, r6
  405182:	4669      	mov	r1, sp
  405184:	f000 f928 	bl	4053d8 <_fflush_r>
  405188:	2800      	cmp	r0, #0
  40518a:	bf18      	it	ne
  40518c:	f04f 35ff 	movne.w	r5, #4294967295
  405190:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  405194:	065b      	lsls	r3, r3, #25
  405196:	d503      	bpl.n	4051a0 <__sbprintf+0x74>
  405198:	89a3      	ldrh	r3, [r4, #12]
  40519a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40519e:	81a3      	strh	r3, [r4, #12]
  4051a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4051a2:	f000 fd2f 	bl	405c04 <__retarget_lock_close_recursive>
  4051a6:	4628      	mov	r0, r5
  4051a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004051b0 <__swsetup_r>:
  4051b0:	b538      	push	{r3, r4, r5, lr}
  4051b2:	4b30      	ldr	r3, [pc, #192]	; (405274 <__swsetup_r+0xc4>)
  4051b4:	681b      	ldr	r3, [r3, #0]
  4051b6:	4605      	mov	r5, r0
  4051b8:	460c      	mov	r4, r1
  4051ba:	b113      	cbz	r3, 4051c2 <__swsetup_r+0x12>
  4051bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4051be:	2a00      	cmp	r2, #0
  4051c0:	d038      	beq.n	405234 <__swsetup_r+0x84>
  4051c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4051c6:	b293      	uxth	r3, r2
  4051c8:	0718      	lsls	r0, r3, #28
  4051ca:	d50c      	bpl.n	4051e6 <__swsetup_r+0x36>
  4051cc:	6920      	ldr	r0, [r4, #16]
  4051ce:	b1a8      	cbz	r0, 4051fc <__swsetup_r+0x4c>
  4051d0:	f013 0201 	ands.w	r2, r3, #1
  4051d4:	d01e      	beq.n	405214 <__swsetup_r+0x64>
  4051d6:	6963      	ldr	r3, [r4, #20]
  4051d8:	2200      	movs	r2, #0
  4051da:	425b      	negs	r3, r3
  4051dc:	61a3      	str	r3, [r4, #24]
  4051de:	60a2      	str	r2, [r4, #8]
  4051e0:	b1f0      	cbz	r0, 405220 <__swsetup_r+0x70>
  4051e2:	2000      	movs	r0, #0
  4051e4:	bd38      	pop	{r3, r4, r5, pc}
  4051e6:	06d9      	lsls	r1, r3, #27
  4051e8:	d53c      	bpl.n	405264 <__swsetup_r+0xb4>
  4051ea:	0758      	lsls	r0, r3, #29
  4051ec:	d426      	bmi.n	40523c <__swsetup_r+0x8c>
  4051ee:	6920      	ldr	r0, [r4, #16]
  4051f0:	f042 0308 	orr.w	r3, r2, #8
  4051f4:	81a3      	strh	r3, [r4, #12]
  4051f6:	b29b      	uxth	r3, r3
  4051f8:	2800      	cmp	r0, #0
  4051fa:	d1e9      	bne.n	4051d0 <__swsetup_r+0x20>
  4051fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405200:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405204:	d0e4      	beq.n	4051d0 <__swsetup_r+0x20>
  405206:	4628      	mov	r0, r5
  405208:	4621      	mov	r1, r4
  40520a:	f000 fd2f 	bl	405c6c <__smakebuf_r>
  40520e:	89a3      	ldrh	r3, [r4, #12]
  405210:	6920      	ldr	r0, [r4, #16]
  405212:	e7dd      	b.n	4051d0 <__swsetup_r+0x20>
  405214:	0799      	lsls	r1, r3, #30
  405216:	bf58      	it	pl
  405218:	6962      	ldrpl	r2, [r4, #20]
  40521a:	60a2      	str	r2, [r4, #8]
  40521c:	2800      	cmp	r0, #0
  40521e:	d1e0      	bne.n	4051e2 <__swsetup_r+0x32>
  405220:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405224:	061a      	lsls	r2, r3, #24
  405226:	d5dd      	bpl.n	4051e4 <__swsetup_r+0x34>
  405228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40522c:	81a3      	strh	r3, [r4, #12]
  40522e:	f04f 30ff 	mov.w	r0, #4294967295
  405232:	bd38      	pop	{r3, r4, r5, pc}
  405234:	4618      	mov	r0, r3
  405236:	f000 f927 	bl	405488 <__sinit>
  40523a:	e7c2      	b.n	4051c2 <__swsetup_r+0x12>
  40523c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40523e:	b151      	cbz	r1, 405256 <__swsetup_r+0xa6>
  405240:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405244:	4299      	cmp	r1, r3
  405246:	d004      	beq.n	405252 <__swsetup_r+0xa2>
  405248:	4628      	mov	r0, r5
  40524a:	f000 fa43 	bl	4056d4 <_free_r>
  40524e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405252:	2300      	movs	r3, #0
  405254:	6323      	str	r3, [r4, #48]	; 0x30
  405256:	2300      	movs	r3, #0
  405258:	6920      	ldr	r0, [r4, #16]
  40525a:	6063      	str	r3, [r4, #4]
  40525c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  405260:	6020      	str	r0, [r4, #0]
  405262:	e7c5      	b.n	4051f0 <__swsetup_r+0x40>
  405264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  405268:	2309      	movs	r3, #9
  40526a:	602b      	str	r3, [r5, #0]
  40526c:	f04f 30ff 	mov.w	r0, #4294967295
  405270:	81a2      	strh	r2, [r4, #12]
  405272:	bd38      	pop	{r3, r4, r5, pc}
  405274:	2040000c 	.word	0x2040000c

00405278 <register_fini>:
  405278:	4b02      	ldr	r3, [pc, #8]	; (405284 <register_fini+0xc>)
  40527a:	b113      	cbz	r3, 405282 <register_fini+0xa>
  40527c:	4802      	ldr	r0, [pc, #8]	; (405288 <register_fini+0x10>)
  40527e:	f000 b805 	b.w	40528c <atexit>
  405282:	4770      	bx	lr
  405284:	00000000 	.word	0x00000000
  405288:	004054f9 	.word	0x004054f9

0040528c <atexit>:
  40528c:	2300      	movs	r3, #0
  40528e:	4601      	mov	r1, r0
  405290:	461a      	mov	r2, r3
  405292:	4618      	mov	r0, r3
  405294:	f001 b890 	b.w	4063b8 <__register_exitproc>

00405298 <__sflush_r>:
  405298:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40529c:	b29a      	uxth	r2, r3
  40529e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4052a2:	460d      	mov	r5, r1
  4052a4:	0711      	lsls	r1, r2, #28
  4052a6:	4680      	mov	r8, r0
  4052a8:	d43a      	bmi.n	405320 <__sflush_r+0x88>
  4052aa:	686a      	ldr	r2, [r5, #4]
  4052ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4052b0:	2a00      	cmp	r2, #0
  4052b2:	81ab      	strh	r3, [r5, #12]
  4052b4:	dd6f      	ble.n	405396 <__sflush_r+0xfe>
  4052b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4052b8:	2c00      	cmp	r4, #0
  4052ba:	d049      	beq.n	405350 <__sflush_r+0xb8>
  4052bc:	2200      	movs	r2, #0
  4052be:	b29b      	uxth	r3, r3
  4052c0:	f8d8 6000 	ldr.w	r6, [r8]
  4052c4:	f8c8 2000 	str.w	r2, [r8]
  4052c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4052cc:	d067      	beq.n	40539e <__sflush_r+0x106>
  4052ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4052d0:	075f      	lsls	r7, r3, #29
  4052d2:	d505      	bpl.n	4052e0 <__sflush_r+0x48>
  4052d4:	6869      	ldr	r1, [r5, #4]
  4052d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4052d8:	1a52      	subs	r2, r2, r1
  4052da:	b10b      	cbz	r3, 4052e0 <__sflush_r+0x48>
  4052dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4052de:	1ad2      	subs	r2, r2, r3
  4052e0:	2300      	movs	r3, #0
  4052e2:	69e9      	ldr	r1, [r5, #28]
  4052e4:	4640      	mov	r0, r8
  4052e6:	47a0      	blx	r4
  4052e8:	1c44      	adds	r4, r0, #1
  4052ea:	d03c      	beq.n	405366 <__sflush_r+0xce>
  4052ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4052f0:	692a      	ldr	r2, [r5, #16]
  4052f2:	602a      	str	r2, [r5, #0]
  4052f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4052f8:	2200      	movs	r2, #0
  4052fa:	81ab      	strh	r3, [r5, #12]
  4052fc:	04db      	lsls	r3, r3, #19
  4052fe:	606a      	str	r2, [r5, #4]
  405300:	d447      	bmi.n	405392 <__sflush_r+0xfa>
  405302:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405304:	f8c8 6000 	str.w	r6, [r8]
  405308:	b311      	cbz	r1, 405350 <__sflush_r+0xb8>
  40530a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40530e:	4299      	cmp	r1, r3
  405310:	d002      	beq.n	405318 <__sflush_r+0x80>
  405312:	4640      	mov	r0, r8
  405314:	f000 f9de 	bl	4056d4 <_free_r>
  405318:	2000      	movs	r0, #0
  40531a:	6328      	str	r0, [r5, #48]	; 0x30
  40531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405320:	692e      	ldr	r6, [r5, #16]
  405322:	b1ae      	cbz	r6, 405350 <__sflush_r+0xb8>
  405324:	682c      	ldr	r4, [r5, #0]
  405326:	602e      	str	r6, [r5, #0]
  405328:	0791      	lsls	r1, r2, #30
  40532a:	bf0c      	ite	eq
  40532c:	696b      	ldreq	r3, [r5, #20]
  40532e:	2300      	movne	r3, #0
  405330:	1ba4      	subs	r4, r4, r6
  405332:	60ab      	str	r3, [r5, #8]
  405334:	e00a      	b.n	40534c <__sflush_r+0xb4>
  405336:	4623      	mov	r3, r4
  405338:	4632      	mov	r2, r6
  40533a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40533c:	69e9      	ldr	r1, [r5, #28]
  40533e:	4640      	mov	r0, r8
  405340:	47b8      	blx	r7
  405342:	2800      	cmp	r0, #0
  405344:	eba4 0400 	sub.w	r4, r4, r0
  405348:	4406      	add	r6, r0
  40534a:	dd04      	ble.n	405356 <__sflush_r+0xbe>
  40534c:	2c00      	cmp	r4, #0
  40534e:	dcf2      	bgt.n	405336 <__sflush_r+0x9e>
  405350:	2000      	movs	r0, #0
  405352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405356:	89ab      	ldrh	r3, [r5, #12]
  405358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40535c:	81ab      	strh	r3, [r5, #12]
  40535e:	f04f 30ff 	mov.w	r0, #4294967295
  405362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405366:	f8d8 4000 	ldr.w	r4, [r8]
  40536a:	2c1d      	cmp	r4, #29
  40536c:	d8f3      	bhi.n	405356 <__sflush_r+0xbe>
  40536e:	4b19      	ldr	r3, [pc, #100]	; (4053d4 <__sflush_r+0x13c>)
  405370:	40e3      	lsrs	r3, r4
  405372:	43db      	mvns	r3, r3
  405374:	f013 0301 	ands.w	r3, r3, #1
  405378:	d1ed      	bne.n	405356 <__sflush_r+0xbe>
  40537a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40537e:	606b      	str	r3, [r5, #4]
  405380:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405384:	6929      	ldr	r1, [r5, #16]
  405386:	81ab      	strh	r3, [r5, #12]
  405388:	04da      	lsls	r2, r3, #19
  40538a:	6029      	str	r1, [r5, #0]
  40538c:	d5b9      	bpl.n	405302 <__sflush_r+0x6a>
  40538e:	2c00      	cmp	r4, #0
  405390:	d1b7      	bne.n	405302 <__sflush_r+0x6a>
  405392:	6528      	str	r0, [r5, #80]	; 0x50
  405394:	e7b5      	b.n	405302 <__sflush_r+0x6a>
  405396:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405398:	2a00      	cmp	r2, #0
  40539a:	dc8c      	bgt.n	4052b6 <__sflush_r+0x1e>
  40539c:	e7d8      	b.n	405350 <__sflush_r+0xb8>
  40539e:	2301      	movs	r3, #1
  4053a0:	69e9      	ldr	r1, [r5, #28]
  4053a2:	4640      	mov	r0, r8
  4053a4:	47a0      	blx	r4
  4053a6:	1c43      	adds	r3, r0, #1
  4053a8:	4602      	mov	r2, r0
  4053aa:	d002      	beq.n	4053b2 <__sflush_r+0x11a>
  4053ac:	89ab      	ldrh	r3, [r5, #12]
  4053ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4053b0:	e78e      	b.n	4052d0 <__sflush_r+0x38>
  4053b2:	f8d8 3000 	ldr.w	r3, [r8]
  4053b6:	2b00      	cmp	r3, #0
  4053b8:	d0f8      	beq.n	4053ac <__sflush_r+0x114>
  4053ba:	2b1d      	cmp	r3, #29
  4053bc:	d001      	beq.n	4053c2 <__sflush_r+0x12a>
  4053be:	2b16      	cmp	r3, #22
  4053c0:	d102      	bne.n	4053c8 <__sflush_r+0x130>
  4053c2:	f8c8 6000 	str.w	r6, [r8]
  4053c6:	e7c3      	b.n	405350 <__sflush_r+0xb8>
  4053c8:	89ab      	ldrh	r3, [r5, #12]
  4053ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4053ce:	81ab      	strh	r3, [r5, #12]
  4053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4053d4:	20400001 	.word	0x20400001

004053d8 <_fflush_r>:
  4053d8:	b538      	push	{r3, r4, r5, lr}
  4053da:	460d      	mov	r5, r1
  4053dc:	4604      	mov	r4, r0
  4053de:	b108      	cbz	r0, 4053e4 <_fflush_r+0xc>
  4053e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4053e2:	b1bb      	cbz	r3, 405414 <_fflush_r+0x3c>
  4053e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4053e8:	b188      	cbz	r0, 40540e <_fflush_r+0x36>
  4053ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4053ec:	07db      	lsls	r3, r3, #31
  4053ee:	d401      	bmi.n	4053f4 <_fflush_r+0x1c>
  4053f0:	0581      	lsls	r1, r0, #22
  4053f2:	d517      	bpl.n	405424 <_fflush_r+0x4c>
  4053f4:	4620      	mov	r0, r4
  4053f6:	4629      	mov	r1, r5
  4053f8:	f7ff ff4e 	bl	405298 <__sflush_r>
  4053fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4053fe:	07da      	lsls	r2, r3, #31
  405400:	4604      	mov	r4, r0
  405402:	d402      	bmi.n	40540a <_fflush_r+0x32>
  405404:	89ab      	ldrh	r3, [r5, #12]
  405406:	059b      	lsls	r3, r3, #22
  405408:	d507      	bpl.n	40541a <_fflush_r+0x42>
  40540a:	4620      	mov	r0, r4
  40540c:	bd38      	pop	{r3, r4, r5, pc}
  40540e:	4604      	mov	r4, r0
  405410:	4620      	mov	r0, r4
  405412:	bd38      	pop	{r3, r4, r5, pc}
  405414:	f000 f838 	bl	405488 <__sinit>
  405418:	e7e4      	b.n	4053e4 <_fflush_r+0xc>
  40541a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  40541c:	f000 fbf6 	bl	405c0c <__retarget_lock_release_recursive>
  405420:	4620      	mov	r0, r4
  405422:	bd38      	pop	{r3, r4, r5, pc}
  405424:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405426:	f000 fbef 	bl	405c08 <__retarget_lock_acquire_recursive>
  40542a:	e7e3      	b.n	4053f4 <_fflush_r+0x1c>

0040542c <_cleanup_r>:
  40542c:	4901      	ldr	r1, [pc, #4]	; (405434 <_cleanup_r+0x8>)
  40542e:	f000 bbaf 	b.w	405b90 <_fwalk_reent>
  405432:	bf00      	nop
  405434:	004064a1 	.word	0x004064a1

00405438 <std.isra.0>:
  405438:	b510      	push	{r4, lr}
  40543a:	2300      	movs	r3, #0
  40543c:	4604      	mov	r4, r0
  40543e:	8181      	strh	r1, [r0, #12]
  405440:	81c2      	strh	r2, [r0, #14]
  405442:	6003      	str	r3, [r0, #0]
  405444:	6043      	str	r3, [r0, #4]
  405446:	6083      	str	r3, [r0, #8]
  405448:	6643      	str	r3, [r0, #100]	; 0x64
  40544a:	6103      	str	r3, [r0, #16]
  40544c:	6143      	str	r3, [r0, #20]
  40544e:	6183      	str	r3, [r0, #24]
  405450:	4619      	mov	r1, r3
  405452:	2208      	movs	r2, #8
  405454:	305c      	adds	r0, #92	; 0x5c
  405456:	f7fe fe2f 	bl	4040b8 <memset>
  40545a:	4807      	ldr	r0, [pc, #28]	; (405478 <std.isra.0+0x40>)
  40545c:	4907      	ldr	r1, [pc, #28]	; (40547c <std.isra.0+0x44>)
  40545e:	4a08      	ldr	r2, [pc, #32]	; (405480 <std.isra.0+0x48>)
  405460:	4b08      	ldr	r3, [pc, #32]	; (405484 <std.isra.0+0x4c>)
  405462:	6220      	str	r0, [r4, #32]
  405464:	61e4      	str	r4, [r4, #28]
  405466:	6261      	str	r1, [r4, #36]	; 0x24
  405468:	62a2      	str	r2, [r4, #40]	; 0x28
  40546a:	62e3      	str	r3, [r4, #44]	; 0x2c
  40546c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405474:	f000 bbc4 	b.w	405c00 <__retarget_lock_init_recursive>
  405478:	004061e5 	.word	0x004061e5
  40547c:	00406209 	.word	0x00406209
  405480:	00406245 	.word	0x00406245
  405484:	00406265 	.word	0x00406265

00405488 <__sinit>:
  405488:	b510      	push	{r4, lr}
  40548a:	4604      	mov	r4, r0
  40548c:	4812      	ldr	r0, [pc, #72]	; (4054d8 <__sinit+0x50>)
  40548e:	f000 fbbb 	bl	405c08 <__retarget_lock_acquire_recursive>
  405492:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405494:	b9d2      	cbnz	r2, 4054cc <__sinit+0x44>
  405496:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  40549a:	4810      	ldr	r0, [pc, #64]	; (4054dc <__sinit+0x54>)
  40549c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  4054a0:	2103      	movs	r1, #3
  4054a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  4054a6:	63e0      	str	r0, [r4, #60]	; 0x3c
  4054a8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  4054ac:	6860      	ldr	r0, [r4, #4]
  4054ae:	2104      	movs	r1, #4
  4054b0:	f7ff ffc2 	bl	405438 <std.isra.0>
  4054b4:	2201      	movs	r2, #1
  4054b6:	2109      	movs	r1, #9
  4054b8:	68a0      	ldr	r0, [r4, #8]
  4054ba:	f7ff ffbd 	bl	405438 <std.isra.0>
  4054be:	2202      	movs	r2, #2
  4054c0:	2112      	movs	r1, #18
  4054c2:	68e0      	ldr	r0, [r4, #12]
  4054c4:	f7ff ffb8 	bl	405438 <std.isra.0>
  4054c8:	2301      	movs	r3, #1
  4054ca:	63a3      	str	r3, [r4, #56]	; 0x38
  4054cc:	4802      	ldr	r0, [pc, #8]	; (4054d8 <__sinit+0x50>)
  4054ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4054d2:	f000 bb9b 	b.w	405c0c <__retarget_lock_release_recursive>
  4054d6:	bf00      	nop
  4054d8:	20400c2c 	.word	0x20400c2c
  4054dc:	0040542d 	.word	0x0040542d

004054e0 <__sfp_lock_acquire>:
  4054e0:	4801      	ldr	r0, [pc, #4]	; (4054e8 <__sfp_lock_acquire+0x8>)
  4054e2:	f000 bb91 	b.w	405c08 <__retarget_lock_acquire_recursive>
  4054e6:	bf00      	nop
  4054e8:	20400c40 	.word	0x20400c40

004054ec <__sfp_lock_release>:
  4054ec:	4801      	ldr	r0, [pc, #4]	; (4054f4 <__sfp_lock_release+0x8>)
  4054ee:	f000 bb8d 	b.w	405c0c <__retarget_lock_release_recursive>
  4054f2:	bf00      	nop
  4054f4:	20400c40 	.word	0x20400c40

004054f8 <__libc_fini_array>:
  4054f8:	b538      	push	{r3, r4, r5, lr}
  4054fa:	4c0a      	ldr	r4, [pc, #40]	; (405524 <__libc_fini_array+0x2c>)
  4054fc:	4d0a      	ldr	r5, [pc, #40]	; (405528 <__libc_fini_array+0x30>)
  4054fe:	1b64      	subs	r4, r4, r5
  405500:	10a4      	asrs	r4, r4, #2
  405502:	d00a      	beq.n	40551a <__libc_fini_array+0x22>
  405504:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405508:	3b01      	subs	r3, #1
  40550a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  40550e:	3c01      	subs	r4, #1
  405510:	f855 3904 	ldr.w	r3, [r5], #-4
  405514:	4798      	blx	r3
  405516:	2c00      	cmp	r4, #0
  405518:	d1f9      	bne.n	40550e <__libc_fini_array+0x16>
  40551a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  40551e:	f002 bda7 	b.w	408070 <_fini>
  405522:	bf00      	nop
  405524:	00408080 	.word	0x00408080
  405528:	0040807c 	.word	0x0040807c

0040552c <__fputwc>:
  40552c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405530:	b082      	sub	sp, #8
  405532:	4680      	mov	r8, r0
  405534:	4689      	mov	r9, r1
  405536:	4614      	mov	r4, r2
  405538:	f000 fb54 	bl	405be4 <__locale_mb_cur_max>
  40553c:	2801      	cmp	r0, #1
  40553e:	d036      	beq.n	4055ae <__fputwc+0x82>
  405540:	464a      	mov	r2, r9
  405542:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405546:	a901      	add	r1, sp, #4
  405548:	4640      	mov	r0, r8
  40554a:	f000 fee7 	bl	40631c <_wcrtomb_r>
  40554e:	1c42      	adds	r2, r0, #1
  405550:	4606      	mov	r6, r0
  405552:	d025      	beq.n	4055a0 <__fputwc+0x74>
  405554:	b3a8      	cbz	r0, 4055c2 <__fputwc+0x96>
  405556:	f89d e004 	ldrb.w	lr, [sp, #4]
  40555a:	2500      	movs	r5, #0
  40555c:	f10d 0a04 	add.w	sl, sp, #4
  405560:	e009      	b.n	405576 <__fputwc+0x4a>
  405562:	6823      	ldr	r3, [r4, #0]
  405564:	1c5a      	adds	r2, r3, #1
  405566:	6022      	str	r2, [r4, #0]
  405568:	f883 e000 	strb.w	lr, [r3]
  40556c:	3501      	adds	r5, #1
  40556e:	42b5      	cmp	r5, r6
  405570:	d227      	bcs.n	4055c2 <__fputwc+0x96>
  405572:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405576:	68a3      	ldr	r3, [r4, #8]
  405578:	3b01      	subs	r3, #1
  40557a:	2b00      	cmp	r3, #0
  40557c:	60a3      	str	r3, [r4, #8]
  40557e:	daf0      	bge.n	405562 <__fputwc+0x36>
  405580:	69a7      	ldr	r7, [r4, #24]
  405582:	42bb      	cmp	r3, r7
  405584:	4671      	mov	r1, lr
  405586:	4622      	mov	r2, r4
  405588:	4640      	mov	r0, r8
  40558a:	db02      	blt.n	405592 <__fputwc+0x66>
  40558c:	f1be 0f0a 	cmp.w	lr, #10
  405590:	d1e7      	bne.n	405562 <__fputwc+0x36>
  405592:	f000 fe6b 	bl	40626c <__swbuf_r>
  405596:	1c43      	adds	r3, r0, #1
  405598:	d1e8      	bne.n	40556c <__fputwc+0x40>
  40559a:	b002      	add	sp, #8
  40559c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055a0:	89a3      	ldrh	r3, [r4, #12]
  4055a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4055a6:	81a3      	strh	r3, [r4, #12]
  4055a8:	b002      	add	sp, #8
  4055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055ae:	f109 33ff 	add.w	r3, r9, #4294967295
  4055b2:	2bfe      	cmp	r3, #254	; 0xfe
  4055b4:	d8c4      	bhi.n	405540 <__fputwc+0x14>
  4055b6:	fa5f fe89 	uxtb.w	lr, r9
  4055ba:	4606      	mov	r6, r0
  4055bc:	f88d e004 	strb.w	lr, [sp, #4]
  4055c0:	e7cb      	b.n	40555a <__fputwc+0x2e>
  4055c2:	4648      	mov	r0, r9
  4055c4:	b002      	add	sp, #8
  4055c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4055ca:	bf00      	nop

004055cc <_fputwc_r>:
  4055cc:	b530      	push	{r4, r5, lr}
  4055ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  4055d0:	f013 0f01 	tst.w	r3, #1
  4055d4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  4055d8:	4614      	mov	r4, r2
  4055da:	b083      	sub	sp, #12
  4055dc:	4605      	mov	r5, r0
  4055de:	b29a      	uxth	r2, r3
  4055e0:	d101      	bne.n	4055e6 <_fputwc_r+0x1a>
  4055e2:	0590      	lsls	r0, r2, #22
  4055e4:	d51c      	bpl.n	405620 <_fputwc_r+0x54>
  4055e6:	0490      	lsls	r0, r2, #18
  4055e8:	d406      	bmi.n	4055f8 <_fputwc_r+0x2c>
  4055ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  4055ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  4055f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4055f4:	81a3      	strh	r3, [r4, #12]
  4055f6:	6662      	str	r2, [r4, #100]	; 0x64
  4055f8:	4628      	mov	r0, r5
  4055fa:	4622      	mov	r2, r4
  4055fc:	f7ff ff96 	bl	40552c <__fputwc>
  405600:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405602:	07da      	lsls	r2, r3, #31
  405604:	4605      	mov	r5, r0
  405606:	d402      	bmi.n	40560e <_fputwc_r+0x42>
  405608:	89a3      	ldrh	r3, [r4, #12]
  40560a:	059b      	lsls	r3, r3, #22
  40560c:	d502      	bpl.n	405614 <_fputwc_r+0x48>
  40560e:	4628      	mov	r0, r5
  405610:	b003      	add	sp, #12
  405612:	bd30      	pop	{r4, r5, pc}
  405614:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405616:	f000 faf9 	bl	405c0c <__retarget_lock_release_recursive>
  40561a:	4628      	mov	r0, r5
  40561c:	b003      	add	sp, #12
  40561e:	bd30      	pop	{r4, r5, pc}
  405620:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405622:	9101      	str	r1, [sp, #4]
  405624:	f000 faf0 	bl	405c08 <__retarget_lock_acquire_recursive>
  405628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40562c:	9901      	ldr	r1, [sp, #4]
  40562e:	b29a      	uxth	r2, r3
  405630:	e7d9      	b.n	4055e6 <_fputwc_r+0x1a>
  405632:	bf00      	nop

00405634 <_malloc_trim_r>:
  405634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405636:	4f24      	ldr	r7, [pc, #144]	; (4056c8 <_malloc_trim_r+0x94>)
  405638:	460c      	mov	r4, r1
  40563a:	4606      	mov	r6, r0
  40563c:	f7fe fd8a 	bl	404154 <__malloc_lock>
  405640:	68bb      	ldr	r3, [r7, #8]
  405642:	685d      	ldr	r5, [r3, #4]
  405644:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405648:	310f      	adds	r1, #15
  40564a:	f025 0503 	bic.w	r5, r5, #3
  40564e:	4429      	add	r1, r5
  405650:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405654:	f021 010f 	bic.w	r1, r1, #15
  405658:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  40565c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405660:	db07      	blt.n	405672 <_malloc_trim_r+0x3e>
  405662:	2100      	movs	r1, #0
  405664:	4630      	mov	r0, r6
  405666:	f7fe fd81 	bl	40416c <_sbrk_r>
  40566a:	68bb      	ldr	r3, [r7, #8]
  40566c:	442b      	add	r3, r5
  40566e:	4298      	cmp	r0, r3
  405670:	d004      	beq.n	40567c <_malloc_trim_r+0x48>
  405672:	4630      	mov	r0, r6
  405674:	f7fe fd74 	bl	404160 <__malloc_unlock>
  405678:	2000      	movs	r0, #0
  40567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40567c:	4261      	negs	r1, r4
  40567e:	4630      	mov	r0, r6
  405680:	f7fe fd74 	bl	40416c <_sbrk_r>
  405684:	3001      	adds	r0, #1
  405686:	d00d      	beq.n	4056a4 <_malloc_trim_r+0x70>
  405688:	4b10      	ldr	r3, [pc, #64]	; (4056cc <_malloc_trim_r+0x98>)
  40568a:	68ba      	ldr	r2, [r7, #8]
  40568c:	6819      	ldr	r1, [r3, #0]
  40568e:	1b2d      	subs	r5, r5, r4
  405690:	f045 0501 	orr.w	r5, r5, #1
  405694:	4630      	mov	r0, r6
  405696:	1b09      	subs	r1, r1, r4
  405698:	6055      	str	r5, [r2, #4]
  40569a:	6019      	str	r1, [r3, #0]
  40569c:	f7fe fd60 	bl	404160 <__malloc_unlock>
  4056a0:	2001      	movs	r0, #1
  4056a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4056a4:	2100      	movs	r1, #0
  4056a6:	4630      	mov	r0, r6
  4056a8:	f7fe fd60 	bl	40416c <_sbrk_r>
  4056ac:	68ba      	ldr	r2, [r7, #8]
  4056ae:	1a83      	subs	r3, r0, r2
  4056b0:	2b0f      	cmp	r3, #15
  4056b2:	ddde      	ble.n	405672 <_malloc_trim_r+0x3e>
  4056b4:	4c06      	ldr	r4, [pc, #24]	; (4056d0 <_malloc_trim_r+0x9c>)
  4056b6:	4905      	ldr	r1, [pc, #20]	; (4056cc <_malloc_trim_r+0x98>)
  4056b8:	6824      	ldr	r4, [r4, #0]
  4056ba:	f043 0301 	orr.w	r3, r3, #1
  4056be:	1b00      	subs	r0, r0, r4
  4056c0:	6053      	str	r3, [r2, #4]
  4056c2:	6008      	str	r0, [r1, #0]
  4056c4:	e7d5      	b.n	405672 <_malloc_trim_r+0x3e>
  4056c6:	bf00      	nop
  4056c8:	20400438 	.word	0x20400438
  4056cc:	20400b94 	.word	0x20400b94
  4056d0:	20400840 	.word	0x20400840

004056d4 <_free_r>:
  4056d4:	2900      	cmp	r1, #0
  4056d6:	d044      	beq.n	405762 <_free_r+0x8e>
  4056d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4056dc:	460d      	mov	r5, r1
  4056de:	4680      	mov	r8, r0
  4056e0:	f7fe fd38 	bl	404154 <__malloc_lock>
  4056e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  4056e8:	4969      	ldr	r1, [pc, #420]	; (405890 <_free_r+0x1bc>)
  4056ea:	f027 0301 	bic.w	r3, r7, #1
  4056ee:	f1a5 0408 	sub.w	r4, r5, #8
  4056f2:	18e2      	adds	r2, r4, r3
  4056f4:	688e      	ldr	r6, [r1, #8]
  4056f6:	6850      	ldr	r0, [r2, #4]
  4056f8:	42b2      	cmp	r2, r6
  4056fa:	f020 0003 	bic.w	r0, r0, #3
  4056fe:	d05e      	beq.n	4057be <_free_r+0xea>
  405700:	07fe      	lsls	r6, r7, #31
  405702:	6050      	str	r0, [r2, #4]
  405704:	d40b      	bmi.n	40571e <_free_r+0x4a>
  405706:	f855 7c08 	ldr.w	r7, [r5, #-8]
  40570a:	1be4      	subs	r4, r4, r7
  40570c:	f101 0e08 	add.w	lr, r1, #8
  405710:	68a5      	ldr	r5, [r4, #8]
  405712:	4575      	cmp	r5, lr
  405714:	443b      	add	r3, r7
  405716:	d06d      	beq.n	4057f4 <_free_r+0x120>
  405718:	68e7      	ldr	r7, [r4, #12]
  40571a:	60ef      	str	r7, [r5, #12]
  40571c:	60bd      	str	r5, [r7, #8]
  40571e:	1815      	adds	r5, r2, r0
  405720:	686d      	ldr	r5, [r5, #4]
  405722:	07ed      	lsls	r5, r5, #31
  405724:	d53e      	bpl.n	4057a4 <_free_r+0xd0>
  405726:	f043 0201 	orr.w	r2, r3, #1
  40572a:	6062      	str	r2, [r4, #4]
  40572c:	50e3      	str	r3, [r4, r3]
  40572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405732:	d217      	bcs.n	405764 <_free_r+0x90>
  405734:	08db      	lsrs	r3, r3, #3
  405736:	1c58      	adds	r0, r3, #1
  405738:	109a      	asrs	r2, r3, #2
  40573a:	684d      	ldr	r5, [r1, #4]
  40573c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405740:	60a7      	str	r7, [r4, #8]
  405742:	2301      	movs	r3, #1
  405744:	4093      	lsls	r3, r2
  405746:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  40574a:	432b      	orrs	r3, r5
  40574c:	3a08      	subs	r2, #8
  40574e:	60e2      	str	r2, [r4, #12]
  405750:	604b      	str	r3, [r1, #4]
  405752:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405756:	60fc      	str	r4, [r7, #12]
  405758:	4640      	mov	r0, r8
  40575a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  40575e:	f7fe bcff 	b.w	404160 <__malloc_unlock>
  405762:	4770      	bx	lr
  405764:	0a5a      	lsrs	r2, r3, #9
  405766:	2a04      	cmp	r2, #4
  405768:	d852      	bhi.n	405810 <_free_r+0x13c>
  40576a:	099a      	lsrs	r2, r3, #6
  40576c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405770:	00ff      	lsls	r7, r7, #3
  405772:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405776:	19c8      	adds	r0, r1, r7
  405778:	59ca      	ldr	r2, [r1, r7]
  40577a:	3808      	subs	r0, #8
  40577c:	4290      	cmp	r0, r2
  40577e:	d04f      	beq.n	405820 <_free_r+0x14c>
  405780:	6851      	ldr	r1, [r2, #4]
  405782:	f021 0103 	bic.w	r1, r1, #3
  405786:	428b      	cmp	r3, r1
  405788:	d232      	bcs.n	4057f0 <_free_r+0x11c>
  40578a:	6892      	ldr	r2, [r2, #8]
  40578c:	4290      	cmp	r0, r2
  40578e:	d1f7      	bne.n	405780 <_free_r+0xac>
  405790:	68c3      	ldr	r3, [r0, #12]
  405792:	60a0      	str	r0, [r4, #8]
  405794:	60e3      	str	r3, [r4, #12]
  405796:	609c      	str	r4, [r3, #8]
  405798:	60c4      	str	r4, [r0, #12]
  40579a:	4640      	mov	r0, r8
  40579c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  4057a0:	f7fe bcde 	b.w	404160 <__malloc_unlock>
  4057a4:	6895      	ldr	r5, [r2, #8]
  4057a6:	4f3b      	ldr	r7, [pc, #236]	; (405894 <_free_r+0x1c0>)
  4057a8:	42bd      	cmp	r5, r7
  4057aa:	4403      	add	r3, r0
  4057ac:	d040      	beq.n	405830 <_free_r+0x15c>
  4057ae:	68d0      	ldr	r0, [r2, #12]
  4057b0:	60e8      	str	r0, [r5, #12]
  4057b2:	f043 0201 	orr.w	r2, r3, #1
  4057b6:	6085      	str	r5, [r0, #8]
  4057b8:	6062      	str	r2, [r4, #4]
  4057ba:	50e3      	str	r3, [r4, r3]
  4057bc:	e7b7      	b.n	40572e <_free_r+0x5a>
  4057be:	07ff      	lsls	r7, r7, #31
  4057c0:	4403      	add	r3, r0
  4057c2:	d407      	bmi.n	4057d4 <_free_r+0x100>
  4057c4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  4057c8:	1aa4      	subs	r4, r4, r2
  4057ca:	4413      	add	r3, r2
  4057cc:	68a0      	ldr	r0, [r4, #8]
  4057ce:	68e2      	ldr	r2, [r4, #12]
  4057d0:	60c2      	str	r2, [r0, #12]
  4057d2:	6090      	str	r0, [r2, #8]
  4057d4:	4a30      	ldr	r2, [pc, #192]	; (405898 <_free_r+0x1c4>)
  4057d6:	6812      	ldr	r2, [r2, #0]
  4057d8:	f043 0001 	orr.w	r0, r3, #1
  4057dc:	4293      	cmp	r3, r2
  4057de:	6060      	str	r0, [r4, #4]
  4057e0:	608c      	str	r4, [r1, #8]
  4057e2:	d3b9      	bcc.n	405758 <_free_r+0x84>
  4057e4:	4b2d      	ldr	r3, [pc, #180]	; (40589c <_free_r+0x1c8>)
  4057e6:	4640      	mov	r0, r8
  4057e8:	6819      	ldr	r1, [r3, #0]
  4057ea:	f7ff ff23 	bl	405634 <_malloc_trim_r>
  4057ee:	e7b3      	b.n	405758 <_free_r+0x84>
  4057f0:	4610      	mov	r0, r2
  4057f2:	e7cd      	b.n	405790 <_free_r+0xbc>
  4057f4:	1811      	adds	r1, r2, r0
  4057f6:	6849      	ldr	r1, [r1, #4]
  4057f8:	07c9      	lsls	r1, r1, #31
  4057fa:	d444      	bmi.n	405886 <_free_r+0x1b2>
  4057fc:	6891      	ldr	r1, [r2, #8]
  4057fe:	68d2      	ldr	r2, [r2, #12]
  405800:	60ca      	str	r2, [r1, #12]
  405802:	4403      	add	r3, r0
  405804:	f043 0001 	orr.w	r0, r3, #1
  405808:	6091      	str	r1, [r2, #8]
  40580a:	6060      	str	r0, [r4, #4]
  40580c:	50e3      	str	r3, [r4, r3]
  40580e:	e7a3      	b.n	405758 <_free_r+0x84>
  405810:	2a14      	cmp	r2, #20
  405812:	d816      	bhi.n	405842 <_free_r+0x16e>
  405814:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405818:	00ff      	lsls	r7, r7, #3
  40581a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  40581e:	e7aa      	b.n	405776 <_free_r+0xa2>
  405820:	10aa      	asrs	r2, r5, #2
  405822:	2301      	movs	r3, #1
  405824:	684d      	ldr	r5, [r1, #4]
  405826:	4093      	lsls	r3, r2
  405828:	432b      	orrs	r3, r5
  40582a:	604b      	str	r3, [r1, #4]
  40582c:	4603      	mov	r3, r0
  40582e:	e7b0      	b.n	405792 <_free_r+0xbe>
  405830:	f043 0201 	orr.w	r2, r3, #1
  405834:	614c      	str	r4, [r1, #20]
  405836:	610c      	str	r4, [r1, #16]
  405838:	60e5      	str	r5, [r4, #12]
  40583a:	60a5      	str	r5, [r4, #8]
  40583c:	6062      	str	r2, [r4, #4]
  40583e:	50e3      	str	r3, [r4, r3]
  405840:	e78a      	b.n	405758 <_free_r+0x84>
  405842:	2a54      	cmp	r2, #84	; 0x54
  405844:	d806      	bhi.n	405854 <_free_r+0x180>
  405846:	0b1a      	lsrs	r2, r3, #12
  405848:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  40584c:	00ff      	lsls	r7, r7, #3
  40584e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405852:	e790      	b.n	405776 <_free_r+0xa2>
  405854:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405858:	d806      	bhi.n	405868 <_free_r+0x194>
  40585a:	0bda      	lsrs	r2, r3, #15
  40585c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405860:	00ff      	lsls	r7, r7, #3
  405862:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405866:	e786      	b.n	405776 <_free_r+0xa2>
  405868:	f240 5054 	movw	r0, #1364	; 0x554
  40586c:	4282      	cmp	r2, r0
  40586e:	d806      	bhi.n	40587e <_free_r+0x1aa>
  405870:	0c9a      	lsrs	r2, r3, #18
  405872:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405876:	00ff      	lsls	r7, r7, #3
  405878:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  40587c:	e77b      	b.n	405776 <_free_r+0xa2>
  40587e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405882:	257e      	movs	r5, #126	; 0x7e
  405884:	e777      	b.n	405776 <_free_r+0xa2>
  405886:	f043 0101 	orr.w	r1, r3, #1
  40588a:	6061      	str	r1, [r4, #4]
  40588c:	6013      	str	r3, [r2, #0]
  40588e:	e763      	b.n	405758 <_free_r+0x84>
  405890:	20400438 	.word	0x20400438
  405894:	20400440 	.word	0x20400440
  405898:	20400844 	.word	0x20400844
  40589c:	20400bc4 	.word	0x20400bc4

004058a0 <__sfvwrite_r>:
  4058a0:	6893      	ldr	r3, [r2, #8]
  4058a2:	2b00      	cmp	r3, #0
  4058a4:	d073      	beq.n	40598e <__sfvwrite_r+0xee>
  4058a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4058aa:	898b      	ldrh	r3, [r1, #12]
  4058ac:	b083      	sub	sp, #12
  4058ae:	460c      	mov	r4, r1
  4058b0:	0719      	lsls	r1, r3, #28
  4058b2:	9000      	str	r0, [sp, #0]
  4058b4:	4616      	mov	r6, r2
  4058b6:	d526      	bpl.n	405906 <__sfvwrite_r+0x66>
  4058b8:	6922      	ldr	r2, [r4, #16]
  4058ba:	b322      	cbz	r2, 405906 <__sfvwrite_r+0x66>
  4058bc:	f013 0002 	ands.w	r0, r3, #2
  4058c0:	6835      	ldr	r5, [r6, #0]
  4058c2:	d02c      	beq.n	40591e <__sfvwrite_r+0x7e>
  4058c4:	f04f 0900 	mov.w	r9, #0
  4058c8:	4fb0      	ldr	r7, [pc, #704]	; (405b8c <__sfvwrite_r+0x2ec>)
  4058ca:	46c8      	mov	r8, r9
  4058cc:	46b2      	mov	sl, r6
  4058ce:	45b8      	cmp	r8, r7
  4058d0:	4643      	mov	r3, r8
  4058d2:	464a      	mov	r2, r9
  4058d4:	bf28      	it	cs
  4058d6:	463b      	movcs	r3, r7
  4058d8:	9800      	ldr	r0, [sp, #0]
  4058da:	f1b8 0f00 	cmp.w	r8, #0
  4058de:	d050      	beq.n	405982 <__sfvwrite_r+0xe2>
  4058e0:	69e1      	ldr	r1, [r4, #28]
  4058e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  4058e4:	47b0      	blx	r6
  4058e6:	2800      	cmp	r0, #0
  4058e8:	dd58      	ble.n	40599c <__sfvwrite_r+0xfc>
  4058ea:	f8da 3008 	ldr.w	r3, [sl, #8]
  4058ee:	1a1b      	subs	r3, r3, r0
  4058f0:	4481      	add	r9, r0
  4058f2:	eba8 0800 	sub.w	r8, r8, r0
  4058f6:	f8ca 3008 	str.w	r3, [sl, #8]
  4058fa:	2b00      	cmp	r3, #0
  4058fc:	d1e7      	bne.n	4058ce <__sfvwrite_r+0x2e>
  4058fe:	2000      	movs	r0, #0
  405900:	b003      	add	sp, #12
  405902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405906:	4621      	mov	r1, r4
  405908:	9800      	ldr	r0, [sp, #0]
  40590a:	f7ff fc51 	bl	4051b0 <__swsetup_r>
  40590e:	2800      	cmp	r0, #0
  405910:	f040 8133 	bne.w	405b7a <__sfvwrite_r+0x2da>
  405914:	89a3      	ldrh	r3, [r4, #12]
  405916:	6835      	ldr	r5, [r6, #0]
  405918:	f013 0002 	ands.w	r0, r3, #2
  40591c:	d1d2      	bne.n	4058c4 <__sfvwrite_r+0x24>
  40591e:	f013 0901 	ands.w	r9, r3, #1
  405922:	d145      	bne.n	4059b0 <__sfvwrite_r+0x110>
  405924:	464f      	mov	r7, r9
  405926:	9601      	str	r6, [sp, #4]
  405928:	b337      	cbz	r7, 405978 <__sfvwrite_r+0xd8>
  40592a:	059a      	lsls	r2, r3, #22
  40592c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  405930:	f140 8083 	bpl.w	405a3a <__sfvwrite_r+0x19a>
  405934:	4547      	cmp	r7, r8
  405936:	46c3      	mov	fp, r8
  405938:	f0c0 80ab 	bcc.w	405a92 <__sfvwrite_r+0x1f2>
  40593c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  405940:	f040 80ac 	bne.w	405a9c <__sfvwrite_r+0x1fc>
  405944:	6820      	ldr	r0, [r4, #0]
  405946:	46ba      	mov	sl, r7
  405948:	465a      	mov	r2, fp
  40594a:	4649      	mov	r1, r9
  40594c:	f000 fa40 	bl	405dd0 <memmove>
  405950:	68a2      	ldr	r2, [r4, #8]
  405952:	6823      	ldr	r3, [r4, #0]
  405954:	eba2 0208 	sub.w	r2, r2, r8
  405958:	445b      	add	r3, fp
  40595a:	60a2      	str	r2, [r4, #8]
  40595c:	6023      	str	r3, [r4, #0]
  40595e:	9a01      	ldr	r2, [sp, #4]
  405960:	6893      	ldr	r3, [r2, #8]
  405962:	eba3 030a 	sub.w	r3, r3, sl
  405966:	44d1      	add	r9, sl
  405968:	eba7 070a 	sub.w	r7, r7, sl
  40596c:	6093      	str	r3, [r2, #8]
  40596e:	2b00      	cmp	r3, #0
  405970:	d0c5      	beq.n	4058fe <__sfvwrite_r+0x5e>
  405972:	89a3      	ldrh	r3, [r4, #12]
  405974:	2f00      	cmp	r7, #0
  405976:	d1d8      	bne.n	40592a <__sfvwrite_r+0x8a>
  405978:	f8d5 9000 	ldr.w	r9, [r5]
  40597c:	686f      	ldr	r7, [r5, #4]
  40597e:	3508      	adds	r5, #8
  405980:	e7d2      	b.n	405928 <__sfvwrite_r+0x88>
  405982:	f8d5 9000 	ldr.w	r9, [r5]
  405986:	f8d5 8004 	ldr.w	r8, [r5, #4]
  40598a:	3508      	adds	r5, #8
  40598c:	e79f      	b.n	4058ce <__sfvwrite_r+0x2e>
  40598e:	2000      	movs	r0, #0
  405990:	4770      	bx	lr
  405992:	4621      	mov	r1, r4
  405994:	9800      	ldr	r0, [sp, #0]
  405996:	f7ff fd1f 	bl	4053d8 <_fflush_r>
  40599a:	b370      	cbz	r0, 4059fa <__sfvwrite_r+0x15a>
  40599c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4059a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4059a4:	f04f 30ff 	mov.w	r0, #4294967295
  4059a8:	81a3      	strh	r3, [r4, #12]
  4059aa:	b003      	add	sp, #12
  4059ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4059b0:	4681      	mov	r9, r0
  4059b2:	4633      	mov	r3, r6
  4059b4:	464e      	mov	r6, r9
  4059b6:	46a8      	mov	r8, r5
  4059b8:	469a      	mov	sl, r3
  4059ba:	464d      	mov	r5, r9
  4059bc:	b34e      	cbz	r6, 405a12 <__sfvwrite_r+0x172>
  4059be:	b380      	cbz	r0, 405a22 <__sfvwrite_r+0x182>
  4059c0:	6820      	ldr	r0, [r4, #0]
  4059c2:	6923      	ldr	r3, [r4, #16]
  4059c4:	6962      	ldr	r2, [r4, #20]
  4059c6:	45b1      	cmp	r9, r6
  4059c8:	46cb      	mov	fp, r9
  4059ca:	bf28      	it	cs
  4059cc:	46b3      	movcs	fp, r6
  4059ce:	4298      	cmp	r0, r3
  4059d0:	465f      	mov	r7, fp
  4059d2:	d904      	bls.n	4059de <__sfvwrite_r+0x13e>
  4059d4:	68a3      	ldr	r3, [r4, #8]
  4059d6:	4413      	add	r3, r2
  4059d8:	459b      	cmp	fp, r3
  4059da:	f300 80a6 	bgt.w	405b2a <__sfvwrite_r+0x28a>
  4059de:	4593      	cmp	fp, r2
  4059e0:	db4b      	blt.n	405a7a <__sfvwrite_r+0x1da>
  4059e2:	4613      	mov	r3, r2
  4059e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  4059e6:	69e1      	ldr	r1, [r4, #28]
  4059e8:	9800      	ldr	r0, [sp, #0]
  4059ea:	462a      	mov	r2, r5
  4059ec:	47b8      	blx	r7
  4059ee:	1e07      	subs	r7, r0, #0
  4059f0:	ddd4      	ble.n	40599c <__sfvwrite_r+0xfc>
  4059f2:	ebb9 0907 	subs.w	r9, r9, r7
  4059f6:	d0cc      	beq.n	405992 <__sfvwrite_r+0xf2>
  4059f8:	2001      	movs	r0, #1
  4059fa:	f8da 3008 	ldr.w	r3, [sl, #8]
  4059fe:	1bdb      	subs	r3, r3, r7
  405a00:	443d      	add	r5, r7
  405a02:	1bf6      	subs	r6, r6, r7
  405a04:	f8ca 3008 	str.w	r3, [sl, #8]
  405a08:	2b00      	cmp	r3, #0
  405a0a:	f43f af78 	beq.w	4058fe <__sfvwrite_r+0x5e>
  405a0e:	2e00      	cmp	r6, #0
  405a10:	d1d5      	bne.n	4059be <__sfvwrite_r+0x11e>
  405a12:	f108 0308 	add.w	r3, r8, #8
  405a16:	e913 0060 	ldmdb	r3, {r5, r6}
  405a1a:	4698      	mov	r8, r3
  405a1c:	3308      	adds	r3, #8
  405a1e:	2e00      	cmp	r6, #0
  405a20:	d0f9      	beq.n	405a16 <__sfvwrite_r+0x176>
  405a22:	4632      	mov	r2, r6
  405a24:	210a      	movs	r1, #10
  405a26:	4628      	mov	r0, r5
  405a28:	f000 f982 	bl	405d30 <memchr>
  405a2c:	2800      	cmp	r0, #0
  405a2e:	f000 80a1 	beq.w	405b74 <__sfvwrite_r+0x2d4>
  405a32:	3001      	adds	r0, #1
  405a34:	eba0 0905 	sub.w	r9, r0, r5
  405a38:	e7c2      	b.n	4059c0 <__sfvwrite_r+0x120>
  405a3a:	6820      	ldr	r0, [r4, #0]
  405a3c:	6923      	ldr	r3, [r4, #16]
  405a3e:	4298      	cmp	r0, r3
  405a40:	d802      	bhi.n	405a48 <__sfvwrite_r+0x1a8>
  405a42:	6963      	ldr	r3, [r4, #20]
  405a44:	429f      	cmp	r7, r3
  405a46:	d25d      	bcs.n	405b04 <__sfvwrite_r+0x264>
  405a48:	45b8      	cmp	r8, r7
  405a4a:	bf28      	it	cs
  405a4c:	46b8      	movcs	r8, r7
  405a4e:	4642      	mov	r2, r8
  405a50:	4649      	mov	r1, r9
  405a52:	f000 f9bd 	bl	405dd0 <memmove>
  405a56:	68a3      	ldr	r3, [r4, #8]
  405a58:	6822      	ldr	r2, [r4, #0]
  405a5a:	eba3 0308 	sub.w	r3, r3, r8
  405a5e:	4442      	add	r2, r8
  405a60:	60a3      	str	r3, [r4, #8]
  405a62:	6022      	str	r2, [r4, #0]
  405a64:	b10b      	cbz	r3, 405a6a <__sfvwrite_r+0x1ca>
  405a66:	46c2      	mov	sl, r8
  405a68:	e779      	b.n	40595e <__sfvwrite_r+0xbe>
  405a6a:	4621      	mov	r1, r4
  405a6c:	9800      	ldr	r0, [sp, #0]
  405a6e:	f7ff fcb3 	bl	4053d8 <_fflush_r>
  405a72:	2800      	cmp	r0, #0
  405a74:	d192      	bne.n	40599c <__sfvwrite_r+0xfc>
  405a76:	46c2      	mov	sl, r8
  405a78:	e771      	b.n	40595e <__sfvwrite_r+0xbe>
  405a7a:	465a      	mov	r2, fp
  405a7c:	4629      	mov	r1, r5
  405a7e:	f000 f9a7 	bl	405dd0 <memmove>
  405a82:	68a2      	ldr	r2, [r4, #8]
  405a84:	6823      	ldr	r3, [r4, #0]
  405a86:	eba2 020b 	sub.w	r2, r2, fp
  405a8a:	445b      	add	r3, fp
  405a8c:	60a2      	str	r2, [r4, #8]
  405a8e:	6023      	str	r3, [r4, #0]
  405a90:	e7af      	b.n	4059f2 <__sfvwrite_r+0x152>
  405a92:	6820      	ldr	r0, [r4, #0]
  405a94:	46b8      	mov	r8, r7
  405a96:	46ba      	mov	sl, r7
  405a98:	46bb      	mov	fp, r7
  405a9a:	e755      	b.n	405948 <__sfvwrite_r+0xa8>
  405a9c:	6962      	ldr	r2, [r4, #20]
  405a9e:	6820      	ldr	r0, [r4, #0]
  405aa0:	6921      	ldr	r1, [r4, #16]
  405aa2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  405aa6:	eba0 0a01 	sub.w	sl, r0, r1
  405aaa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  405aae:	f10a 0001 	add.w	r0, sl, #1
  405ab2:	ea4f 0868 	mov.w	r8, r8, asr #1
  405ab6:	4438      	add	r0, r7
  405ab8:	4540      	cmp	r0, r8
  405aba:	4642      	mov	r2, r8
  405abc:	bf84      	itt	hi
  405abe:	4680      	movhi	r8, r0
  405ac0:	4642      	movhi	r2, r8
  405ac2:	055b      	lsls	r3, r3, #21
  405ac4:	d544      	bpl.n	405b50 <__sfvwrite_r+0x2b0>
  405ac6:	4611      	mov	r1, r2
  405ac8:	9800      	ldr	r0, [sp, #0]
  405aca:	f7fd ffab 	bl	403a24 <_malloc_r>
  405ace:	4683      	mov	fp, r0
  405ad0:	2800      	cmp	r0, #0
  405ad2:	d055      	beq.n	405b80 <__sfvwrite_r+0x2e0>
  405ad4:	4652      	mov	r2, sl
  405ad6:	6921      	ldr	r1, [r4, #16]
  405ad8:	f7fe fa54 	bl	403f84 <memcpy>
  405adc:	89a3      	ldrh	r3, [r4, #12]
  405ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  405ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405ae6:	81a3      	strh	r3, [r4, #12]
  405ae8:	eb0b 000a 	add.w	r0, fp, sl
  405aec:	eba8 030a 	sub.w	r3, r8, sl
  405af0:	f8c4 b010 	str.w	fp, [r4, #16]
  405af4:	f8c4 8014 	str.w	r8, [r4, #20]
  405af8:	6020      	str	r0, [r4, #0]
  405afa:	60a3      	str	r3, [r4, #8]
  405afc:	46b8      	mov	r8, r7
  405afe:	46ba      	mov	sl, r7
  405b00:	46bb      	mov	fp, r7
  405b02:	e721      	b.n	405948 <__sfvwrite_r+0xa8>
  405b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  405b08:	42b9      	cmp	r1, r7
  405b0a:	bf28      	it	cs
  405b0c:	4639      	movcs	r1, r7
  405b0e:	464a      	mov	r2, r9
  405b10:	fb91 f1f3 	sdiv	r1, r1, r3
  405b14:	9800      	ldr	r0, [sp, #0]
  405b16:	6a66      	ldr	r6, [r4, #36]	; 0x24
  405b18:	fb03 f301 	mul.w	r3, r3, r1
  405b1c:	69e1      	ldr	r1, [r4, #28]
  405b1e:	47b0      	blx	r6
  405b20:	f1b0 0a00 	subs.w	sl, r0, #0
  405b24:	f73f af1b 	bgt.w	40595e <__sfvwrite_r+0xbe>
  405b28:	e738      	b.n	40599c <__sfvwrite_r+0xfc>
  405b2a:	461a      	mov	r2, r3
  405b2c:	4629      	mov	r1, r5
  405b2e:	9301      	str	r3, [sp, #4]
  405b30:	f000 f94e 	bl	405dd0 <memmove>
  405b34:	6822      	ldr	r2, [r4, #0]
  405b36:	9b01      	ldr	r3, [sp, #4]
  405b38:	9800      	ldr	r0, [sp, #0]
  405b3a:	441a      	add	r2, r3
  405b3c:	6022      	str	r2, [r4, #0]
  405b3e:	4621      	mov	r1, r4
  405b40:	f7ff fc4a 	bl	4053d8 <_fflush_r>
  405b44:	9b01      	ldr	r3, [sp, #4]
  405b46:	2800      	cmp	r0, #0
  405b48:	f47f af28 	bne.w	40599c <__sfvwrite_r+0xfc>
  405b4c:	461f      	mov	r7, r3
  405b4e:	e750      	b.n	4059f2 <__sfvwrite_r+0x152>
  405b50:	9800      	ldr	r0, [sp, #0]
  405b52:	f000 f9a1 	bl	405e98 <_realloc_r>
  405b56:	4683      	mov	fp, r0
  405b58:	2800      	cmp	r0, #0
  405b5a:	d1c5      	bne.n	405ae8 <__sfvwrite_r+0x248>
  405b5c:	9d00      	ldr	r5, [sp, #0]
  405b5e:	6921      	ldr	r1, [r4, #16]
  405b60:	4628      	mov	r0, r5
  405b62:	f7ff fdb7 	bl	4056d4 <_free_r>
  405b66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b6a:	220c      	movs	r2, #12
  405b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  405b70:	602a      	str	r2, [r5, #0]
  405b72:	e715      	b.n	4059a0 <__sfvwrite_r+0x100>
  405b74:	f106 0901 	add.w	r9, r6, #1
  405b78:	e722      	b.n	4059c0 <__sfvwrite_r+0x120>
  405b7a:	f04f 30ff 	mov.w	r0, #4294967295
  405b7e:	e6bf      	b.n	405900 <__sfvwrite_r+0x60>
  405b80:	9a00      	ldr	r2, [sp, #0]
  405b82:	230c      	movs	r3, #12
  405b84:	6013      	str	r3, [r2, #0]
  405b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405b8a:	e709      	b.n	4059a0 <__sfvwrite_r+0x100>
  405b8c:	7ffffc00 	.word	0x7ffffc00

00405b90 <_fwalk_reent>:
  405b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  405b94:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  405b98:	d01f      	beq.n	405bda <_fwalk_reent+0x4a>
  405b9a:	4688      	mov	r8, r1
  405b9c:	4606      	mov	r6, r0
  405b9e:	f04f 0900 	mov.w	r9, #0
  405ba2:	687d      	ldr	r5, [r7, #4]
  405ba4:	68bc      	ldr	r4, [r7, #8]
  405ba6:	3d01      	subs	r5, #1
  405ba8:	d411      	bmi.n	405bce <_fwalk_reent+0x3e>
  405baa:	89a3      	ldrh	r3, [r4, #12]
  405bac:	2b01      	cmp	r3, #1
  405bae:	f105 35ff 	add.w	r5, r5, #4294967295
  405bb2:	d908      	bls.n	405bc6 <_fwalk_reent+0x36>
  405bb4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  405bb8:	3301      	adds	r3, #1
  405bba:	4621      	mov	r1, r4
  405bbc:	4630      	mov	r0, r6
  405bbe:	d002      	beq.n	405bc6 <_fwalk_reent+0x36>
  405bc0:	47c0      	blx	r8
  405bc2:	ea49 0900 	orr.w	r9, r9, r0
  405bc6:	1c6b      	adds	r3, r5, #1
  405bc8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  405bcc:	d1ed      	bne.n	405baa <_fwalk_reent+0x1a>
  405bce:	683f      	ldr	r7, [r7, #0]
  405bd0:	2f00      	cmp	r7, #0
  405bd2:	d1e6      	bne.n	405ba2 <_fwalk_reent+0x12>
  405bd4:	4648      	mov	r0, r9
  405bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405bda:	46b9      	mov	r9, r7
  405bdc:	4648      	mov	r0, r9
  405bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  405be2:	bf00      	nop

00405be4 <__locale_mb_cur_max>:
  405be4:	4b04      	ldr	r3, [pc, #16]	; (405bf8 <__locale_mb_cur_max+0x14>)
  405be6:	4a05      	ldr	r2, [pc, #20]	; (405bfc <__locale_mb_cur_max+0x18>)
  405be8:	681b      	ldr	r3, [r3, #0]
  405bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  405bec:	2b00      	cmp	r3, #0
  405bee:	bf08      	it	eq
  405bf0:	4613      	moveq	r3, r2
  405bf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  405bf6:	4770      	bx	lr
  405bf8:	2040000c 	.word	0x2040000c
  405bfc:	2040084c 	.word	0x2040084c

00405c00 <__retarget_lock_init_recursive>:
  405c00:	4770      	bx	lr
  405c02:	bf00      	nop

00405c04 <__retarget_lock_close_recursive>:
  405c04:	4770      	bx	lr
  405c06:	bf00      	nop

00405c08 <__retarget_lock_acquire_recursive>:
  405c08:	4770      	bx	lr
  405c0a:	bf00      	nop

00405c0c <__retarget_lock_release_recursive>:
  405c0c:	4770      	bx	lr
  405c0e:	bf00      	nop

00405c10 <__swhatbuf_r>:
  405c10:	b570      	push	{r4, r5, r6, lr}
  405c12:	460c      	mov	r4, r1
  405c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  405c18:	2900      	cmp	r1, #0
  405c1a:	b090      	sub	sp, #64	; 0x40
  405c1c:	4615      	mov	r5, r2
  405c1e:	461e      	mov	r6, r3
  405c20:	db14      	blt.n	405c4c <__swhatbuf_r+0x3c>
  405c22:	aa01      	add	r2, sp, #4
  405c24:	f000 fc9e 	bl	406564 <_fstat_r>
  405c28:	2800      	cmp	r0, #0
  405c2a:	db0f      	blt.n	405c4c <__swhatbuf_r+0x3c>
  405c2c:	9a02      	ldr	r2, [sp, #8]
  405c2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  405c32:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  405c36:	fab2 f282 	clz	r2, r2
  405c3a:	0952      	lsrs	r2, r2, #5
  405c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c40:	f44f 6000 	mov.w	r0, #2048	; 0x800
  405c44:	6032      	str	r2, [r6, #0]
  405c46:	602b      	str	r3, [r5, #0]
  405c48:	b010      	add	sp, #64	; 0x40
  405c4a:	bd70      	pop	{r4, r5, r6, pc}
  405c4c:	89a2      	ldrh	r2, [r4, #12]
  405c4e:	2300      	movs	r3, #0
  405c50:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  405c54:	6033      	str	r3, [r6, #0]
  405c56:	d004      	beq.n	405c62 <__swhatbuf_r+0x52>
  405c58:	2240      	movs	r2, #64	; 0x40
  405c5a:	4618      	mov	r0, r3
  405c5c:	602a      	str	r2, [r5, #0]
  405c5e:	b010      	add	sp, #64	; 0x40
  405c60:	bd70      	pop	{r4, r5, r6, pc}
  405c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  405c66:	602b      	str	r3, [r5, #0]
  405c68:	b010      	add	sp, #64	; 0x40
  405c6a:	bd70      	pop	{r4, r5, r6, pc}

00405c6c <__smakebuf_r>:
  405c6c:	898a      	ldrh	r2, [r1, #12]
  405c6e:	0792      	lsls	r2, r2, #30
  405c70:	460b      	mov	r3, r1
  405c72:	d506      	bpl.n	405c82 <__smakebuf_r+0x16>
  405c74:	f101 0243 	add.w	r2, r1, #67	; 0x43
  405c78:	2101      	movs	r1, #1
  405c7a:	601a      	str	r2, [r3, #0]
  405c7c:	611a      	str	r2, [r3, #16]
  405c7e:	6159      	str	r1, [r3, #20]
  405c80:	4770      	bx	lr
  405c82:	b5f0      	push	{r4, r5, r6, r7, lr}
  405c84:	b083      	sub	sp, #12
  405c86:	ab01      	add	r3, sp, #4
  405c88:	466a      	mov	r2, sp
  405c8a:	460c      	mov	r4, r1
  405c8c:	4606      	mov	r6, r0
  405c8e:	f7ff ffbf 	bl	405c10 <__swhatbuf_r>
  405c92:	9900      	ldr	r1, [sp, #0]
  405c94:	4605      	mov	r5, r0
  405c96:	4630      	mov	r0, r6
  405c98:	f7fd fec4 	bl	403a24 <_malloc_r>
  405c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405ca0:	b1d8      	cbz	r0, 405cda <__smakebuf_r+0x6e>
  405ca2:	9a01      	ldr	r2, [sp, #4]
  405ca4:	4f15      	ldr	r7, [pc, #84]	; (405cfc <__smakebuf_r+0x90>)
  405ca6:	9900      	ldr	r1, [sp, #0]
  405ca8:	63f7      	str	r7, [r6, #60]	; 0x3c
  405caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405cae:	81a3      	strh	r3, [r4, #12]
  405cb0:	6020      	str	r0, [r4, #0]
  405cb2:	6120      	str	r0, [r4, #16]
  405cb4:	6161      	str	r1, [r4, #20]
  405cb6:	b91a      	cbnz	r2, 405cc0 <__smakebuf_r+0x54>
  405cb8:	432b      	orrs	r3, r5
  405cba:	81a3      	strh	r3, [r4, #12]
  405cbc:	b003      	add	sp, #12
  405cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405cc0:	4630      	mov	r0, r6
  405cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  405cc6:	f000 fc61 	bl	40658c <_isatty_r>
  405cca:	b1a0      	cbz	r0, 405cf6 <__smakebuf_r+0x8a>
  405ccc:	89a3      	ldrh	r3, [r4, #12]
  405cce:	f023 0303 	bic.w	r3, r3, #3
  405cd2:	f043 0301 	orr.w	r3, r3, #1
  405cd6:	b21b      	sxth	r3, r3
  405cd8:	e7ee      	b.n	405cb8 <__smakebuf_r+0x4c>
  405cda:	059a      	lsls	r2, r3, #22
  405cdc:	d4ee      	bmi.n	405cbc <__smakebuf_r+0x50>
  405cde:	f023 0303 	bic.w	r3, r3, #3
  405ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  405ce6:	f043 0302 	orr.w	r3, r3, #2
  405cea:	2101      	movs	r1, #1
  405cec:	81a3      	strh	r3, [r4, #12]
  405cee:	6022      	str	r2, [r4, #0]
  405cf0:	6122      	str	r2, [r4, #16]
  405cf2:	6161      	str	r1, [r4, #20]
  405cf4:	e7e2      	b.n	405cbc <__smakebuf_r+0x50>
  405cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405cfa:	e7dd      	b.n	405cb8 <__smakebuf_r+0x4c>
  405cfc:	0040542d 	.word	0x0040542d

00405d00 <__ascii_mbtowc>:
  405d00:	b082      	sub	sp, #8
  405d02:	b149      	cbz	r1, 405d18 <__ascii_mbtowc+0x18>
  405d04:	b15a      	cbz	r2, 405d1e <__ascii_mbtowc+0x1e>
  405d06:	b16b      	cbz	r3, 405d24 <__ascii_mbtowc+0x24>
  405d08:	7813      	ldrb	r3, [r2, #0]
  405d0a:	600b      	str	r3, [r1, #0]
  405d0c:	7812      	ldrb	r2, [r2, #0]
  405d0e:	1c10      	adds	r0, r2, #0
  405d10:	bf18      	it	ne
  405d12:	2001      	movne	r0, #1
  405d14:	b002      	add	sp, #8
  405d16:	4770      	bx	lr
  405d18:	a901      	add	r1, sp, #4
  405d1a:	2a00      	cmp	r2, #0
  405d1c:	d1f3      	bne.n	405d06 <__ascii_mbtowc+0x6>
  405d1e:	4610      	mov	r0, r2
  405d20:	b002      	add	sp, #8
  405d22:	4770      	bx	lr
  405d24:	f06f 0001 	mvn.w	r0, #1
  405d28:	e7f4      	b.n	405d14 <__ascii_mbtowc+0x14>
  405d2a:	bf00      	nop
  405d2c:	0000      	movs	r0, r0
	...

00405d30 <memchr>:
  405d30:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405d34:	2a10      	cmp	r2, #16
  405d36:	db2b      	blt.n	405d90 <memchr+0x60>
  405d38:	f010 0f07 	tst.w	r0, #7
  405d3c:	d008      	beq.n	405d50 <memchr+0x20>
  405d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
  405d42:	3a01      	subs	r2, #1
  405d44:	428b      	cmp	r3, r1
  405d46:	d02d      	beq.n	405da4 <memchr+0x74>
  405d48:	f010 0f07 	tst.w	r0, #7
  405d4c:	b342      	cbz	r2, 405da0 <memchr+0x70>
  405d4e:	d1f6      	bne.n	405d3e <memchr+0xe>
  405d50:	b4f0      	push	{r4, r5, r6, r7}
  405d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  405d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  405d5a:	f022 0407 	bic.w	r4, r2, #7
  405d5e:	f07f 0700 	mvns.w	r7, #0
  405d62:	2300      	movs	r3, #0
  405d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  405d68:	3c08      	subs	r4, #8
  405d6a:	ea85 0501 	eor.w	r5, r5, r1
  405d6e:	ea86 0601 	eor.w	r6, r6, r1
  405d72:	fa85 f547 	uadd8	r5, r5, r7
  405d76:	faa3 f587 	sel	r5, r3, r7
  405d7a:	fa86 f647 	uadd8	r6, r6, r7
  405d7e:	faa5 f687 	sel	r6, r5, r7
  405d82:	b98e      	cbnz	r6, 405da8 <memchr+0x78>
  405d84:	d1ee      	bne.n	405d64 <memchr+0x34>
  405d86:	bcf0      	pop	{r4, r5, r6, r7}
  405d88:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  405d8c:	f002 0207 	and.w	r2, r2, #7
  405d90:	b132      	cbz	r2, 405da0 <memchr+0x70>
  405d92:	f810 3b01 	ldrb.w	r3, [r0], #1
  405d96:	3a01      	subs	r2, #1
  405d98:	ea83 0301 	eor.w	r3, r3, r1
  405d9c:	b113      	cbz	r3, 405da4 <memchr+0x74>
  405d9e:	d1f8      	bne.n	405d92 <memchr+0x62>
  405da0:	2000      	movs	r0, #0
  405da2:	4770      	bx	lr
  405da4:	3801      	subs	r0, #1
  405da6:	4770      	bx	lr
  405da8:	2d00      	cmp	r5, #0
  405daa:	bf06      	itte	eq
  405dac:	4635      	moveq	r5, r6
  405dae:	3803      	subeq	r0, #3
  405db0:	3807      	subne	r0, #7
  405db2:	f015 0f01 	tst.w	r5, #1
  405db6:	d107      	bne.n	405dc8 <memchr+0x98>
  405db8:	3001      	adds	r0, #1
  405dba:	f415 7f80 	tst.w	r5, #256	; 0x100
  405dbe:	bf02      	ittt	eq
  405dc0:	3001      	addeq	r0, #1
  405dc2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  405dc6:	3001      	addeq	r0, #1
  405dc8:	bcf0      	pop	{r4, r5, r6, r7}
  405dca:	3801      	subs	r0, #1
  405dcc:	4770      	bx	lr
  405dce:	bf00      	nop

00405dd0 <memmove>:
  405dd0:	4288      	cmp	r0, r1
  405dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
  405dd4:	d90d      	bls.n	405df2 <memmove+0x22>
  405dd6:	188b      	adds	r3, r1, r2
  405dd8:	4298      	cmp	r0, r3
  405dda:	d20a      	bcs.n	405df2 <memmove+0x22>
  405ddc:	1884      	adds	r4, r0, r2
  405dde:	2a00      	cmp	r2, #0
  405de0:	d051      	beq.n	405e86 <memmove+0xb6>
  405de2:	4622      	mov	r2, r4
  405de4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  405de8:	f802 4d01 	strb.w	r4, [r2, #-1]!
  405dec:	4299      	cmp	r1, r3
  405dee:	d1f9      	bne.n	405de4 <memmove+0x14>
  405df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405df2:	2a0f      	cmp	r2, #15
  405df4:	d948      	bls.n	405e88 <memmove+0xb8>
  405df6:	ea41 0300 	orr.w	r3, r1, r0
  405dfa:	079b      	lsls	r3, r3, #30
  405dfc:	d146      	bne.n	405e8c <memmove+0xbc>
  405dfe:	f100 0410 	add.w	r4, r0, #16
  405e02:	f101 0310 	add.w	r3, r1, #16
  405e06:	4615      	mov	r5, r2
  405e08:	f853 6c10 	ldr.w	r6, [r3, #-16]
  405e0c:	f844 6c10 	str.w	r6, [r4, #-16]
  405e10:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  405e14:	f844 6c0c 	str.w	r6, [r4, #-12]
  405e18:	f853 6c08 	ldr.w	r6, [r3, #-8]
  405e1c:	f844 6c08 	str.w	r6, [r4, #-8]
  405e20:	3d10      	subs	r5, #16
  405e22:	f853 6c04 	ldr.w	r6, [r3, #-4]
  405e26:	f844 6c04 	str.w	r6, [r4, #-4]
  405e2a:	2d0f      	cmp	r5, #15
  405e2c:	f103 0310 	add.w	r3, r3, #16
  405e30:	f104 0410 	add.w	r4, r4, #16
  405e34:	d8e8      	bhi.n	405e08 <memmove+0x38>
  405e36:	f1a2 0310 	sub.w	r3, r2, #16
  405e3a:	f023 030f 	bic.w	r3, r3, #15
  405e3e:	f002 0e0f 	and.w	lr, r2, #15
  405e42:	3310      	adds	r3, #16
  405e44:	f1be 0f03 	cmp.w	lr, #3
  405e48:	4419      	add	r1, r3
  405e4a:	4403      	add	r3, r0
  405e4c:	d921      	bls.n	405e92 <memmove+0xc2>
  405e4e:	1f1e      	subs	r6, r3, #4
  405e50:	460d      	mov	r5, r1
  405e52:	4674      	mov	r4, lr
  405e54:	3c04      	subs	r4, #4
  405e56:	f855 7b04 	ldr.w	r7, [r5], #4
  405e5a:	f846 7f04 	str.w	r7, [r6, #4]!
  405e5e:	2c03      	cmp	r4, #3
  405e60:	d8f8      	bhi.n	405e54 <memmove+0x84>
  405e62:	f1ae 0404 	sub.w	r4, lr, #4
  405e66:	f024 0403 	bic.w	r4, r4, #3
  405e6a:	3404      	adds	r4, #4
  405e6c:	4421      	add	r1, r4
  405e6e:	4423      	add	r3, r4
  405e70:	f002 0203 	and.w	r2, r2, #3
  405e74:	b162      	cbz	r2, 405e90 <memmove+0xc0>
  405e76:	3b01      	subs	r3, #1
  405e78:	440a      	add	r2, r1
  405e7a:	f811 4b01 	ldrb.w	r4, [r1], #1
  405e7e:	f803 4f01 	strb.w	r4, [r3, #1]!
  405e82:	428a      	cmp	r2, r1
  405e84:	d1f9      	bne.n	405e7a <memmove+0xaa>
  405e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e88:	4603      	mov	r3, r0
  405e8a:	e7f3      	b.n	405e74 <memmove+0xa4>
  405e8c:	4603      	mov	r3, r0
  405e8e:	e7f2      	b.n	405e76 <memmove+0xa6>
  405e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
  405e92:	4672      	mov	r2, lr
  405e94:	e7ee      	b.n	405e74 <memmove+0xa4>
  405e96:	bf00      	nop

00405e98 <_realloc_r>:
  405e98:	2900      	cmp	r1, #0
  405e9a:	f000 8095 	beq.w	405fc8 <_realloc_r+0x130>
  405e9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405ea2:	460d      	mov	r5, r1
  405ea4:	4616      	mov	r6, r2
  405ea6:	b083      	sub	sp, #12
  405ea8:	4680      	mov	r8, r0
  405eaa:	f106 070b 	add.w	r7, r6, #11
  405eae:	f7fe f951 	bl	404154 <__malloc_lock>
  405eb2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  405eb6:	2f16      	cmp	r7, #22
  405eb8:	f02e 0403 	bic.w	r4, lr, #3
  405ebc:	f1a5 0908 	sub.w	r9, r5, #8
  405ec0:	d83c      	bhi.n	405f3c <_realloc_r+0xa4>
  405ec2:	2210      	movs	r2, #16
  405ec4:	4617      	mov	r7, r2
  405ec6:	42be      	cmp	r6, r7
  405ec8:	d83d      	bhi.n	405f46 <_realloc_r+0xae>
  405eca:	4294      	cmp	r4, r2
  405ecc:	da43      	bge.n	405f56 <_realloc_r+0xbe>
  405ece:	4bc4      	ldr	r3, [pc, #784]	; (4061e0 <_realloc_r+0x348>)
  405ed0:	6899      	ldr	r1, [r3, #8]
  405ed2:	eb09 0004 	add.w	r0, r9, r4
  405ed6:	4288      	cmp	r0, r1
  405ed8:	f000 80b4 	beq.w	406044 <_realloc_r+0x1ac>
  405edc:	6843      	ldr	r3, [r0, #4]
  405ede:	f023 0101 	bic.w	r1, r3, #1
  405ee2:	4401      	add	r1, r0
  405ee4:	6849      	ldr	r1, [r1, #4]
  405ee6:	07c9      	lsls	r1, r1, #31
  405ee8:	d54c      	bpl.n	405f84 <_realloc_r+0xec>
  405eea:	f01e 0f01 	tst.w	lr, #1
  405eee:	f000 809b 	beq.w	406028 <_realloc_r+0x190>
  405ef2:	4631      	mov	r1, r6
  405ef4:	4640      	mov	r0, r8
  405ef6:	f7fd fd95 	bl	403a24 <_malloc_r>
  405efa:	4606      	mov	r6, r0
  405efc:	2800      	cmp	r0, #0
  405efe:	d03a      	beq.n	405f76 <_realloc_r+0xde>
  405f00:	f855 3c04 	ldr.w	r3, [r5, #-4]
  405f04:	f023 0301 	bic.w	r3, r3, #1
  405f08:	444b      	add	r3, r9
  405f0a:	f1a0 0208 	sub.w	r2, r0, #8
  405f0e:	429a      	cmp	r2, r3
  405f10:	f000 8121 	beq.w	406156 <_realloc_r+0x2be>
  405f14:	1f22      	subs	r2, r4, #4
  405f16:	2a24      	cmp	r2, #36	; 0x24
  405f18:	f200 8107 	bhi.w	40612a <_realloc_r+0x292>
  405f1c:	2a13      	cmp	r2, #19
  405f1e:	f200 80db 	bhi.w	4060d8 <_realloc_r+0x240>
  405f22:	4603      	mov	r3, r0
  405f24:	462a      	mov	r2, r5
  405f26:	6811      	ldr	r1, [r2, #0]
  405f28:	6019      	str	r1, [r3, #0]
  405f2a:	6851      	ldr	r1, [r2, #4]
  405f2c:	6059      	str	r1, [r3, #4]
  405f2e:	6892      	ldr	r2, [r2, #8]
  405f30:	609a      	str	r2, [r3, #8]
  405f32:	4629      	mov	r1, r5
  405f34:	4640      	mov	r0, r8
  405f36:	f7ff fbcd 	bl	4056d4 <_free_r>
  405f3a:	e01c      	b.n	405f76 <_realloc_r+0xde>
  405f3c:	f027 0707 	bic.w	r7, r7, #7
  405f40:	2f00      	cmp	r7, #0
  405f42:	463a      	mov	r2, r7
  405f44:	dabf      	bge.n	405ec6 <_realloc_r+0x2e>
  405f46:	2600      	movs	r6, #0
  405f48:	230c      	movs	r3, #12
  405f4a:	4630      	mov	r0, r6
  405f4c:	f8c8 3000 	str.w	r3, [r8]
  405f50:	b003      	add	sp, #12
  405f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f56:	462e      	mov	r6, r5
  405f58:	1be3      	subs	r3, r4, r7
  405f5a:	2b0f      	cmp	r3, #15
  405f5c:	d81e      	bhi.n	405f9c <_realloc_r+0x104>
  405f5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  405f62:	f003 0301 	and.w	r3, r3, #1
  405f66:	4323      	orrs	r3, r4
  405f68:	444c      	add	r4, r9
  405f6a:	f8c9 3004 	str.w	r3, [r9, #4]
  405f6e:	6863      	ldr	r3, [r4, #4]
  405f70:	f043 0301 	orr.w	r3, r3, #1
  405f74:	6063      	str	r3, [r4, #4]
  405f76:	4640      	mov	r0, r8
  405f78:	f7fe f8f2 	bl	404160 <__malloc_unlock>
  405f7c:	4630      	mov	r0, r6
  405f7e:	b003      	add	sp, #12
  405f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405f84:	f023 0303 	bic.w	r3, r3, #3
  405f88:	18e1      	adds	r1, r4, r3
  405f8a:	4291      	cmp	r1, r2
  405f8c:	db1f      	blt.n	405fce <_realloc_r+0x136>
  405f8e:	68c3      	ldr	r3, [r0, #12]
  405f90:	6882      	ldr	r2, [r0, #8]
  405f92:	462e      	mov	r6, r5
  405f94:	60d3      	str	r3, [r2, #12]
  405f96:	460c      	mov	r4, r1
  405f98:	609a      	str	r2, [r3, #8]
  405f9a:	e7dd      	b.n	405f58 <_realloc_r+0xc0>
  405f9c:	f8d9 2004 	ldr.w	r2, [r9, #4]
  405fa0:	eb09 0107 	add.w	r1, r9, r7
  405fa4:	f002 0201 	and.w	r2, r2, #1
  405fa8:	444c      	add	r4, r9
  405faa:	f043 0301 	orr.w	r3, r3, #1
  405fae:	4317      	orrs	r7, r2
  405fb0:	f8c9 7004 	str.w	r7, [r9, #4]
  405fb4:	604b      	str	r3, [r1, #4]
  405fb6:	6863      	ldr	r3, [r4, #4]
  405fb8:	f043 0301 	orr.w	r3, r3, #1
  405fbc:	3108      	adds	r1, #8
  405fbe:	6063      	str	r3, [r4, #4]
  405fc0:	4640      	mov	r0, r8
  405fc2:	f7ff fb87 	bl	4056d4 <_free_r>
  405fc6:	e7d6      	b.n	405f76 <_realloc_r+0xde>
  405fc8:	4611      	mov	r1, r2
  405fca:	f7fd bd2b 	b.w	403a24 <_malloc_r>
  405fce:	f01e 0f01 	tst.w	lr, #1
  405fd2:	d18e      	bne.n	405ef2 <_realloc_r+0x5a>
  405fd4:	f855 1c08 	ldr.w	r1, [r5, #-8]
  405fd8:	eba9 0a01 	sub.w	sl, r9, r1
  405fdc:	f8da 1004 	ldr.w	r1, [sl, #4]
  405fe0:	f021 0103 	bic.w	r1, r1, #3
  405fe4:	440b      	add	r3, r1
  405fe6:	4423      	add	r3, r4
  405fe8:	4293      	cmp	r3, r2
  405fea:	db25      	blt.n	406038 <_realloc_r+0x1a0>
  405fec:	68c2      	ldr	r2, [r0, #12]
  405fee:	6881      	ldr	r1, [r0, #8]
  405ff0:	4656      	mov	r6, sl
  405ff2:	60ca      	str	r2, [r1, #12]
  405ff4:	6091      	str	r1, [r2, #8]
  405ff6:	f8da 100c 	ldr.w	r1, [sl, #12]
  405ffa:	f856 0f08 	ldr.w	r0, [r6, #8]!
  405ffe:	1f22      	subs	r2, r4, #4
  406000:	2a24      	cmp	r2, #36	; 0x24
  406002:	60c1      	str	r1, [r0, #12]
  406004:	6088      	str	r0, [r1, #8]
  406006:	f200 8094 	bhi.w	406132 <_realloc_r+0x29a>
  40600a:	2a13      	cmp	r2, #19
  40600c:	d96f      	bls.n	4060ee <_realloc_r+0x256>
  40600e:	6829      	ldr	r1, [r5, #0]
  406010:	f8ca 1008 	str.w	r1, [sl, #8]
  406014:	6869      	ldr	r1, [r5, #4]
  406016:	f8ca 100c 	str.w	r1, [sl, #12]
  40601a:	2a1b      	cmp	r2, #27
  40601c:	f200 80a2 	bhi.w	406164 <_realloc_r+0x2cc>
  406020:	3508      	adds	r5, #8
  406022:	f10a 0210 	add.w	r2, sl, #16
  406026:	e063      	b.n	4060f0 <_realloc_r+0x258>
  406028:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40602c:	eba9 0a03 	sub.w	sl, r9, r3
  406030:	f8da 1004 	ldr.w	r1, [sl, #4]
  406034:	f021 0103 	bic.w	r1, r1, #3
  406038:	1863      	adds	r3, r4, r1
  40603a:	4293      	cmp	r3, r2
  40603c:	f6ff af59 	blt.w	405ef2 <_realloc_r+0x5a>
  406040:	4656      	mov	r6, sl
  406042:	e7d8      	b.n	405ff6 <_realloc_r+0x15e>
  406044:	6841      	ldr	r1, [r0, #4]
  406046:	f021 0b03 	bic.w	fp, r1, #3
  40604a:	44a3      	add	fp, r4
  40604c:	f107 0010 	add.w	r0, r7, #16
  406050:	4583      	cmp	fp, r0
  406052:	da56      	bge.n	406102 <_realloc_r+0x26a>
  406054:	f01e 0f01 	tst.w	lr, #1
  406058:	f47f af4b 	bne.w	405ef2 <_realloc_r+0x5a>
  40605c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406060:	eba9 0a01 	sub.w	sl, r9, r1
  406064:	f8da 1004 	ldr.w	r1, [sl, #4]
  406068:	f021 0103 	bic.w	r1, r1, #3
  40606c:	448b      	add	fp, r1
  40606e:	4558      	cmp	r0, fp
  406070:	dce2      	bgt.n	406038 <_realloc_r+0x1a0>
  406072:	4656      	mov	r6, sl
  406074:	f8da 100c 	ldr.w	r1, [sl, #12]
  406078:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40607c:	1f22      	subs	r2, r4, #4
  40607e:	2a24      	cmp	r2, #36	; 0x24
  406080:	60c1      	str	r1, [r0, #12]
  406082:	6088      	str	r0, [r1, #8]
  406084:	f200 808f 	bhi.w	4061a6 <_realloc_r+0x30e>
  406088:	2a13      	cmp	r2, #19
  40608a:	f240 808a 	bls.w	4061a2 <_realloc_r+0x30a>
  40608e:	6829      	ldr	r1, [r5, #0]
  406090:	f8ca 1008 	str.w	r1, [sl, #8]
  406094:	6869      	ldr	r1, [r5, #4]
  406096:	f8ca 100c 	str.w	r1, [sl, #12]
  40609a:	2a1b      	cmp	r2, #27
  40609c:	f200 808a 	bhi.w	4061b4 <_realloc_r+0x31c>
  4060a0:	3508      	adds	r5, #8
  4060a2:	f10a 0210 	add.w	r2, sl, #16
  4060a6:	6829      	ldr	r1, [r5, #0]
  4060a8:	6011      	str	r1, [r2, #0]
  4060aa:	6869      	ldr	r1, [r5, #4]
  4060ac:	6051      	str	r1, [r2, #4]
  4060ae:	68a9      	ldr	r1, [r5, #8]
  4060b0:	6091      	str	r1, [r2, #8]
  4060b2:	eb0a 0107 	add.w	r1, sl, r7
  4060b6:	ebab 0207 	sub.w	r2, fp, r7
  4060ba:	f042 0201 	orr.w	r2, r2, #1
  4060be:	6099      	str	r1, [r3, #8]
  4060c0:	604a      	str	r2, [r1, #4]
  4060c2:	f8da 3004 	ldr.w	r3, [sl, #4]
  4060c6:	f003 0301 	and.w	r3, r3, #1
  4060ca:	431f      	orrs	r7, r3
  4060cc:	4640      	mov	r0, r8
  4060ce:	f8ca 7004 	str.w	r7, [sl, #4]
  4060d2:	f7fe f845 	bl	404160 <__malloc_unlock>
  4060d6:	e751      	b.n	405f7c <_realloc_r+0xe4>
  4060d8:	682b      	ldr	r3, [r5, #0]
  4060da:	6003      	str	r3, [r0, #0]
  4060dc:	686b      	ldr	r3, [r5, #4]
  4060de:	6043      	str	r3, [r0, #4]
  4060e0:	2a1b      	cmp	r2, #27
  4060e2:	d82d      	bhi.n	406140 <_realloc_r+0x2a8>
  4060e4:	f100 0308 	add.w	r3, r0, #8
  4060e8:	f105 0208 	add.w	r2, r5, #8
  4060ec:	e71b      	b.n	405f26 <_realloc_r+0x8e>
  4060ee:	4632      	mov	r2, r6
  4060f0:	6829      	ldr	r1, [r5, #0]
  4060f2:	6011      	str	r1, [r2, #0]
  4060f4:	6869      	ldr	r1, [r5, #4]
  4060f6:	6051      	str	r1, [r2, #4]
  4060f8:	68a9      	ldr	r1, [r5, #8]
  4060fa:	6091      	str	r1, [r2, #8]
  4060fc:	461c      	mov	r4, r3
  4060fe:	46d1      	mov	r9, sl
  406100:	e72a      	b.n	405f58 <_realloc_r+0xc0>
  406102:	eb09 0107 	add.w	r1, r9, r7
  406106:	ebab 0b07 	sub.w	fp, fp, r7
  40610a:	f04b 0201 	orr.w	r2, fp, #1
  40610e:	6099      	str	r1, [r3, #8]
  406110:	604a      	str	r2, [r1, #4]
  406112:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406116:	f003 0301 	and.w	r3, r3, #1
  40611a:	431f      	orrs	r7, r3
  40611c:	4640      	mov	r0, r8
  40611e:	f845 7c04 	str.w	r7, [r5, #-4]
  406122:	f7fe f81d 	bl	404160 <__malloc_unlock>
  406126:	462e      	mov	r6, r5
  406128:	e728      	b.n	405f7c <_realloc_r+0xe4>
  40612a:	4629      	mov	r1, r5
  40612c:	f7ff fe50 	bl	405dd0 <memmove>
  406130:	e6ff      	b.n	405f32 <_realloc_r+0x9a>
  406132:	4629      	mov	r1, r5
  406134:	4630      	mov	r0, r6
  406136:	461c      	mov	r4, r3
  406138:	46d1      	mov	r9, sl
  40613a:	f7ff fe49 	bl	405dd0 <memmove>
  40613e:	e70b      	b.n	405f58 <_realloc_r+0xc0>
  406140:	68ab      	ldr	r3, [r5, #8]
  406142:	6083      	str	r3, [r0, #8]
  406144:	68eb      	ldr	r3, [r5, #12]
  406146:	60c3      	str	r3, [r0, #12]
  406148:	2a24      	cmp	r2, #36	; 0x24
  40614a:	d017      	beq.n	40617c <_realloc_r+0x2e4>
  40614c:	f100 0310 	add.w	r3, r0, #16
  406150:	f105 0210 	add.w	r2, r5, #16
  406154:	e6e7      	b.n	405f26 <_realloc_r+0x8e>
  406156:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40615a:	f023 0303 	bic.w	r3, r3, #3
  40615e:	441c      	add	r4, r3
  406160:	462e      	mov	r6, r5
  406162:	e6f9      	b.n	405f58 <_realloc_r+0xc0>
  406164:	68a9      	ldr	r1, [r5, #8]
  406166:	f8ca 1010 	str.w	r1, [sl, #16]
  40616a:	68e9      	ldr	r1, [r5, #12]
  40616c:	f8ca 1014 	str.w	r1, [sl, #20]
  406170:	2a24      	cmp	r2, #36	; 0x24
  406172:	d00c      	beq.n	40618e <_realloc_r+0x2f6>
  406174:	3510      	adds	r5, #16
  406176:	f10a 0218 	add.w	r2, sl, #24
  40617a:	e7b9      	b.n	4060f0 <_realloc_r+0x258>
  40617c:	692b      	ldr	r3, [r5, #16]
  40617e:	6103      	str	r3, [r0, #16]
  406180:	696b      	ldr	r3, [r5, #20]
  406182:	6143      	str	r3, [r0, #20]
  406184:	f105 0218 	add.w	r2, r5, #24
  406188:	f100 0318 	add.w	r3, r0, #24
  40618c:	e6cb      	b.n	405f26 <_realloc_r+0x8e>
  40618e:	692a      	ldr	r2, [r5, #16]
  406190:	f8ca 2018 	str.w	r2, [sl, #24]
  406194:	696a      	ldr	r2, [r5, #20]
  406196:	f8ca 201c 	str.w	r2, [sl, #28]
  40619a:	3518      	adds	r5, #24
  40619c:	f10a 0220 	add.w	r2, sl, #32
  4061a0:	e7a6      	b.n	4060f0 <_realloc_r+0x258>
  4061a2:	4632      	mov	r2, r6
  4061a4:	e77f      	b.n	4060a6 <_realloc_r+0x20e>
  4061a6:	4629      	mov	r1, r5
  4061a8:	4630      	mov	r0, r6
  4061aa:	9301      	str	r3, [sp, #4]
  4061ac:	f7ff fe10 	bl	405dd0 <memmove>
  4061b0:	9b01      	ldr	r3, [sp, #4]
  4061b2:	e77e      	b.n	4060b2 <_realloc_r+0x21a>
  4061b4:	68a9      	ldr	r1, [r5, #8]
  4061b6:	f8ca 1010 	str.w	r1, [sl, #16]
  4061ba:	68e9      	ldr	r1, [r5, #12]
  4061bc:	f8ca 1014 	str.w	r1, [sl, #20]
  4061c0:	2a24      	cmp	r2, #36	; 0x24
  4061c2:	d003      	beq.n	4061cc <_realloc_r+0x334>
  4061c4:	3510      	adds	r5, #16
  4061c6:	f10a 0218 	add.w	r2, sl, #24
  4061ca:	e76c      	b.n	4060a6 <_realloc_r+0x20e>
  4061cc:	692a      	ldr	r2, [r5, #16]
  4061ce:	f8ca 2018 	str.w	r2, [sl, #24]
  4061d2:	696a      	ldr	r2, [r5, #20]
  4061d4:	f8ca 201c 	str.w	r2, [sl, #28]
  4061d8:	3518      	adds	r5, #24
  4061da:	f10a 0220 	add.w	r2, sl, #32
  4061de:	e762      	b.n	4060a6 <_realloc_r+0x20e>
  4061e0:	20400438 	.word	0x20400438

004061e4 <__sread>:
  4061e4:	b510      	push	{r4, lr}
  4061e6:	460c      	mov	r4, r1
  4061e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4061ec:	f000 f9f6 	bl	4065dc <_read_r>
  4061f0:	2800      	cmp	r0, #0
  4061f2:	db03      	blt.n	4061fc <__sread+0x18>
  4061f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  4061f6:	4403      	add	r3, r0
  4061f8:	6523      	str	r3, [r4, #80]	; 0x50
  4061fa:	bd10      	pop	{r4, pc}
  4061fc:	89a3      	ldrh	r3, [r4, #12]
  4061fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406202:	81a3      	strh	r3, [r4, #12]
  406204:	bd10      	pop	{r4, pc}
  406206:	bf00      	nop

00406208 <__swrite>:
  406208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40620c:	4616      	mov	r6, r2
  40620e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406212:	461f      	mov	r7, r3
  406214:	05d3      	lsls	r3, r2, #23
  406216:	460c      	mov	r4, r1
  406218:	4605      	mov	r5, r0
  40621a:	d507      	bpl.n	40622c <__swrite+0x24>
  40621c:	2200      	movs	r2, #0
  40621e:	2302      	movs	r3, #2
  406220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406224:	f000 f9c4 	bl	4065b0 <_lseek_r>
  406228:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40622c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406230:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406234:	81a2      	strh	r2, [r4, #12]
  406236:	463b      	mov	r3, r7
  406238:	4632      	mov	r2, r6
  40623a:	4628      	mov	r0, r5
  40623c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406240:	f000 b8a4 	b.w	40638c <_write_r>

00406244 <__sseek>:
  406244:	b510      	push	{r4, lr}
  406246:	460c      	mov	r4, r1
  406248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40624c:	f000 f9b0 	bl	4065b0 <_lseek_r>
  406250:	89a3      	ldrh	r3, [r4, #12]
  406252:	1c42      	adds	r2, r0, #1
  406254:	bf0e      	itee	eq
  406256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40625a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40625e:	6520      	strne	r0, [r4, #80]	; 0x50
  406260:	81a3      	strh	r3, [r4, #12]
  406262:	bd10      	pop	{r4, pc}

00406264 <__sclose>:
  406264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406268:	f000 b908 	b.w	40647c <_close_r>

0040626c <__swbuf_r>:
  40626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40626e:	460d      	mov	r5, r1
  406270:	4614      	mov	r4, r2
  406272:	4606      	mov	r6, r0
  406274:	b110      	cbz	r0, 40627c <__swbuf_r+0x10>
  406276:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406278:	2b00      	cmp	r3, #0
  40627a:	d04b      	beq.n	406314 <__swbuf_r+0xa8>
  40627c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406280:	69a3      	ldr	r3, [r4, #24]
  406282:	60a3      	str	r3, [r4, #8]
  406284:	b291      	uxth	r1, r2
  406286:	0708      	lsls	r0, r1, #28
  406288:	d539      	bpl.n	4062fe <__swbuf_r+0x92>
  40628a:	6923      	ldr	r3, [r4, #16]
  40628c:	2b00      	cmp	r3, #0
  40628e:	d036      	beq.n	4062fe <__swbuf_r+0x92>
  406290:	b2ed      	uxtb	r5, r5
  406292:	0489      	lsls	r1, r1, #18
  406294:	462f      	mov	r7, r5
  406296:	d515      	bpl.n	4062c4 <__swbuf_r+0x58>
  406298:	6822      	ldr	r2, [r4, #0]
  40629a:	6961      	ldr	r1, [r4, #20]
  40629c:	1ad3      	subs	r3, r2, r3
  40629e:	428b      	cmp	r3, r1
  4062a0:	da1c      	bge.n	4062dc <__swbuf_r+0x70>
  4062a2:	3301      	adds	r3, #1
  4062a4:	68a1      	ldr	r1, [r4, #8]
  4062a6:	1c50      	adds	r0, r2, #1
  4062a8:	3901      	subs	r1, #1
  4062aa:	60a1      	str	r1, [r4, #8]
  4062ac:	6020      	str	r0, [r4, #0]
  4062ae:	7015      	strb	r5, [r2, #0]
  4062b0:	6962      	ldr	r2, [r4, #20]
  4062b2:	429a      	cmp	r2, r3
  4062b4:	d01a      	beq.n	4062ec <__swbuf_r+0x80>
  4062b6:	89a3      	ldrh	r3, [r4, #12]
  4062b8:	07db      	lsls	r3, r3, #31
  4062ba:	d501      	bpl.n	4062c0 <__swbuf_r+0x54>
  4062bc:	2d0a      	cmp	r5, #10
  4062be:	d015      	beq.n	4062ec <__swbuf_r+0x80>
  4062c0:	4638      	mov	r0, r7
  4062c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4062c4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4062c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4062ca:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  4062ce:	81a2      	strh	r2, [r4, #12]
  4062d0:	6822      	ldr	r2, [r4, #0]
  4062d2:	6661      	str	r1, [r4, #100]	; 0x64
  4062d4:	6961      	ldr	r1, [r4, #20]
  4062d6:	1ad3      	subs	r3, r2, r3
  4062d8:	428b      	cmp	r3, r1
  4062da:	dbe2      	blt.n	4062a2 <__swbuf_r+0x36>
  4062dc:	4621      	mov	r1, r4
  4062de:	4630      	mov	r0, r6
  4062e0:	f7ff f87a 	bl	4053d8 <_fflush_r>
  4062e4:	b940      	cbnz	r0, 4062f8 <__swbuf_r+0x8c>
  4062e6:	6822      	ldr	r2, [r4, #0]
  4062e8:	2301      	movs	r3, #1
  4062ea:	e7db      	b.n	4062a4 <__swbuf_r+0x38>
  4062ec:	4621      	mov	r1, r4
  4062ee:	4630      	mov	r0, r6
  4062f0:	f7ff f872 	bl	4053d8 <_fflush_r>
  4062f4:	2800      	cmp	r0, #0
  4062f6:	d0e3      	beq.n	4062c0 <__swbuf_r+0x54>
  4062f8:	f04f 37ff 	mov.w	r7, #4294967295
  4062fc:	e7e0      	b.n	4062c0 <__swbuf_r+0x54>
  4062fe:	4621      	mov	r1, r4
  406300:	4630      	mov	r0, r6
  406302:	f7fe ff55 	bl	4051b0 <__swsetup_r>
  406306:	2800      	cmp	r0, #0
  406308:	d1f6      	bne.n	4062f8 <__swbuf_r+0x8c>
  40630a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40630e:	6923      	ldr	r3, [r4, #16]
  406310:	b291      	uxth	r1, r2
  406312:	e7bd      	b.n	406290 <__swbuf_r+0x24>
  406314:	f7ff f8b8 	bl	405488 <__sinit>
  406318:	e7b0      	b.n	40627c <__swbuf_r+0x10>
  40631a:	bf00      	nop

0040631c <_wcrtomb_r>:
  40631c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40631e:	4606      	mov	r6, r0
  406320:	b085      	sub	sp, #20
  406322:	461f      	mov	r7, r3
  406324:	b189      	cbz	r1, 40634a <_wcrtomb_r+0x2e>
  406326:	4c10      	ldr	r4, [pc, #64]	; (406368 <_wcrtomb_r+0x4c>)
  406328:	4d10      	ldr	r5, [pc, #64]	; (40636c <_wcrtomb_r+0x50>)
  40632a:	6824      	ldr	r4, [r4, #0]
  40632c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  40632e:	2c00      	cmp	r4, #0
  406330:	bf08      	it	eq
  406332:	462c      	moveq	r4, r5
  406334:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406338:	47a0      	blx	r4
  40633a:	1c43      	adds	r3, r0, #1
  40633c:	d103      	bne.n	406346 <_wcrtomb_r+0x2a>
  40633e:	2200      	movs	r2, #0
  406340:	238a      	movs	r3, #138	; 0x8a
  406342:	603a      	str	r2, [r7, #0]
  406344:	6033      	str	r3, [r6, #0]
  406346:	b005      	add	sp, #20
  406348:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40634a:	460c      	mov	r4, r1
  40634c:	4906      	ldr	r1, [pc, #24]	; (406368 <_wcrtomb_r+0x4c>)
  40634e:	4a07      	ldr	r2, [pc, #28]	; (40636c <_wcrtomb_r+0x50>)
  406350:	6809      	ldr	r1, [r1, #0]
  406352:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406354:	2900      	cmp	r1, #0
  406356:	bf08      	it	eq
  406358:	4611      	moveq	r1, r2
  40635a:	4622      	mov	r2, r4
  40635c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406360:	a901      	add	r1, sp, #4
  406362:	47a0      	blx	r4
  406364:	e7e9      	b.n	40633a <_wcrtomb_r+0x1e>
  406366:	bf00      	nop
  406368:	2040000c 	.word	0x2040000c
  40636c:	2040084c 	.word	0x2040084c

00406370 <__ascii_wctomb>:
  406370:	b121      	cbz	r1, 40637c <__ascii_wctomb+0xc>
  406372:	2aff      	cmp	r2, #255	; 0xff
  406374:	d804      	bhi.n	406380 <__ascii_wctomb+0x10>
  406376:	700a      	strb	r2, [r1, #0]
  406378:	2001      	movs	r0, #1
  40637a:	4770      	bx	lr
  40637c:	4608      	mov	r0, r1
  40637e:	4770      	bx	lr
  406380:	238a      	movs	r3, #138	; 0x8a
  406382:	6003      	str	r3, [r0, #0]
  406384:	f04f 30ff 	mov.w	r0, #4294967295
  406388:	4770      	bx	lr
  40638a:	bf00      	nop

0040638c <_write_r>:
  40638c:	b570      	push	{r4, r5, r6, lr}
  40638e:	460d      	mov	r5, r1
  406390:	4c08      	ldr	r4, [pc, #32]	; (4063b4 <_write_r+0x28>)
  406392:	4611      	mov	r1, r2
  406394:	4606      	mov	r6, r0
  406396:	461a      	mov	r2, r3
  406398:	4628      	mov	r0, r5
  40639a:	2300      	movs	r3, #0
  40639c:	6023      	str	r3, [r4, #0]
  40639e:	f7fa f817 	bl	4003d0 <_write>
  4063a2:	1c43      	adds	r3, r0, #1
  4063a4:	d000      	beq.n	4063a8 <_write_r+0x1c>
  4063a6:	bd70      	pop	{r4, r5, r6, pc}
  4063a8:	6823      	ldr	r3, [r4, #0]
  4063aa:	2b00      	cmp	r3, #0
  4063ac:	d0fb      	beq.n	4063a6 <_write_r+0x1a>
  4063ae:	6033      	str	r3, [r6, #0]
  4063b0:	bd70      	pop	{r4, r5, r6, pc}
  4063b2:	bf00      	nop
  4063b4:	20400c44 	.word	0x20400c44

004063b8 <__register_exitproc>:
  4063b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4063bc:	4d2c      	ldr	r5, [pc, #176]	; (406470 <__register_exitproc+0xb8>)
  4063be:	4606      	mov	r6, r0
  4063c0:	6828      	ldr	r0, [r5, #0]
  4063c2:	4698      	mov	r8, r3
  4063c4:	460f      	mov	r7, r1
  4063c6:	4691      	mov	r9, r2
  4063c8:	f7ff fc1e 	bl	405c08 <__retarget_lock_acquire_recursive>
  4063cc:	4b29      	ldr	r3, [pc, #164]	; (406474 <__register_exitproc+0xbc>)
  4063ce:	681c      	ldr	r4, [r3, #0]
  4063d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4063d4:	2b00      	cmp	r3, #0
  4063d6:	d03e      	beq.n	406456 <__register_exitproc+0x9e>
  4063d8:	685a      	ldr	r2, [r3, #4]
  4063da:	2a1f      	cmp	r2, #31
  4063dc:	dc1c      	bgt.n	406418 <__register_exitproc+0x60>
  4063de:	f102 0e01 	add.w	lr, r2, #1
  4063e2:	b176      	cbz	r6, 406402 <__register_exitproc+0x4a>
  4063e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4063e8:	2401      	movs	r4, #1
  4063ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4063ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4063f2:	4094      	lsls	r4, r2
  4063f4:	4320      	orrs	r0, r4
  4063f6:	2e02      	cmp	r6, #2
  4063f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4063fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406400:	d023      	beq.n	40644a <__register_exitproc+0x92>
  406402:	3202      	adds	r2, #2
  406404:	f8c3 e004 	str.w	lr, [r3, #4]
  406408:	6828      	ldr	r0, [r5, #0]
  40640a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40640e:	f7ff fbfd 	bl	405c0c <__retarget_lock_release_recursive>
  406412:	2000      	movs	r0, #0
  406414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406418:	4b17      	ldr	r3, [pc, #92]	; (406478 <__register_exitproc+0xc0>)
  40641a:	b30b      	cbz	r3, 406460 <__register_exitproc+0xa8>
  40641c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406420:	f7fd faf0 	bl	403a04 <malloc>
  406424:	4603      	mov	r3, r0
  406426:	b1d8      	cbz	r0, 406460 <__register_exitproc+0xa8>
  406428:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40642c:	6002      	str	r2, [r0, #0]
  40642e:	2100      	movs	r1, #0
  406430:	6041      	str	r1, [r0, #4]
  406432:	460a      	mov	r2, r1
  406434:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406438:	f04f 0e01 	mov.w	lr, #1
  40643c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406440:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406444:	2e00      	cmp	r6, #0
  406446:	d0dc      	beq.n	406402 <__register_exitproc+0x4a>
  406448:	e7cc      	b.n	4063e4 <__register_exitproc+0x2c>
  40644a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40644e:	430c      	orrs	r4, r1
  406450:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406454:	e7d5      	b.n	406402 <__register_exitproc+0x4a>
  406456:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40645a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40645e:	e7bb      	b.n	4063d8 <__register_exitproc+0x20>
  406460:	6828      	ldr	r0, [r5, #0]
  406462:	f7ff fbd3 	bl	405c0c <__retarget_lock_release_recursive>
  406466:	f04f 30ff 	mov.w	r0, #4294967295
  40646a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40646e:	bf00      	nop
  406470:	20400848 	.word	0x20400848
  406474:	00407ef4 	.word	0x00407ef4
  406478:	00403a05 	.word	0x00403a05

0040647c <_close_r>:
  40647c:	b538      	push	{r3, r4, r5, lr}
  40647e:	4c07      	ldr	r4, [pc, #28]	; (40649c <_close_r+0x20>)
  406480:	2300      	movs	r3, #0
  406482:	4605      	mov	r5, r0
  406484:	4608      	mov	r0, r1
  406486:	6023      	str	r3, [r4, #0]
  406488:	f7fa fcbe 	bl	400e08 <_close>
  40648c:	1c43      	adds	r3, r0, #1
  40648e:	d000      	beq.n	406492 <_close_r+0x16>
  406490:	bd38      	pop	{r3, r4, r5, pc}
  406492:	6823      	ldr	r3, [r4, #0]
  406494:	2b00      	cmp	r3, #0
  406496:	d0fb      	beq.n	406490 <_close_r+0x14>
  406498:	602b      	str	r3, [r5, #0]
  40649a:	bd38      	pop	{r3, r4, r5, pc}
  40649c:	20400c44 	.word	0x20400c44

004064a0 <_fclose_r>:
  4064a0:	b570      	push	{r4, r5, r6, lr}
  4064a2:	b159      	cbz	r1, 4064bc <_fclose_r+0x1c>
  4064a4:	4605      	mov	r5, r0
  4064a6:	460c      	mov	r4, r1
  4064a8:	b110      	cbz	r0, 4064b0 <_fclose_r+0x10>
  4064aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4064ac:	2b00      	cmp	r3, #0
  4064ae:	d03c      	beq.n	40652a <_fclose_r+0x8a>
  4064b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4064b2:	07d8      	lsls	r0, r3, #31
  4064b4:	d505      	bpl.n	4064c2 <_fclose_r+0x22>
  4064b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4064ba:	b92b      	cbnz	r3, 4064c8 <_fclose_r+0x28>
  4064bc:	2600      	movs	r6, #0
  4064be:	4630      	mov	r0, r6
  4064c0:	bd70      	pop	{r4, r5, r6, pc}
  4064c2:	89a3      	ldrh	r3, [r4, #12]
  4064c4:	0599      	lsls	r1, r3, #22
  4064c6:	d53c      	bpl.n	406542 <_fclose_r+0xa2>
  4064c8:	4621      	mov	r1, r4
  4064ca:	4628      	mov	r0, r5
  4064cc:	f7fe fee4 	bl	405298 <__sflush_r>
  4064d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4064d2:	4606      	mov	r6, r0
  4064d4:	b133      	cbz	r3, 4064e4 <_fclose_r+0x44>
  4064d6:	69e1      	ldr	r1, [r4, #28]
  4064d8:	4628      	mov	r0, r5
  4064da:	4798      	blx	r3
  4064dc:	2800      	cmp	r0, #0
  4064de:	bfb8      	it	lt
  4064e0:	f04f 36ff 	movlt.w	r6, #4294967295
  4064e4:	89a3      	ldrh	r3, [r4, #12]
  4064e6:	061a      	lsls	r2, r3, #24
  4064e8:	d422      	bmi.n	406530 <_fclose_r+0x90>
  4064ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4064ec:	b141      	cbz	r1, 406500 <_fclose_r+0x60>
  4064ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4064f2:	4299      	cmp	r1, r3
  4064f4:	d002      	beq.n	4064fc <_fclose_r+0x5c>
  4064f6:	4628      	mov	r0, r5
  4064f8:	f7ff f8ec 	bl	4056d4 <_free_r>
  4064fc:	2300      	movs	r3, #0
  4064fe:	6323      	str	r3, [r4, #48]	; 0x30
  406500:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406502:	b121      	cbz	r1, 40650e <_fclose_r+0x6e>
  406504:	4628      	mov	r0, r5
  406506:	f7ff f8e5 	bl	4056d4 <_free_r>
  40650a:	2300      	movs	r3, #0
  40650c:	6463      	str	r3, [r4, #68]	; 0x44
  40650e:	f7fe ffe7 	bl	4054e0 <__sfp_lock_acquire>
  406512:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406514:	2200      	movs	r2, #0
  406516:	07db      	lsls	r3, r3, #31
  406518:	81a2      	strh	r2, [r4, #12]
  40651a:	d50e      	bpl.n	40653a <_fclose_r+0x9a>
  40651c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40651e:	f7ff fb71 	bl	405c04 <__retarget_lock_close_recursive>
  406522:	f7fe ffe3 	bl	4054ec <__sfp_lock_release>
  406526:	4630      	mov	r0, r6
  406528:	bd70      	pop	{r4, r5, r6, pc}
  40652a:	f7fe ffad 	bl	405488 <__sinit>
  40652e:	e7bf      	b.n	4064b0 <_fclose_r+0x10>
  406530:	6921      	ldr	r1, [r4, #16]
  406532:	4628      	mov	r0, r5
  406534:	f7ff f8ce 	bl	4056d4 <_free_r>
  406538:	e7d7      	b.n	4064ea <_fclose_r+0x4a>
  40653a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40653c:	f7ff fb66 	bl	405c0c <__retarget_lock_release_recursive>
  406540:	e7ec      	b.n	40651c <_fclose_r+0x7c>
  406542:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406544:	f7ff fb60 	bl	405c08 <__retarget_lock_acquire_recursive>
  406548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40654c:	2b00      	cmp	r3, #0
  40654e:	d1bb      	bne.n	4064c8 <_fclose_r+0x28>
  406550:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406552:	f016 0601 	ands.w	r6, r6, #1
  406556:	d1b1      	bne.n	4064bc <_fclose_r+0x1c>
  406558:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40655a:	f7ff fb57 	bl	405c0c <__retarget_lock_release_recursive>
  40655e:	4630      	mov	r0, r6
  406560:	bd70      	pop	{r4, r5, r6, pc}
  406562:	bf00      	nop

00406564 <_fstat_r>:
  406564:	b538      	push	{r3, r4, r5, lr}
  406566:	460b      	mov	r3, r1
  406568:	4c07      	ldr	r4, [pc, #28]	; (406588 <_fstat_r+0x24>)
  40656a:	4605      	mov	r5, r0
  40656c:	4611      	mov	r1, r2
  40656e:	4618      	mov	r0, r3
  406570:	2300      	movs	r3, #0
  406572:	6023      	str	r3, [r4, #0]
  406574:	f7fa fc4b 	bl	400e0e <_fstat>
  406578:	1c43      	adds	r3, r0, #1
  40657a:	d000      	beq.n	40657e <_fstat_r+0x1a>
  40657c:	bd38      	pop	{r3, r4, r5, pc}
  40657e:	6823      	ldr	r3, [r4, #0]
  406580:	2b00      	cmp	r3, #0
  406582:	d0fb      	beq.n	40657c <_fstat_r+0x18>
  406584:	602b      	str	r3, [r5, #0]
  406586:	bd38      	pop	{r3, r4, r5, pc}
  406588:	20400c44 	.word	0x20400c44

0040658c <_isatty_r>:
  40658c:	b538      	push	{r3, r4, r5, lr}
  40658e:	4c07      	ldr	r4, [pc, #28]	; (4065ac <_isatty_r+0x20>)
  406590:	2300      	movs	r3, #0
  406592:	4605      	mov	r5, r0
  406594:	4608      	mov	r0, r1
  406596:	6023      	str	r3, [r4, #0]
  406598:	f7fa fc3e 	bl	400e18 <_isatty>
  40659c:	1c43      	adds	r3, r0, #1
  40659e:	d000      	beq.n	4065a2 <_isatty_r+0x16>
  4065a0:	bd38      	pop	{r3, r4, r5, pc}
  4065a2:	6823      	ldr	r3, [r4, #0]
  4065a4:	2b00      	cmp	r3, #0
  4065a6:	d0fb      	beq.n	4065a0 <_isatty_r+0x14>
  4065a8:	602b      	str	r3, [r5, #0]
  4065aa:	bd38      	pop	{r3, r4, r5, pc}
  4065ac:	20400c44 	.word	0x20400c44

004065b0 <_lseek_r>:
  4065b0:	b570      	push	{r4, r5, r6, lr}
  4065b2:	460d      	mov	r5, r1
  4065b4:	4c08      	ldr	r4, [pc, #32]	; (4065d8 <_lseek_r+0x28>)
  4065b6:	4611      	mov	r1, r2
  4065b8:	4606      	mov	r6, r0
  4065ba:	461a      	mov	r2, r3
  4065bc:	4628      	mov	r0, r5
  4065be:	2300      	movs	r3, #0
  4065c0:	6023      	str	r3, [r4, #0]
  4065c2:	f7fa fc2b 	bl	400e1c <_lseek>
  4065c6:	1c43      	adds	r3, r0, #1
  4065c8:	d000      	beq.n	4065cc <_lseek_r+0x1c>
  4065ca:	bd70      	pop	{r4, r5, r6, pc}
  4065cc:	6823      	ldr	r3, [r4, #0]
  4065ce:	2b00      	cmp	r3, #0
  4065d0:	d0fb      	beq.n	4065ca <_lseek_r+0x1a>
  4065d2:	6033      	str	r3, [r6, #0]
  4065d4:	bd70      	pop	{r4, r5, r6, pc}
  4065d6:	bf00      	nop
  4065d8:	20400c44 	.word	0x20400c44

004065dc <_read_r>:
  4065dc:	b570      	push	{r4, r5, r6, lr}
  4065de:	460d      	mov	r5, r1
  4065e0:	4c08      	ldr	r4, [pc, #32]	; (406604 <_read_r+0x28>)
  4065e2:	4611      	mov	r1, r2
  4065e4:	4606      	mov	r6, r0
  4065e6:	461a      	mov	r2, r3
  4065e8:	4628      	mov	r0, r5
  4065ea:	2300      	movs	r3, #0
  4065ec:	6023      	str	r3, [r4, #0]
  4065ee:	f7f9 fed1 	bl	400394 <_read>
  4065f2:	1c43      	adds	r3, r0, #1
  4065f4:	d000      	beq.n	4065f8 <_read_r+0x1c>
  4065f6:	bd70      	pop	{r4, r5, r6, pc}
  4065f8:	6823      	ldr	r3, [r4, #0]
  4065fa:	2b00      	cmp	r3, #0
  4065fc:	d0fb      	beq.n	4065f6 <_read_r+0x1a>
  4065fe:	6033      	str	r3, [r6, #0]
  406600:	bd70      	pop	{r4, r5, r6, pc}
  406602:	bf00      	nop
  406604:	20400c44 	.word	0x20400c44

00406608 <__aeabi_uldivmod>:
  406608:	b953      	cbnz	r3, 406620 <__aeabi_uldivmod+0x18>
  40660a:	b94a      	cbnz	r2, 406620 <__aeabi_uldivmod+0x18>
  40660c:	2900      	cmp	r1, #0
  40660e:	bf08      	it	eq
  406610:	2800      	cmpeq	r0, #0
  406612:	bf1c      	itt	ne
  406614:	f04f 31ff 	movne.w	r1, #4294967295
  406618:	f04f 30ff 	movne.w	r0, #4294967295
  40661c:	f000 b97a 	b.w	406914 <__aeabi_idiv0>
  406620:	f1ad 0c08 	sub.w	ip, sp, #8
  406624:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406628:	f000 f806 	bl	406638 <__udivmoddi4>
  40662c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406630:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406634:	b004      	add	sp, #16
  406636:	4770      	bx	lr

00406638 <__udivmoddi4>:
  406638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40663c:	468c      	mov	ip, r1
  40663e:	460d      	mov	r5, r1
  406640:	4604      	mov	r4, r0
  406642:	9e08      	ldr	r6, [sp, #32]
  406644:	2b00      	cmp	r3, #0
  406646:	d151      	bne.n	4066ec <__udivmoddi4+0xb4>
  406648:	428a      	cmp	r2, r1
  40664a:	4617      	mov	r7, r2
  40664c:	d96d      	bls.n	40672a <__udivmoddi4+0xf2>
  40664e:	fab2 fe82 	clz	lr, r2
  406652:	f1be 0f00 	cmp.w	lr, #0
  406656:	d00b      	beq.n	406670 <__udivmoddi4+0x38>
  406658:	f1ce 0c20 	rsb	ip, lr, #32
  40665c:	fa01 f50e 	lsl.w	r5, r1, lr
  406660:	fa20 fc0c 	lsr.w	ip, r0, ip
  406664:	fa02 f70e 	lsl.w	r7, r2, lr
  406668:	ea4c 0c05 	orr.w	ip, ip, r5
  40666c:	fa00 f40e 	lsl.w	r4, r0, lr
  406670:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406674:	0c25      	lsrs	r5, r4, #16
  406676:	fbbc f8fa 	udiv	r8, ip, sl
  40667a:	fa1f f987 	uxth.w	r9, r7
  40667e:	fb0a cc18 	mls	ip, sl, r8, ip
  406682:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406686:	fb08 f309 	mul.w	r3, r8, r9
  40668a:	42ab      	cmp	r3, r5
  40668c:	d90a      	bls.n	4066a4 <__udivmoddi4+0x6c>
  40668e:	19ed      	adds	r5, r5, r7
  406690:	f108 32ff 	add.w	r2, r8, #4294967295
  406694:	f080 8123 	bcs.w	4068de <__udivmoddi4+0x2a6>
  406698:	42ab      	cmp	r3, r5
  40669a:	f240 8120 	bls.w	4068de <__udivmoddi4+0x2a6>
  40669e:	f1a8 0802 	sub.w	r8, r8, #2
  4066a2:	443d      	add	r5, r7
  4066a4:	1aed      	subs	r5, r5, r3
  4066a6:	b2a4      	uxth	r4, r4
  4066a8:	fbb5 f0fa 	udiv	r0, r5, sl
  4066ac:	fb0a 5510 	mls	r5, sl, r0, r5
  4066b0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4066b4:	fb00 f909 	mul.w	r9, r0, r9
  4066b8:	45a1      	cmp	r9, r4
  4066ba:	d909      	bls.n	4066d0 <__udivmoddi4+0x98>
  4066bc:	19e4      	adds	r4, r4, r7
  4066be:	f100 33ff 	add.w	r3, r0, #4294967295
  4066c2:	f080 810a 	bcs.w	4068da <__udivmoddi4+0x2a2>
  4066c6:	45a1      	cmp	r9, r4
  4066c8:	f240 8107 	bls.w	4068da <__udivmoddi4+0x2a2>
  4066cc:	3802      	subs	r0, #2
  4066ce:	443c      	add	r4, r7
  4066d0:	eba4 0409 	sub.w	r4, r4, r9
  4066d4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4066d8:	2100      	movs	r1, #0
  4066da:	2e00      	cmp	r6, #0
  4066dc:	d061      	beq.n	4067a2 <__udivmoddi4+0x16a>
  4066de:	fa24 f40e 	lsr.w	r4, r4, lr
  4066e2:	2300      	movs	r3, #0
  4066e4:	6034      	str	r4, [r6, #0]
  4066e6:	6073      	str	r3, [r6, #4]
  4066e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4066ec:	428b      	cmp	r3, r1
  4066ee:	d907      	bls.n	406700 <__udivmoddi4+0xc8>
  4066f0:	2e00      	cmp	r6, #0
  4066f2:	d054      	beq.n	40679e <__udivmoddi4+0x166>
  4066f4:	2100      	movs	r1, #0
  4066f6:	e886 0021 	stmia.w	r6, {r0, r5}
  4066fa:	4608      	mov	r0, r1
  4066fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406700:	fab3 f183 	clz	r1, r3
  406704:	2900      	cmp	r1, #0
  406706:	f040 808e 	bne.w	406826 <__udivmoddi4+0x1ee>
  40670a:	42ab      	cmp	r3, r5
  40670c:	d302      	bcc.n	406714 <__udivmoddi4+0xdc>
  40670e:	4282      	cmp	r2, r0
  406710:	f200 80fa 	bhi.w	406908 <__udivmoddi4+0x2d0>
  406714:	1a84      	subs	r4, r0, r2
  406716:	eb65 0503 	sbc.w	r5, r5, r3
  40671a:	2001      	movs	r0, #1
  40671c:	46ac      	mov	ip, r5
  40671e:	2e00      	cmp	r6, #0
  406720:	d03f      	beq.n	4067a2 <__udivmoddi4+0x16a>
  406722:	e886 1010 	stmia.w	r6, {r4, ip}
  406726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40672a:	b912      	cbnz	r2, 406732 <__udivmoddi4+0xfa>
  40672c:	2701      	movs	r7, #1
  40672e:	fbb7 f7f2 	udiv	r7, r7, r2
  406732:	fab7 fe87 	clz	lr, r7
  406736:	f1be 0f00 	cmp.w	lr, #0
  40673a:	d134      	bne.n	4067a6 <__udivmoddi4+0x16e>
  40673c:	1beb      	subs	r3, r5, r7
  40673e:	0c3a      	lsrs	r2, r7, #16
  406740:	fa1f fc87 	uxth.w	ip, r7
  406744:	2101      	movs	r1, #1
  406746:	fbb3 f8f2 	udiv	r8, r3, r2
  40674a:	0c25      	lsrs	r5, r4, #16
  40674c:	fb02 3318 	mls	r3, r2, r8, r3
  406750:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406754:	fb0c f308 	mul.w	r3, ip, r8
  406758:	42ab      	cmp	r3, r5
  40675a:	d907      	bls.n	40676c <__udivmoddi4+0x134>
  40675c:	19ed      	adds	r5, r5, r7
  40675e:	f108 30ff 	add.w	r0, r8, #4294967295
  406762:	d202      	bcs.n	40676a <__udivmoddi4+0x132>
  406764:	42ab      	cmp	r3, r5
  406766:	f200 80d1 	bhi.w	40690c <__udivmoddi4+0x2d4>
  40676a:	4680      	mov	r8, r0
  40676c:	1aed      	subs	r5, r5, r3
  40676e:	b2a3      	uxth	r3, r4
  406770:	fbb5 f0f2 	udiv	r0, r5, r2
  406774:	fb02 5510 	mls	r5, r2, r0, r5
  406778:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  40677c:	fb0c fc00 	mul.w	ip, ip, r0
  406780:	45a4      	cmp	ip, r4
  406782:	d907      	bls.n	406794 <__udivmoddi4+0x15c>
  406784:	19e4      	adds	r4, r4, r7
  406786:	f100 33ff 	add.w	r3, r0, #4294967295
  40678a:	d202      	bcs.n	406792 <__udivmoddi4+0x15a>
  40678c:	45a4      	cmp	ip, r4
  40678e:	f200 80b8 	bhi.w	406902 <__udivmoddi4+0x2ca>
  406792:	4618      	mov	r0, r3
  406794:	eba4 040c 	sub.w	r4, r4, ip
  406798:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  40679c:	e79d      	b.n	4066da <__udivmoddi4+0xa2>
  40679e:	4631      	mov	r1, r6
  4067a0:	4630      	mov	r0, r6
  4067a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4067a6:	f1ce 0420 	rsb	r4, lr, #32
  4067aa:	fa05 f30e 	lsl.w	r3, r5, lr
  4067ae:	fa07 f70e 	lsl.w	r7, r7, lr
  4067b2:	fa20 f804 	lsr.w	r8, r0, r4
  4067b6:	0c3a      	lsrs	r2, r7, #16
  4067b8:	fa25 f404 	lsr.w	r4, r5, r4
  4067bc:	ea48 0803 	orr.w	r8, r8, r3
  4067c0:	fbb4 f1f2 	udiv	r1, r4, r2
  4067c4:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4067c8:	fb02 4411 	mls	r4, r2, r1, r4
  4067cc:	fa1f fc87 	uxth.w	ip, r7
  4067d0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4067d4:	fb01 f30c 	mul.w	r3, r1, ip
  4067d8:	42ab      	cmp	r3, r5
  4067da:	fa00 f40e 	lsl.w	r4, r0, lr
  4067de:	d909      	bls.n	4067f4 <__udivmoddi4+0x1bc>
  4067e0:	19ed      	adds	r5, r5, r7
  4067e2:	f101 30ff 	add.w	r0, r1, #4294967295
  4067e6:	f080 808a 	bcs.w	4068fe <__udivmoddi4+0x2c6>
  4067ea:	42ab      	cmp	r3, r5
  4067ec:	f240 8087 	bls.w	4068fe <__udivmoddi4+0x2c6>
  4067f0:	3902      	subs	r1, #2
  4067f2:	443d      	add	r5, r7
  4067f4:	1aeb      	subs	r3, r5, r3
  4067f6:	fa1f f588 	uxth.w	r5, r8
  4067fa:	fbb3 f0f2 	udiv	r0, r3, r2
  4067fe:	fb02 3310 	mls	r3, r2, r0, r3
  406802:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406806:	fb00 f30c 	mul.w	r3, r0, ip
  40680a:	42ab      	cmp	r3, r5
  40680c:	d907      	bls.n	40681e <__udivmoddi4+0x1e6>
  40680e:	19ed      	adds	r5, r5, r7
  406810:	f100 38ff 	add.w	r8, r0, #4294967295
  406814:	d26f      	bcs.n	4068f6 <__udivmoddi4+0x2be>
  406816:	42ab      	cmp	r3, r5
  406818:	d96d      	bls.n	4068f6 <__udivmoddi4+0x2be>
  40681a:	3802      	subs	r0, #2
  40681c:	443d      	add	r5, r7
  40681e:	1aeb      	subs	r3, r5, r3
  406820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406824:	e78f      	b.n	406746 <__udivmoddi4+0x10e>
  406826:	f1c1 0720 	rsb	r7, r1, #32
  40682a:	fa22 f807 	lsr.w	r8, r2, r7
  40682e:	408b      	lsls	r3, r1
  406830:	fa05 f401 	lsl.w	r4, r5, r1
  406834:	ea48 0303 	orr.w	r3, r8, r3
  406838:	fa20 fe07 	lsr.w	lr, r0, r7
  40683c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406840:	40fd      	lsrs	r5, r7
  406842:	ea4e 0e04 	orr.w	lr, lr, r4
  406846:	fbb5 f9fc 	udiv	r9, r5, ip
  40684a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  40684e:	fb0c 5519 	mls	r5, ip, r9, r5
  406852:	fa1f f883 	uxth.w	r8, r3
  406856:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40685a:	fb09 f408 	mul.w	r4, r9, r8
  40685e:	42ac      	cmp	r4, r5
  406860:	fa02 f201 	lsl.w	r2, r2, r1
  406864:	fa00 fa01 	lsl.w	sl, r0, r1
  406868:	d908      	bls.n	40687c <__udivmoddi4+0x244>
  40686a:	18ed      	adds	r5, r5, r3
  40686c:	f109 30ff 	add.w	r0, r9, #4294967295
  406870:	d243      	bcs.n	4068fa <__udivmoddi4+0x2c2>
  406872:	42ac      	cmp	r4, r5
  406874:	d941      	bls.n	4068fa <__udivmoddi4+0x2c2>
  406876:	f1a9 0902 	sub.w	r9, r9, #2
  40687a:	441d      	add	r5, r3
  40687c:	1b2d      	subs	r5, r5, r4
  40687e:	fa1f fe8e 	uxth.w	lr, lr
  406882:	fbb5 f0fc 	udiv	r0, r5, ip
  406886:	fb0c 5510 	mls	r5, ip, r0, r5
  40688a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  40688e:	fb00 f808 	mul.w	r8, r0, r8
  406892:	45a0      	cmp	r8, r4
  406894:	d907      	bls.n	4068a6 <__udivmoddi4+0x26e>
  406896:	18e4      	adds	r4, r4, r3
  406898:	f100 35ff 	add.w	r5, r0, #4294967295
  40689c:	d229      	bcs.n	4068f2 <__udivmoddi4+0x2ba>
  40689e:	45a0      	cmp	r8, r4
  4068a0:	d927      	bls.n	4068f2 <__udivmoddi4+0x2ba>
  4068a2:	3802      	subs	r0, #2
  4068a4:	441c      	add	r4, r3
  4068a6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4068aa:	eba4 0408 	sub.w	r4, r4, r8
  4068ae:	fba0 8902 	umull	r8, r9, r0, r2
  4068b2:	454c      	cmp	r4, r9
  4068b4:	46c6      	mov	lr, r8
  4068b6:	464d      	mov	r5, r9
  4068b8:	d315      	bcc.n	4068e6 <__udivmoddi4+0x2ae>
  4068ba:	d012      	beq.n	4068e2 <__udivmoddi4+0x2aa>
  4068bc:	b156      	cbz	r6, 4068d4 <__udivmoddi4+0x29c>
  4068be:	ebba 030e 	subs.w	r3, sl, lr
  4068c2:	eb64 0405 	sbc.w	r4, r4, r5
  4068c6:	fa04 f707 	lsl.w	r7, r4, r7
  4068ca:	40cb      	lsrs	r3, r1
  4068cc:	431f      	orrs	r7, r3
  4068ce:	40cc      	lsrs	r4, r1
  4068d0:	6037      	str	r7, [r6, #0]
  4068d2:	6074      	str	r4, [r6, #4]
  4068d4:	2100      	movs	r1, #0
  4068d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4068da:	4618      	mov	r0, r3
  4068dc:	e6f8      	b.n	4066d0 <__udivmoddi4+0x98>
  4068de:	4690      	mov	r8, r2
  4068e0:	e6e0      	b.n	4066a4 <__udivmoddi4+0x6c>
  4068e2:	45c2      	cmp	sl, r8
  4068e4:	d2ea      	bcs.n	4068bc <__udivmoddi4+0x284>
  4068e6:	ebb8 0e02 	subs.w	lr, r8, r2
  4068ea:	eb69 0503 	sbc.w	r5, r9, r3
  4068ee:	3801      	subs	r0, #1
  4068f0:	e7e4      	b.n	4068bc <__udivmoddi4+0x284>
  4068f2:	4628      	mov	r0, r5
  4068f4:	e7d7      	b.n	4068a6 <__udivmoddi4+0x26e>
  4068f6:	4640      	mov	r0, r8
  4068f8:	e791      	b.n	40681e <__udivmoddi4+0x1e6>
  4068fa:	4681      	mov	r9, r0
  4068fc:	e7be      	b.n	40687c <__udivmoddi4+0x244>
  4068fe:	4601      	mov	r1, r0
  406900:	e778      	b.n	4067f4 <__udivmoddi4+0x1bc>
  406902:	3802      	subs	r0, #2
  406904:	443c      	add	r4, r7
  406906:	e745      	b.n	406794 <__udivmoddi4+0x15c>
  406908:	4608      	mov	r0, r1
  40690a:	e708      	b.n	40671e <__udivmoddi4+0xe6>
  40690c:	f1a8 0802 	sub.w	r8, r8, #2
  406910:	443d      	add	r5, r7
  406912:	e72b      	b.n	40676c <__udivmoddi4+0x134>

00406914 <__aeabi_idiv0>:
  406914:	4770      	bx	lr
  406916:	bf00      	nop
  406918:	454c4449 	.word	0x454c4449
  40691c:	00000000 	.word	0x00000000
  406920:	51726d54 	.word	0x51726d54
  406924:	00000000 	.word	0x00000000
  406928:	20726d54 	.word	0x20726d54
  40692c:	00637653 	.word	0x00637653
  406930:	686c6146 	.word	0x686c6146
  406934:	6d652061 	.word	0x6d652061
  406938:	69726320 	.word	0x69726320
  40693c:	78207261 	.word	0x78207261
  406940:	616d6553 	.word	0x616d6553
  406944:	726f6870 	.word	0x726f6870
  406948:	000a2065 	.word	0x000a2065
  40694c:	686c6146 	.word	0x686c6146
  406950:	6d652061 	.word	0x6d652061
  406954:	69726320 	.word	0x69726320
  406958:	78207261 	.word	0x78207261
  40695c:	75657551 	.word	0x75657551
  406960:	6f4e2065 	.word	0x6f4e2065
  406964:	0a206574 	.word	0x0a206574
  406968:	00000000 	.word	0x00000000
  40696c:	6973756d 	.word	0x6973756d
  406970:	00000063 	.word	0x00000063
  406974:	6c696146 	.word	0x6c696146
  406978:	74206465 	.word	0x74206465
  40697c:	7263206f 	.word	0x7263206f
  406980:	65746165 	.word	0x65746165
  406984:	6d616720 	.word	0x6d616720
  406988:	61742065 	.word	0x61742065
  40698c:	0a0d6b73 	.word	0x0a0d6b73
  406990:	00000000 	.word	0x00000000
  406994:	65746f6e 	.word	0x65746f6e
  406998:	00000000 	.word	0x00000000

0040699c <melody>:
  40699c:	00000052 00000008 00000052 00000008     R.......R.......
  4069ac:	000000a5 00000008 00000052 00000008     ........R.......
  4069bc:	00000052 00000008 00000093 00000008     R...............
  4069cc:	00000052 00000008 00000052 00000008     R.......R.......
  4069dc:	00000083 00000008 00000052 00000008     ........R.......
  4069ec:	00000052 00000008 00000075 00000008     R.......u.......
  4069fc:	00000052 00000008 00000052 00000008     R.......R.......
  406a0c:	0000007b 00000008 00000083 00000008     {...............
  406a1c:	00000052 00000008 00000052 00000008     R.......R.......
  406a2c:	000000a5 00000008 00000052 00000008     ........R.......
  406a3c:	00000052 00000008 00000093 00000008     R...............
  406a4c:	00000052 00000008 00000052 00000008     R.......R.......
  406a5c:	00000083 00000008 00000052 00000008     ........R.......
  406a6c:	00000052 00000008 00000075 fffffffe     R.......u.......
  406a7c:	00000052 00000008 00000052 00000008     R.......R.......
  406a8c:	000000a5 00000008 00000052 00000008     ........R.......
  406a9c:	00000052 00000008 00000093 00000008     R...............
  406aac:	00000052 00000008 00000052 00000008     R.......R.......
  406abc:	00000083 00000008 00000052 00000008     ........R.......
  406acc:	00000052 00000008 00000075 00000008     R.......u.......
  406adc:	00000052 00000008 00000052 00000008     R.......R.......
  406aec:	0000007b 00000008 00000083 00000008     {...............
  406afc:	00000052 00000008 00000052 00000008     R.......R.......
  406b0c:	000000a5 00000008 00000052 00000008     ........R.......
  406b1c:	00000052 00000008 00000093 00000008     R...............
  406b2c:	00000052 00000008 00000052 00000008     R.......R.......
  406b3c:	00000083 00000008 00000052 00000008     ........R.......
  406b4c:	00000052 00000008 00000075 fffffffe     R.......u.......
  406b5c:	00000052 00000008 00000052 00000008     R.......R.......
  406b6c:	000000a5 00000008 00000052 00000008     ........R.......
  406b7c:	00000052 00000008 00000093 00000008     R...............
  406b8c:	00000052 00000008 00000052 00000008     R.......R.......
  406b9c:	00000083 00000008 00000052 00000008     ........R.......
  406bac:	00000052 00000008 00000075 00000008     R.......u.......
  406bbc:	00000052 00000008 00000052 00000008     R.......R.......
  406bcc:	0000007b 00000008 00000083 00000008     {...............
  406bdc:	00000052 00000008 00000052 00000008     R.......R.......
  406bec:	000000a5 00000008 00000052 00000008     ........R.......
  406bfc:	00000052 00000008 00000093 00000008     R...............
  406c0c:	00000052 00000008 00000052 00000008     R.......R.......
  406c1c:	00000083 00000008 00000052 00000008     ........R.......
  406c2c:	00000052 00000008 00000075 fffffffe     R.......u.......
  406c3c:	00000052 00000008 00000052 00000008     R.......R.......
  406c4c:	000000a5 00000008 00000052 00000008     ........R.......
  406c5c:	00000052 00000008 00000093 00000008     R...............
  406c6c:	00000052 00000008 00000052 00000008     R.......R.......
  406c7c:	00000083 00000008 00000052 00000008     ........R.......
  406c8c:	00000052 00000008 00000075 00000008     R.......u.......
  406c9c:	00000052 00000008 00000052 00000008     R.......R.......
  406cac:	0000007b 00000008 00000083 00000008     {...............
  406cbc:	00000052 00000008 00000052 00000008     R.......R.......
  406ccc:	000000a5 00000008 00000052 00000008     ........R.......
  406cdc:	00000052 00000008 00000093 00000008     R...............
  406cec:	00000052 00000008 00000052 00000008     R.......R.......
  406cfc:	000000b9 fffffff0 00000093 fffffff0     ................
  406d0c:	0000007b fffffff0 000000dc fffffff0     {...............
  406d1c:	000000b9 fffffff0 0000007b fffffff0     ........{.......
  406d2c:	00000093 fffffff0 000000b9 fffffff0     ................
  406d3c:	000000dc fffffff0 000000b9 fffffff0     ................
  406d4c:	00000093 fffffff0 0000007b fffffff0     ........{.......
  406d5c:	00000052 00000008 00000052 00000008     R.......R.......
  406d6c:	000000a5 00000008 00000052 00000008     ........R.......
  406d7c:	00000052 00000008 00000093 00000008     R...............
  406d8c:	00000052 00000008 00000052 00000008     R.......R.......
  406d9c:	00000083 00000008 00000052 00000008     ........R.......
  406dac:	00000052 00000008 00000075 00000008     R.......u.......
  406dbc:	00000052 00000008 00000052 00000008     R.......R.......
  406dcc:	0000007b 00000008 00000083 00000008     {...............
  406ddc:	00000052 00000008 00000052 00000008     R.......R.......
  406dec:	000000a5 00000008 00000052 00000008     ........R.......
  406dfc:	00000052 00000008 00000093 00000008     R...............
  406e0c:	00000052 00000008 00000052 00000008     R.......R.......
  406e1c:	00000083 00000008 00000052 00000008     ........R.......
  406e2c:	00000052 00000008 00000075 fffffffe     R.......u.......
  406e3c:	00000052 00000008 00000052 00000008     R.......R.......
  406e4c:	000000a5 00000008 00000052 00000008     ........R.......
  406e5c:	00000052 00000008 00000093 00000008     R...............
  406e6c:	00000052 00000008 00000052 00000008     R.......R.......
  406e7c:	00000083 00000008 00000052 00000008     ........R.......
  406e8c:	00000052 00000008 00000075 00000008     R.......u.......
  406e9c:	00000052 00000008 00000052 00000008     R.......R.......
  406eac:	0000007b 00000008 00000083 00000008     {...............
  406ebc:	00000052 00000008 00000052 00000008     R.......R.......
  406ecc:	000000a5 00000008 00000052 00000008     ........R.......
  406edc:	00000052 00000008 00000093 00000008     R...............
  406eec:	00000052 00000008 00000052 00000008     R.......R.......
  406efc:	000000f7 fffffff0 000000c4 fffffff0     ................
  406f0c:	000000a5 fffffff0 000000c4 fffffff0     ................
  406f1c:	000000f7 fffffff0 0000014a fffffff0     ........J.......
  406f2c:	000000c4 fffffff0 000000f7 fffffff0     ................
  406f3c:	0000014a fffffff0 000000f7 fffffff0     J...............
  406f4c:	00000188 fffffff0 000001ee fffffff0     ................
  406f5c:	0000006e 00000008 0000006e 00000008     n.......n.......
  406f6c:	000000dc 00000008 0000006e 00000008     ........n.......
  406f7c:	0000006e 00000008 000000c4 00000008     n...............
  406f8c:	0000006e 00000008 0000006e 00000008     n.......n.......
  406f9c:	000000af 00000008 0000006e 00000008     ........n.......
  406fac:	0000006e 00000008 0000009c 00000008     n...............
  406fbc:	0000006e 00000008 0000006e 00000008     n.......n.......
  406fcc:	000000a5 00000008 000000af 00000008     ................
  406fdc:	0000006e 00000008 0000006e 00000008     n.......n.......
  406fec:	000000dc 00000008 0000006e 00000008     ........n.......
  406ffc:	0000006e 00000008 000000c4 00000008     n...............
  40700c:	0000006e 00000008 0000006e 00000008     n.......n.......
  40701c:	000000af 00000008 0000006e 00000008     ........n.......
  40702c:	0000006e 00000008 0000009c fffffffe     n...............
  40703c:	0000006e 00000008 0000006e 00000008     n.......n.......
  40704c:	000000dc 00000008 0000006e 00000008     ........n.......
  40705c:	0000006e 00000008 000000c4 00000008     n...............
  40706c:	0000006e 00000008 0000006e 00000008     n.......n.......
  40707c:	000000af 00000008 0000006e 00000008     ........n.......
  40708c:	0000006e 00000008 0000009c 00000008     n...............
  40709c:	0000006e 00000008 0000006e 00000008     n.......n.......
  4070ac:	000000a5 00000008 000000af 00000008     ................
  4070bc:	0000006e 00000008 0000006e 00000008     n.......n.......
  4070cc:	000000dc 00000008 0000006e 00000008     ........n.......
  4070dc:	0000006e 00000008 000000c4 00000008     n...............
  4070ec:	0000006e 00000008 0000006e 00000008     n.......n.......
  4070fc:	000000dc fffffff0 000000af fffffff0     ................
  40710c:	00000093 fffffff0 000000dc fffffff0     ................
  40711c:	000000af fffffff0 00000093 fffffff0     ................
  40712c:	00000106 fffffff0 000000dc fffffff0     ................
  40713c:	000000af fffffff0 000000dc fffffff0     ................
  40714c:	000000af fffffff0 00000093 fffffff0     ................
  40715c:	00000052 00000008 00000052 00000008     R.......R.......
  40716c:	000000a5 00000008 00000052 00000008     ........R.......
  40717c:	00000052 00000008 00000093 00000008     R...............
  40718c:	00000052 00000008 00000052 00000008     R.......R.......
  40719c:	00000083 00000008 00000052 00000008     ........R.......
  4071ac:	00000052 00000008 00000075 00000008     R.......u.......
  4071bc:	00000052 00000008 00000052 00000008     R.......R.......
  4071cc:	0000007b 00000008 00000083 00000008     {...............
  4071dc:	00000052 00000008 00000052 00000008     R.......R.......
  4071ec:	000000a5 00000008 00000052 00000008     ........R.......
  4071fc:	00000052 00000008 00000093 00000008     R...............
  40720c:	00000052 00000008 00000052 00000008     R.......R.......
  40721c:	00000083 00000008 00000052 00000008     ........R.......
  40722c:	00000052 00000008 00000075 fffffffe     R.......u.......
  40723c:	00000052 00000008 00000052 00000008     R.......R.......
  40724c:	000000a5 00000008 00000052 00000008     ........R.......
  40725c:	00000052 00000008 00000093 00000008     R...............
  40726c:	00000052 00000008 00000052 00000008     R.......R.......
  40727c:	00000083 00000008 00000052 00000008     ........R.......
  40728c:	00000052 00000008 00000075 00000008     R.......u.......
  40729c:	00000052 00000008 00000052 00000008     R.......R.......
  4072ac:	0000007b 00000008 00000083 00000008     {...............
  4072bc:	00000052 00000008 00000052 00000008     R.......R.......
  4072cc:	000000a5 00000008 00000052 00000008     ........R.......
  4072dc:	00000052 00000008 00000093 00000008     R...............
  4072ec:	00000052 00000008 00000052 00000008     R.......R.......
  4072fc:	00000083 00000008 00000052 00000008     ........R.......
  40730c:	00000052 00000008 00000075 fffffffe     R.......u.......
  40731c:	0000008b 00000008 0000008b 00000008     ................
  40732c:	00000115 00000008 0000008b 00000008     ................
  40733c:	0000008b 00000008 000000f7 00000008     ................
  40734c:	0000008b 00000008 0000008b 00000008     ................
  40735c:	000000dc 00000008 0000008b 00000008     ................
  40736c:	0000008b 00000008 000000c4 00000008     ................
  40737c:	0000008b 00000008 0000008b 00000008     ................
  40738c:	000000d0 00000008 000000dc 00000008     ................
  40739c:	0000007b 00000008 0000007b 00000008     {.......{.......
  4073ac:	000000f7 00000008 0000007b 00000008     ........{.......
  4073bc:	0000007b 00000008 000000dc 00000008     {...............
  4073cc:	0000007b 00000008 0000007b 00000008     {.......{.......
  4073dc:	000000c4 00000008 0000007b 00000008     ........{.......
  4073ec:	0000007b 00000008 000000af fffffffe     {...............
  4073fc:	00000052 00000008 00000052 00000008     R.......R.......
  40740c:	000000a5 00000008 00000052 00000008     ........R.......
  40741c:	00000052 00000008 00000093 00000008     R...............
  40742c:	00000052 00000008 00000052 00000008     R.......R.......
  40743c:	00000083 00000008 00000052 00000008     ........R.......
  40744c:	00000052 00000008 00000075 00000008     R.......u.......
  40745c:	00000052 00000008 00000052 00000008     R.......R.......
  40746c:	0000007b 00000008 00000083 00000008     {...............
  40747c:	00000052 00000008 00000052 00000008     R.......R.......
  40748c:	000000a5 00000008 00000052 00000008     ........R.......
  40749c:	00000052 00000008 00000093 00000008     R...............
  4074ac:	00000052 00000008 00000052 00000008     R.......R.......
  4074bc:	000000f7 fffffff0 000000c4 fffffff0     ................
  4074cc:	000000a5 fffffff0 000000c4 fffffff0     ................
  4074dc:	000000f7 fffffff0 0000014a fffffff0     ........J.......
  4074ec:	000000c4 fffffff0 000000f7 fffffff0     ................
  4074fc:	0000014a fffffff0 000000f7 fffffff0     J...............
  40750c:	00000188 fffffff0 000001ee fffffff0     ................
  40751c:	00000052 00000008 00000052 00000008     R.......R.......
  40752c:	000000a5 00000008 00000052 00000008     ........R.......
  40753c:	00000052 00000008 00000093 00000008     R...............
  40754c:	00000052 00000008 00000052 00000008     R.......R.......
  40755c:	00000083 00000008 00000052 00000008     ........R.......
  40756c:	00000052 00000008 00000075 00000008     R.......u.......
  40757c:	00000052 00000008 00000052 00000008     R.......R.......
  40758c:	0000007b 00000008 00000083 00000008     {...............
  40759c:	00000052 00000008 00000052 00000008     R.......R.......
  4075ac:	000000a5 00000008 00000052 00000008     ........R.......
  4075bc:	00000052 00000008 00000093 00000008     R...............
  4075cc:	00000052 00000008 00000052 00000008     R.......R.......
  4075dc:	00000083 00000008 00000052 00000008     ........R.......
  4075ec:	00000052 00000008 00000075 fffffffe     R.......u.......
  4075fc:	00000052 00000008 00000052 00000008     R.......R.......
  40760c:	000000a5 00000008 00000052 00000008     ........R.......
  40761c:	00000052 00000008 00000093 00000008     R...............
  40762c:	00000052 00000008 00000052 00000008     R.......R.......
  40763c:	00000083 00000008 00000052 00000008     ........R.......
  40764c:	00000052 00000008 00000075 00000008     R.......u.......
  40765c:	00000052 00000008 00000052 00000008     R.......R.......
  40766c:	0000007b 00000008 00000083 00000008     {...............
  40767c:	00000052 00000008 00000052 00000008     R.......R.......
  40768c:	000000a5 00000008 00000052 00000008     ........R.......
  40769c:	00000052 00000008 00000093 00000008     R...............
  4076ac:	00000052 00000008 00000052 00000008     R.......R.......
  4076bc:	000000b9 fffffff0 0000009c fffffff0     ................
  4076cc:	0000007b fffffff0 000000b9 fffffff0     {...............
  4076dc:	0000009c fffffff0 0000007b fffffff0     ........{.......
  4076ec:	000000c4 fffffff0 00000093 fffffff0     ................
  4076fc:	0000007b fffffff0 00000137 fffffff0     {.......7.......
  40770c:	0000009c fffffff0 0000007b fffffff0     ........{.......
  40771c:	00000052 00000008 00000052 00000008     R.......R.......
  40772c:	000000a5 00000008 00000052 00000008     ........R.......
  40773c:	00000052 00000008 00000093 00000008     R...............
  40774c:	00000052 00000008 00000052 00000008     R.......R.......
  40775c:	00000083 00000008 00000052 00000008     ........R.......
  40776c:	00000052 00000008 00000075 00000008     R.......u.......
  40777c:	00000052 00000008 00000052 00000008     R.......R.......
  40778c:	0000007b 00000008 00000083 00000008     {...............
  40779c:	00000052 00000008 00000052 00000008     R.......R.......
  4077ac:	000000a5 00000008 00000052 00000008     ........R.......
  4077bc:	00000052 00000008 00000093 00000008     R...............
  4077cc:	00000052 00000008 00000052 00000008     R.......R.......
  4077dc:	00000083 00000008 00000052 00000008     ........R.......
  4077ec:	00000052 00000008 00000075 fffffffe     R.......u.......
  4077fc:	00000052 00000008 00000052 00000008     R.......R.......
  40780c:	000000a5 00000008 00000052 00000008     ........R.......
  40781c:	00000052 00000008 00000093 00000008     R...............
  40782c:	00000052 00000008 00000052 00000008     R.......R.......
  40783c:	00000083 00000008 00000052 00000008     ........R.......
  40784c:	00000052 00000008 00000075 00000008     R.......u.......
  40785c:	00000052 00000008 00000052 00000008     R.......R.......
  40786c:	0000007b 00000008 00000083 00000008     {...............
  40787c:	00000052 00000008 00000052 00000008     R.......R.......
  40788c:	000000a5 00000008 00000052 00000008     ........R.......
  40789c:	00000052 00000008 00000093 00000008     R...............
  4078ac:	00000052 00000008 00000052 00000008     R.......R.......
  4078bc:	0000014a fffffff0 000000f7 fffffff0     J...............
  4078cc:	000000c4 fffffff0 00000188 fffffff0     ................
  4078dc:	0000014a fffffff0 000000c4 fffffff0     J...............
  4078ec:	000000f7 fffffff0 00000126 fffffff0     ........&.......
  4078fc:	0000014a fffffff0 00000188 fffffff0     J...............
  40790c:	0000014a fffffff0 000000c4 fffffff0     J...............
  40791c:	00000052 00000008 00000052 00000008     R.......R.......
  40792c:	000000a5 00000008 00000052 00000008     ........R.......
  40793c:	00000052 00000008 00000093 00000008     R...............
  40794c:	00000052 00000008 00000052 00000008     R.......R.......
  40795c:	00000083 00000008 00000052 00000008     ........R.......
  40796c:	00000052 00000008 00000075 00000008     R.......u.......
  40797c:	00000052 00000008 00000052 00000008     R.......R.......
  40798c:	0000007b 00000008 00000083 00000008     {...............
  40799c:	00000052 00000008 00000052 00000008     R.......R.......
  4079ac:	000000a5 00000008 00000052 00000008     ........R.......
  4079bc:	00000052 00000008 00000093 00000008     R...............
  4079cc:	00000052 00000008 00000052 00000008     R.......R.......
  4079dc:	00000083 00000008 00000052 00000008     ........R.......
  4079ec:	00000052 00000008 00000075 fffffffe     R.......u.......
  4079fc:	0000006e 00000008 0000006e 00000008     n.......n.......
  407a0c:	000000dc 00000008 0000006e 00000008     ........n.......
  407a1c:	0000006e 00000008 000000c4 00000008     n...............
  407a2c:	0000006e 00000008 0000006e 00000008     n.......n.......
  407a3c:	000000af 00000008 0000006e 00000008     ........n.......
  407a4c:	0000006e 00000008 0000009c 00000008     n...............
  407a5c:	0000006e 00000008 0000006e 00000008     n.......n.......
  407a6c:	000000a5 00000008 000000af 00000008     ................
  407a7c:	0000006e 00000008 0000006e 00000008     n.......n.......
  407a8c:	000000dc 00000008 0000006e 00000008     ........n.......
  407a9c:	0000006e 00000008 000000c4 00000008     n...............
  407aac:	0000006e 00000008 0000006e 00000008     n.......n.......
  407abc:	000000dc fffffff0 000000af fffffff0     ................
  407acc:	00000093 fffffff0 000000dc fffffff0     ................
  407adc:	000000af fffffff0 00000093 fffffff0     ................
  407aec:	00000106 fffffff0 000000dc fffffff0     ................
  407afc:	000000af fffffff0 000000dc fffffff0     ................
  407b0c:	000000af fffffff0 00000093 fffffff0     ................
  407b1c:	00000052 00000008 00000052 00000008     R.......R.......
  407b2c:	000000a5 00000008 00000052 00000008     ........R.......
  407b3c:	00000052 00000008 00000093 00000008     R...............
  407b4c:	00000052 00000008 00000052 00000008     R.......R.......
  407b5c:	00000083 00000008 00000052 00000008     ........R.......
  407b6c:	00000052 00000008 00000075 00000008     R.......u.......
  407b7c:	00000052 00000008 00000052 00000008     R.......R.......
  407b8c:	0000007b 00000008 00000083 00000008     {...............
  407b9c:	00000052 00000008 00000052 00000008     R.......R.......
  407bac:	000000a5 00000008 00000052 00000008     ........R.......
  407bbc:	00000052 00000008 00000093 00000008     R...............
  407bcc:	00000052 00000008 00000052 00000008     R.......R.......
  407bdc:	00000083 00000008 00000052 00000008     ........R.......
  407bec:	00000052 00000008 00000075 fffffffe     R.......u.......
  407bfc:	00000052 00000008 00000052 00000008     R.......R.......
  407c0c:	000000a5 00000008 00000052 00000008     ........R.......
  407c1c:	00000052 00000008 00000093 00000008     R...............
  407c2c:	00000052 00000008 00000052 00000008     R.......R.......
  407c3c:	00000083 00000008 00000052 00000008     ........R.......
  407c4c:	00000052 00000008 00000075 00000008     R.......u.......
  407c5c:	00000052 00000008 00000052 00000008     R.......R.......
  407c6c:	0000007b 00000008 00000083 00000008     {...............
  407c7c:	00000052 00000008 00000052 00000008     R.......R.......
  407c8c:	000000a5 00000008 00000052 00000008     ........R.......
  407c9c:	00000052 00000008 00000093 00000008     R...............
  407cac:	00000052 00000008 00000052 00000008     R.......R.......
  407cbc:	00000083 00000008 00000052 00000008     ........R.......
  407ccc:	00000052 00000008 00000075 fffffffe     R.......u.......
  407cdc:	00000052 00000008 00000052 00000008     R.......R.......
  407cec:	000000a5 00000008 00000052 00000008     ........R.......
  407cfc:	00000052 00000008 00000093 00000008     R...............
  407d0c:	00000052 00000008 00000052 00000008     R.......R.......
  407d1c:	00000083 00000008 00000052 00000008     ........R.......
  407d2c:	00000052 00000008 00000075 00000008     R.......u.......
  407d3c:	00000052 00000008 00000052 00000008     R.......R.......
  407d4c:	0000007b 00000008 00000083 00000008     {...............
  407d5c:	00000052 00000008 00000052 00000008     R.......R.......
  407d6c:	000000a5 00000008 00000052 00000008     ........R.......
  407d7c:	00000052 00000008 00000093 00000008     R...............
  407d8c:	00000052 00000008 00000052 00000008     R.......R.......
  407d9c:	00000083 00000008 00000052 00000008     ........R.......
  407dac:	00000052 00000008 00000075 fffffffe     R.......u.......
  407dbc:	00000052 00000008 00000052 00000008     R.......R.......
  407dcc:	000000a5 00000008 00000052 00000008     ........R.......
  407ddc:	00000052 00000008 00000093 00000008     R...............
  407dec:	00000052 00000008 00000052 00000008     R.......R.......
  407dfc:	00000083 00000008 00000052 00000008     ........R.......
  407e0c:	00000052 00000008 00000075 00000008     R.......u.......
  407e1c:	00000052 00000008 00000052 00000008     R.......R.......
  407e2c:	0000007b 00000008 00000083 00000008     {...............
  407e3c:	00000052 00000008 00000052 00000008     R.......R.......
  407e4c:	000000a5 00000008 00000052 00000008     ........R.......
  407e5c:	00000052 00000008 00000093 00000008     R...............
  407e6c:	00000052 00000008 00000052 00000008     R.......R.......
  407e7c:	000000f7 fffffff0 000000c4 fffffff0     ................
  407e8c:	000000a5 fffffff0 0000007b fffffff0     ........{.......
  407e9c:	000000a5 fffffff0 000000c4 fffffff0     ................
  407eac:	00000106 fffffff0 000000f7 fffffff0     ................
  407ebc:	000000c4 fffffff0 000000f7 fffffff0     ................
  407ecc:	000000c4 fffffff0 000000a5 fffffff0     ................
  407edc:	63617473 766f206b 6c667265 2520776f     stack overflow %
  407eec:	73252078 00000a0d                       x %s....

00407ef4 <_global_impure_ptr>:
  407ef4:	20400010 33323130 37363534 42413938     ..@ 0123456789AB
  407f04:	46454443 00000000 33323130 37363534     CDEF....01234567
  407f14:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  407f24:	0000296c                                l)..

00407f28 <blanks.7217>:
  407f28:	20202020 20202020 20202020 20202020                     

00407f38 <zeroes.7218>:
  407f38:	30303030 30303030 30303030 30303030     0000000000000000
  407f48:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00407f58 <_ctype_>:
  407f58:	20202000 20202020 28282020 20282828     .         ((((( 
  407f68:	20202020 20202020 20202020 20202020                     
  407f78:	10108820 10101010 10101010 10101010      ...............
  407f88:	04040410 04040404 10040404 10101010     ................
  407f98:	41411010 41414141 01010101 01010101     ..AAAAAA........
  407fa8:	01010101 01010101 01010101 10101010     ................
  407fb8:	42421010 42424242 02020202 02020202     ..BBBBBB........
  407fc8:	02020202 02020202 02020202 10101010     ................
  407fd8:	00000020 00000000 00000000 00000000      ...............
	...

0040805c <_init>:
  40805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40805e:	bf00      	nop
  408060:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408062:	bc08      	pop	{r3}
  408064:	469e      	mov	lr, r3
  408066:	4770      	bx	lr

00408068 <__init_array_start>:
  408068:	00405279 	.word	0x00405279

0040806c <__frame_dummy_init_array_entry>:
  40806c:	00400165                                e.@.

00408070 <_fini>:
  408070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  408072:	bf00      	nop
  408074:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408076:	bc08      	pop	{r3}
  408078:	469e      	mov	lr, r3
  40807a:	4770      	bx	lr

0040807c <__fini_array_start>:
  40807c:	00400141 	.word	0x00400141
